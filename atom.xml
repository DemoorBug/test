<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>696px</title>
  
  <subtitle>blog</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="demoorbug.github.io/"/>
  <updated>2022-03-15T22:58:15.959Z</updated>
  <id>demoorbug.github.io/</id>
  
  <author>
    <name>DEBUG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac hyper key 仅需要使用hammerspoon就可实现, 可配合Alfred, 不需要借助Karabiner-Elements 和 BetterTouchTool | Mac hyper key only requires hammerspoon, works with Alfred and does not require Karabiner-Elements or BetterTouchTool.</title>
    <link href="demoorbug.github.io/2022/02/18/Mac-hyper-key/"/>
    <id>demoorbug.github.io/2022/02/18/Mac-hyper-key/</id>
    <published>2022-02-18T07:04:37.000Z</published>
    <updated>2022-03-15T22:58:15.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么不使用Karabiner-Elements-和-BetterTouchTool"><a href="#为什么不使用Karabiner-Elements-和-BetterTouchTool" class="headerlink" title="为什么不使用Karabiner-Elements 和 BetterTouchTool"></a>为什么不使用Karabiner-Elements 和 BetterTouchTool</h1><p><strong>Karabiner-Elements</strong><br>我一直在使用<a href="https://karabiner-elements.pqrs.org/" target="_blank" rel="noopener">Karabiner-Elements</a>软件绑定我的键位以及设置Hyper key, 但是有时候这个软件会出bug,比如说偶尔开机会导致软件的映射全部失效,必须重新安装或者重启电脑,这真的很烦人,并且软件更新频率很低, 我这个bug已经好几个月没有解决了,索性就换一款类似产品用,不然太糟心了<br><strong>BetterTouchTool</strong><br>还是bug问题,我是将<code>Caps_lock</code>映射为<code>Control</code>,<code>Control</code>映射为<code>Caps_lock</code>,<code>Hyper key</code>我是用的<code>Caps_lock</code>映射的(这里可能有点绕),在Karabiner-Elements中功能是正常的,大家各司其职,但是呢这款软件会把以上两个键位全部映射为<code>Hyper key</code>,所以最后导致放弃,软件大概有100m左右,我就是要一个小功能而已,完全没必要,折腾了一小时无果卸载了</p><h1 id="用hidutil-和-hammerspoon-实现Hyper-key"><a href="#用hidutil-和-hammerspoon-实现Hyper-key" class="headerlink" title="用hidutil 和 hammerspoon 实现Hyper key"></a>用hidutil 和 hammerspoon 实现Hyper key</h1><p><strong>hidutil</strong><br>首先打开这个网址<a href="https://hidutil-generator.netlify.app/" target="_blank" rel="noopener">hidutil key remapping generator for MacOS</a></p><p>选择From key,To key设置自己需要映射的快捷键,我这里遇到一个坑,就是left_command实际上映射的是右边的command的键,这里大家最好自己实践一下<br>left_command escape 这里实际上映射的是右command<br>application fn 因为用的是win键盘,mac上这个键没有实际意义,重新映射一个fn用<br>caps_lock left_control<br>left_control f18 这个f18是为了后面映射Hyper key做准备的,你可以把自己喜欢的键位映射为f13-f19</p><p>这是我的键位映射xml,映射好自己的键位后,点击页面的Copy或者手动复制<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.local.KeyRemapping<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/bin/hidutil<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>property<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>--set<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>&#123;"UserKeyMapping":[</span><br><span class="line">            &#123;</span><br><span class="line">              "HIDKeyboardModifierMappingSrc": 0x7000000E3,</span><br><span class="line">              "HIDKeyboardModifierMappingDst": 0x700000029</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              "HIDKeyboardModifierMappingSrc": 0x700000065,</span><br><span class="line">              "HIDKeyboardModifierMappingDst": 0xFF00000003</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              "HIDKeyboardModifierMappingSrc": 0x700000039,</span><br><span class="line">              "HIDKeyboardModifierMappingDst": 0x7000000E0</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              "HIDKeyboardModifierMappingSrc": 0x7000000E0,</span><br><span class="line">              "HIDKeyboardModifierMappingDst": 0x70000006D</span><br><span class="line">            &#125;</span><br><span class="line">        ]&#125;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在启动台里面打开终端(Terminal)输入以下命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Library/LaunchAgents/</span><br><span class="line">vim com.local.keyRemppin.plist</span><br><span class="line">p</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure></p><p>如果上面命令看不懂可以使用下面这串命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Library/LaunchAgents/</span><br><span class="line">touch com.local.keyRemppin.plist</span><br><span class="line">open .</span><br><span class="line">右键com.local.keyRemppin.plist文件&gt;打开方式&gt;其他&gt;文本编辑&gt;右健粘贴自己映射的xml&gt;Command+s保存</span><br></pre></td></tr></table></figure></p><p>粘贴好之后打开终端输入:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl load com.local.keyRempping.plist</span><br></pre></td></tr></table></figure></p><p>这样就映射好了键位,如果后续更新这个文件,必须要先取消加载再重新加载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">launchctl unload com.local.keyRempping.plist</span><br><span class="line">launchctl load com.local.keyRempping.plist</span><br></pre></td></tr></table></figure></p><p>以上命令必须保证自己在<code>~/Library/LaunchAgents/</code>目录,否则会报错</p><p><strong>使用Hammerspoon设置Hyper key</strong><br>可以去官网下载<a href="http://www.hammerspoon.org/" target="_blank" rel="noopener">hammerspoon官网</a>或用HomeBrew安装:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install hammerspoon</span><br></pre></td></tr></table></figure></p><p>在启动台里面打开终端(Terminal)输入以下命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.hammerspoon/</span><br><span class="line">open .</span><br></pre></td></tr></table></figure></p><p>右健新建init.lua文件,并加入一下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require &quot;hotkey.hotkey&quot;</span><br></pre></td></tr></table></figure></p><p>接着终端输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir hotkey/ &amp;&amp; <span class="built_in">cd</span> hotkey</span><br><span class="line">open .</span><br></pre></td></tr></table></figure></p><p>右健新建hotkey.lua,并加入一下代码<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">hyper = hs.hotkey.modal.new(&#123;&#125;, <span class="string">'F17'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enterHyperMode</span><span class="params">()</span></span></span><br><span class="line">  hyper:enter()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 绑定f18为hyper key</span></span><br><span class="line">f18 = hs.hotkey.bind(&#123;&#125;, <span class="string">'F18'</span>, enterHyperMode )</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这里设置自己要使用的Hyper key,比如在Alfred中设置的快捷键(hotkey)为cmd+alt+shift+ctrl+i的话,下面的数组中就添加'i'、cmd+alt+shift+ctrl+y, 就添加'y',其他键位同理</span></span><br><span class="line"><span class="comment">-- 1 == cmd+alt+shift+ctrl+1 </span></span><br><span class="line"><span class="comment">-- 2 == cmd+alt+shift+ctrl+2 </span></span><br><span class="line"><span class="comment">-- c == cmd+alt+shift+ctrl+c </span></span><br><span class="line"></span><br><span class="line">keys = &#123;<span class="string">'i'</span>,<span class="string">'y'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'c'</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hyperFun</span><span class="params">(keys)</span></span></span><br><span class="line">  <span class="keyword">for</span> i=<span class="number">1</span>, #(keys) <span class="keyword">do</span></span><br><span class="line">    hyper:bind(&#123;&#125;, keys[i], <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">      hs.eventtap.keyStroke(&#123;<span class="string">'cmd'</span>,<span class="string">'alt'</span>,<span class="string">'shift'</span>,<span class="string">'ctrl'</span>&#125;, keys[i])</span><br><span class="line">      hyper.triggered = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">hyperFun(keys)</span><br></pre></td></tr></table></figure></p><p>如果没有生效的话,可以把Hammerspoon软件退出重新打开,或者点击小图标Reload</p><blockquote><p>大家会用vim的话,可以直接用vim编辑</p></blockquote><p>大功告成,之后大家就可以在各种应用里面设置cmd+alt+shift+ctrl+?的快捷键了,终于可以摆脱Karabiner-Elements<br>Ps:<br><a href="https://rakhesh.com/mac/using-hidutil-to-map-macos-keyboard-keys/" target="_blank" rel="noopener">https://rakhesh.com/mac/using-hidutil-to-map-macos-keyboard-keys/</a></p><p><a href="https://kalis.me/setup-hyper-key-hammerspoon-macos/" target="_blank" rel="noopener">https://kalis.me/setup-hyper-key-hammerspoon-macos/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么不使用Karabiner-Elements-和-BetterTouchTool&quot;&gt;&lt;a href=&quot;#为什么不使用Karabiner-Elements-和-BetterTouchTool&quot; class=&quot;headerlink&quot; title=&quot;为什么不使用Ka
      
    
    </summary>
    
      <category term="Mac" scheme="demoorbug.github.io/categories/Mac/"/>
    
      <category term="hammerspoon" scheme="demoorbug.github.io/categories/Mac/hammerspoon/"/>
    
      <category term="Alfred" scheme="demoorbug.github.io/categories/Mac/hammerspoon/Alfred/"/>
    
    
      <category term="Mac" scheme="demoorbug.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Programming</title>
    <link href="demoorbug.github.io/2022/02/14/Programming/"/>
    <id>demoorbug.github.io/2022/02/14/Programming/</id>
    <published>2022-02-13T19:57:35.000Z</published>
    <updated>2022-03-15T22:58:15.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h1><p>map() 对范围中每个值应用一个函数,并返回应用该函数的结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map([<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"peach"</span>], (item) =&gt; item.length)</span><br><span class="line"><span class="comment">// [5,6,5]</span></span><br></pre></td></tr></table></figure></p><p>filter() 对范围中的每个值应用谓词(?),过滤掉谓词返回false的那些值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filter([<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"peach"</span>], (item) =&gt; item.length == <span class="number">5</span>)</span><br><span class="line"><span class="comment">// ["apple", "peach"]</span></span><br></pre></td></tr></table></figure></p><p>reduce() 使用给定函数合并范围中的值, 并返回一个值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reduce([<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"peach"</span>], <span class="string">""</span>, (acc, item) =&gt; acc + item)</span><br><span class="line"><span class="comment">// ""初始值, "appleorangepech" 结果值</span></span><br><span class="line"><span class="comment">// acc是累积项, 从初始值开始,最后得到所有元素合并后的值</span></span><br><span class="line">[<span class="string">"apple"</span>,<span class="string">"orange"</span>, <span class="string">"peach"</span>].reduce(<span class="function">(<span class="params">acc, item</span>) =&gt;</span> acc+item, <span class="string">"123"</span>)</span><br><span class="line"><span class="comment">// array.reduce(callback, initiaValue)</span></span><br></pre></td></tr></table></figure></p><blockquote><p>上面这种用法不对,应该是得自己封装吧</p></blockquote><blockquote><p>在高层面上,编译器或解析器将把我们编写的源代码转换成机器(或运行时)能够理解的指令. 当运行时是一台物理计算机时,转换的指令将是CPU指令; 当运行时是虚拟机时, 则有自己的指令集和工具 </p></blockquote><blockquote><p>类型的主要优点在于正确性、不可变性、 封装、 可组合性、和可读性. 这5种优点时优秀的软件设计和行为的根本特性. 系统中总有出息混乱或者无序状态的倾向, 而上述特性则起到抗衡这种倾向的作用.</p></blockquote><h1 id="不可变性"><a href="#不可变性" class="headerlink" title="不可变性"></a>不可变性</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.4</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safeDivide</span>(<span class="params"></span>): <span class="title">nubmer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x: <span class="built_in">number</span> = <span class="number">42</span></span><br><span class="line">  <span class="comment">// 使用常量 const x: number = 42</span></span><br><span class="line">  <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"x should not be 0"</span>);</span><br><span class="line">  x = x - <span class="number">42</span></span><br><span class="line">  <span class="comment">// 修改常量会导致编译错误</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">42</span> / x <span class="comment">//除零导致无穷大</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量被另一个并发执行的线程修改,或者被另外调用的函数悄悄修改. 一旦值发生变化, 执行检查的保证就不再有效, 如果这里使用常量就不会出现这个问题</p><blockquote><p>从内存表示的角度来说,可变与不可变x没有区别. 常量性只对编译器有意义, 它是类型系统启用的一个属性<br>当涉及并发时,不可变性特别有用,因为如果数据不可变,就不会发生数据竞争</p></blockquote><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>封装值当是隐藏代码内部机制的功能,这里的代码可以是函数、类或者模块<br>我们利用封装, 是因为它可以帮助我们处理复杂性: 将代码拆分为更小的组件, 每个组件只向外界公开严格的需要的项, 而其他实现细节则被隐藏并隔离起来<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.6 封装程度不足</span></span><br><span class="line"><span class="keyword">class</span> SafeDivisor &#123;</span><br><span class="line">  divisor: <span class="built_in">number</span> = <span class="number">1</span></span><br><span class="line">  <span class="comment">// private divisor: number = 1</span></span><br><span class="line">  <span class="comment">// 变为私有成员,外部调用修改的时候ts就不会编译</span></span><br><span class="line">  setDivisor(value: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"value should not be 0"</span>)</span><br><span class="line">    <span class="keyword">this</span>.divisor = value</span><br><span class="line">  &#125;</span><br><span class="line">  divide(x: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x / <span class="keyword">this</span>.divisor</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sd = <span class="keyword">new</span> SafeDivisor()</span><br><span class="line">sd.divisor = <span class="number">0</span> <span class="comment">// 因为除数成员是公有的,所以检查可能被绕过修改</span></span><br><span class="line">sd.divide(<span class="number">42</span>)</span><br></pre></td></tr></table></figure></p><p>public和private成员的内存表示是一样的</p><p>封装或信息隐藏使我们能够将逻辑和数据拆分到一个公有接口和一个非公有实现中. 在大型系统中, 这张拆分非常有帮助, 因为使用接口(或抽象)使理解一段特定代码的作用变得更加简单. 我们只需要理解组件的借口, 而不必理解其全部实现细节. 封装也有助于将非公有信息限制在一个边界内, 并保证外部代码不能修改这些信息,因为他们根本就访问不了这些信息.</p><p>封装出现在多个层次,例如,服务将其API公开为接口, 模块导出其接口并隐藏实现细节, 类只公开公有成员, 等等. 与嵌套娃娃一样, 代码两部分之间的关系越弱, 共享的信息就越少. 这样一来, 组件对其内部管理的数据能够做出的保证就得到了强化, 因为如果不经过该组件的接口, 外部代码将无法修改这些数据</p><h1 id="可组合性"><a href="#可组合性" class="headerlink" title="可组合性"></a>可组合性</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.8 不可组合的系统</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findFirstnegativeNumber</span>(<span class="params"><span class="built_in">number</span> : <span class="built_in">number</span>[]</span>): <span class="title">number</span> | <span class="title">undefined</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i of numbers) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>) <span class="keyword">return</span> i</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.error("No matching value found")</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findFirestOneCharacterString</span>(<span class="params"><span class="built_in">string</span>: <span class="built_in">string</span>[]</span>): <span class="title">string</span> | <span class="title">undefined</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> str of strings) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str.length == <span class="number">1</span>) <span class="keyword">return</span> str</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.error("No matching value found")</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设有一个新的需求: 当在不到满足条件元素时,就记录一个错误,那就需要更新两个函数, 这就很麻烦了.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.10 可组合系统</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">first</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  range: T[],</span></span></span><br><span class="line">  p: (elem: T) =&gt; boolean</span><br><span class="line">): T | <span class="literal">undefined</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> elem of range) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p(elem)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(elem);</span><br><span class="line">      <span class="keyword">return</span> elem</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findFirstNegativeNumber</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="built_in">number</span>: <span class="built_in">number</span>[]</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">number</span> | <span class="title">undefined</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first(<span class="built_in">number</span>, <span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findFirestOneCharacterString</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="built_in">string</span>: <span class="built_in">string</span>[]</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">string</span> | <span class="title">undefined</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first(<span class="built_in">string</span>, <span class="function"><span class="params">n</span> =&gt;</span> n.length == <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第10章讨论泛型算法和迭代器的时候将会看到, 我们可以使用这个函数变得更加通用. 目前, 它只操作某个类型的T的一个数组. 可以扩展这个函数, 让它遍历人意数据结构</p><h1 id="类型系统的类型"><a href="#类型系统的类型" class="headerlink" title="类型系统的类型"></a>类型系统的类型</h1><p>静态类型在编译时检查类型, 所以当完成变以后, 运行时的值一定有正确的类型. 另一方面, 动态类型则将类型检查推迟到运行时, 所以类型不匹配就成了运行时错误<br>强类型系统只会做很少的(甚至不做)隐士类型转换, 而弱类型系统则允许更多隐式类型转换<br>javascript时动态类型, typescript 时静态类型</p><blockquote><p>动态类型不会在编译时施加任何类型约束. 日常交流中有时会将动态类型叫做”鸭子类型” (duck typing), 这个名称来自俗语: “如果一个动物走起来像鸭子, 叫起来像鸭子,那么它就是一只鸭子”<br>ts中使用any关键字可以模拟动态类型</p></blockquote><p>js是弱类型,ts是强类型,<code>==</code>运算符在ts中无法编译,会直接报错</p><h1 id="空类型-amp-单元类型"><a href="#空类型-amp-单元类型" class="headerlink" title="空类型 &amp; 单元类型"></a>空类型 &amp; 单元类型</h1><p>函数在所有代码路径上都抛出异常(throw new Error(‘error’))、程序可能执行无限循环, 或者可能导致程序崩溃. 这些都算空类型<code>never</code>,如果用<code>void</code>就会存在误导性. 这些函数不是不返回有意义的值, 而是根本不返回</p><p>单元类型是只有一个可能值的类型. 对于这种类型变量, 检查其值是没有意义的, 它只能是哪一个值. 当函数的结果没有意义时, 我们会使用单元类型<code>void</code></p><p>两个取值类型. 大多数语言都提供了布尔类型, 这是一个标准的、 只有两个值的类型</p><h1 id="数值类型的常见陷阱"><a href="#数值类型的常见陷阱" class="headerlink" title="数值类型的常见陷阱"></a>数值类型的常见陷阱</h1><p>0.10+0.10+0.10 !== 0.30<br><a href="为什么0.1+0.1+0.1不等于0.3">https://gauravkk22.medium.com/why-0-1-0-2-0-3-is-false-in-js-mystery-unsolved-with-solution-4f7db2755f18</a><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">epsilonEqual</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.abs(a-b) &lt;= <span class="built_in">Number</span>.EPSILON</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(epsilonEqual(<span class="number">0.1</span>+<span class="number">0.1</span>+<span class="number">0.1</span>, <span class="number">0.3</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 因为0.3和0.30000000000000004在彼此的圆整误差内</span></span><br></pre></td></tr></table></figure></p><h1 id="编码文本"><a href="#编码文本" class="headerlink" title="编码文本"></a>编码文本</h1><p>处理文本最好用库, grapheme-splittes,能够处理自负的书写位<br>上面这个库可帮助避免在处理字符串时最常出现的三类错误:<br>在字符串级别而不是书写位级别操纵编码文本<br>在字节级别而不是字符级别操纵编码文本<br>采用错误的编码来将一个字节序列解释为文本,例如试图将UTF-16编码文本解释为UTF-8文本,或者反过来解释</p><blockquote><p>以前有门课程就专门说过不要直接使用(忘了是那个方法,substring?splice?)拆分文本,也没说啥原因,应该就是这种情况</p></blockquote><p>UTF-8 8位==1个字节==取决于字符(英文1, 中文3, unicode 2)<br>但是uft-8是可变字节和uft-16一样,utf-8中的中文是3个字节,而unicode是两个字节</p><p>UTF-32 32位==4字节==1个字符<br>所有</p><h1 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h1><p>元祖类型: 元祖类型由一组类型构成,通过它们在元祖中的位置可以访问这些组成类型. 元祖提供了一种特殊的分组数据的方式, 允许我们将不同的类型的多个值作为一个值进行传递</p><blockquote><p>元祖可以精确到每一个元素的类型</p></blockquote><p>记录类型: 记录类型与元祖类型相似, 可将其他类型组合在一起. 但是, 元祖中安装分量值的位置来访问值, 而在记录类型中, 无名可以为分量设置名称, 并通过名称来访问值. 在不同语言中, 记录类型被称为记录或者结构</p><blockquote><p>这里感觉用记录类型很麻烦,挺奇怪的,估计后面会讲type Point = {}?</p></blockquote><p>枚举类型: 枚举类型的一个变量可以是提供的值和任何一个.每当我们有一小组可能的取值, 并且想要以不会导致歧义的方式表示他们时,就可以使用枚举</p><p>可选类型: Ts中用<code>|</code>来表示<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.12 可选类型</span></span><br><span class="line"><span class="keyword">class</span> Optional&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> value: T | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">private</span> assigned: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">value?: T</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      <span class="keyword">this</span>.value = value;</span><br><span class="line">      <span class="keyword">this</span>.assigned = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">      <span class="keyword">this</span>.assigned = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  hasvalue(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.assigned</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getValue(): T &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.assigned) <span class="keyword">throw</span> <span class="built_in">Error</span>()</span><br><span class="line">    <span class="keyword">return</span> &lt;T&gt;<span class="keyword">this</span>.value <span class="comment">// 这是什么玩意啊? 不知道这样写意义何在</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Either类型, 见 3.14.ts<br>在发生错误时抛出异常,这是返回结构或错误的一个有效例子: 函数要么返回一个结果,要么抛出一个异常. 在某些情况下, 不能使用异常, 所以优先选择使用Either类型, 例如: 当在进程间或线程间传播错误时; 作为一种设计原则, 当错误本身算不上异常时(通常发生在处理用户输入的情况); 当调用的操作系统的API, 而这些API使用错误码时, 等等. 在这些情况中, 我们不能或不希望抛出异常,而是行为表达我们成功获得了值或者失败了, 此时最好把这种情形编码成”值或错误”, 而不是”值和错误”<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Either</span></span><br><span class="line"><span class="keyword">class</span> Either&lt;L, R&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> readonly value: L | R</span><br><span class="line">  <span class="keyword">private</span> readonly left: <span class="built_in">boolean</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="params">value: L | R, left: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">    <span class="keyword">this</span>.left = left</span><br><span class="line">  &#125;</span><br><span class="line">  isLeft(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.left</span><br><span class="line">  &#125;</span><br><span class="line">  getLeft(): L &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isLeft()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>()</span><br><span class="line">    <span class="keyword">return</span> &lt;L&gt;<span class="keyword">this</span>.value</span><br><span class="line">  &#125;</span><br><span class="line">  isRight(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="keyword">this</span>.left</span><br><span class="line">  &#125;</span><br><span class="line">  getRight(): R &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isRight()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>()</span><br><span class="line">    <span class="keyword">return</span> &lt;R&gt;<span class="keyword">this</span>.value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> makeLeft&lt;L, R&gt;(value: L) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Either&lt;L, R&gt;(value, <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> makeRight&lt;L, R&gt;(value: R) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Either&lt;L, R&gt;(value, <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> InputError &#123;</span><br><span class="line">  NoInput,</span><br><span class="line">  Invalid</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> DayOfWeek &#123;</span><br><span class="line">  Sunday,</span><br><span class="line">  Monday,</span><br><span class="line">  TuesDay</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Result = Either&lt;InputError, DayOfWeek&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseDayOfWeek</span>(<span class="params">input: <span class="built_in">string</span></span>): <span class="title">Result</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (input == <span class="string">""</span>) Either.makeLeft(InputError.NoInput)</span><br><span class="line">  <span class="keyword">switch</span> (input.toLowerCase()) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"sunday"</span>:</span><br><span class="line">      <span class="keyword">return</span> Either.makeRight(DayOfWeek.Sunday);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"sunday"</span>:</span><br><span class="line">      <span class="keyword">return</span> Either.makeRight(DayOfWeek.Monday);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"sunday"</span>:</span><br><span class="line">      <span class="keyword">return</span> Either.makeRight(DayOfWeek.TuesDay);</span><br><span class="line">    <span class="keyword">default</span>: </span><br><span class="line">      <span class="keyword">return</span> Either.makeLeft(InputError.Invalid)</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>变体类型: 变体类型也称为标签联合类型, 包含任意数的基本类型的值. 标签指的是即使基本类型有重合的值,我们仍能够准确说明该值来自那个类型.</p><p>原来typescript也可以这么难</p><h1 id="类型安全"><a href="#类型安全" class="headerlink" title="类型安全"></a>类型安全</h1><p>火星探测项目的类型约束<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> NsType: unique symbol</span><br><span class="line"><span class="keyword">class</span> Ns &#123;</span><br><span class="line">  readonly value: <span class="built_in">number</span></span><br><span class="line">  [NsType]: <span class="built_in">void</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">value: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> LbfsType: unique symbol</span><br><span class="line"><span class="keyword">class</span> Lbfs &#123;</span><br><span class="line">  readonly value: <span class="built_in">number</span></span><br><span class="line">  [LbfsType]: <span class="built_in">void</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">value: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LbfsToNs</span>(<span class="params">lbfs: Lbfs</span>): <span class="title">Ns</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Ns(lbfs.value * <span class="number">4.4482216152605</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trajectoryCorrenction</span>(<span class="params">momentum: Ns</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (momentum.value &lt; <span class="keyword">new</span> Ns(<span class="number">2</span>).value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'momentum is too low'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">provideMonmentum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  trajectoryCorrenction(LbfsToNs(<span class="keyword">new</span> Lbfs(<span class="number">1.5</span>)))</span><br><span class="line">  <span class="comment">// 如果这里没有Ns传入值,就会报错,比如1.5</span></span><br><span class="line">  <span class="comment">// 必须经过Ns才行,例: new Ns(1.5)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一般来说,构造函数不应该做太繁重的工作, 而应该初始化对象的成员<br>private一个构造函数,就只能用工厂函数调用<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂实施约束</span></span><br><span class="line">declear <span class="keyword">const</span> celsiusType: unique symbol</span><br><span class="line"><span class="comment">// typescript中用`unique symbol`来确保有相同形状的其他对象不会被解释为这个类型的一种方式</span></span><br><span class="line"><span class="keyword">class</span> Celsius &#123;</span><br><span class="line">  readonly value: <span class="built_in">number</span></span><br><span class="line">  [celsusType]: <span class="built_in">void</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="params">value: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> makeCelsius(value: <span class="built_in">number</span>): Celsius | <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">-273.15</span>) <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Celsius(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用算法&quot;&gt;&lt;a href=&quot;#常用算法&quot; class=&quot;headerlink&quot; title=&quot;常用算法&quot;&gt;&lt;/a&gt;常用算法&lt;/h1&gt;&lt;p&gt;map() 对范围中每个值应用一个函数,并返回应用该函数的结果&lt;br&gt;&lt;figure class=&quot;highlight ja
      
    
    </summary>
    
      <category term="javascript" scheme="demoorbug.github.io/categories/javascript/"/>
    
      <category term="typescript" scheme="demoorbug.github.io/categories/javascript/typescript/"/>
    
    
      <category term="typescript" scheme="demoorbug.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Read_documents</title>
    <link href="demoorbug.github.io/2021/10/14/Read-documents/"/>
    <id>demoorbug.github.io/2021/10/14/Read-documents/</id>
    <published>2021-10-14T09:32:02.000Z</published>
    <updated>2022-03-15T22:58:15.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="读ts文档"><a href="#读ts文档" class="headerlink" title="读ts文档"></a>读ts文档</h1><p>j</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;读ts文档&quot;&gt;&lt;a href=&quot;#读ts文档&quot; class=&quot;headerlink&quot; title=&quot;读ts文档&quot;&gt;&lt;/a&gt;读ts文档&lt;/h1&gt;&lt;p&gt;j&lt;/p&gt;

      
    
    </summary>
    
      <category term="red" scheme="demoorbug.github.io/categories/red/"/>
    
    
      <category term="read" scheme="demoorbug.github.io/tags/read/"/>
    
  </entry>
  
  <entry>
    <title>nvim_config</title>
    <link href="demoorbug.github.io/2021/10/02/nvim-config/"/>
    <id>demoorbug.github.io/2021/10/02/nvim-config/</id>
    <published>2021-10-02T11:58:45.000Z</published>
    <updated>2022-03-15T22:58:15.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nvim-配置"><a href="#Nvim-配置" class="headerlink" title="Nvim 配置"></a>Nvim 配置</h1><p>安装 packer.nvim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 https://github.com/wbthomason/packer.nvim\</span><br><span class="line"> ~/.<span class="built_in">local</span>/share/nvim/site/pack/packer/start/packer.nvim</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nvim-配置&quot;&gt;&lt;a href=&quot;#Nvim-配置&quot; class=&quot;headerlink&quot; title=&quot;Nvim 配置&quot;&gt;&lt;/a&gt;Nvim 配置&lt;/h1&gt;&lt;p&gt;安装 packer.nvim&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;
      
    
    </summary>
    
      <category term="nvim" scheme="demoorbug.github.io/categories/nvim/"/>
    
    
      <category term="nvim" scheme="demoorbug.github.io/tags/nvim/"/>
    
  </entry>
  
  <entry>
    <title>vim</title>
    <link href="demoorbug.github.io/2021/09/20/vim/"/>
    <id>demoorbug.github.io/2021/09/20/vim/</id>
    <published>2021-09-20T13:57:23.000Z</published>
    <updated>2022-03-15T22:58:15.959Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>一箭双雕:</p><p>C == c$</p><p>s  == cl</p><p>S == ^C</p><p>I == ^i</p><p>A == $a</p><p>o == A</p><p>O == ko</p></li><li><p>删除整个单词</p><p>daw: 这个命令的好处是可以用<code>.</code>重复执行他 :h aw 可以解读为“delete a word”</p></li><li><p>改变数字大小</p><p><c-a> and <c-x></c-x></c-a></p><p>10<c-a> and 10<c-x></c-x></c-a></p><blockquote><p>set nrformates=  该命令设置10进制</p></blockquote></li><li><p>操作命令</p><p>c == 修改</p><p>d == 删除</p><p>y == 复制到寄存器</p><p>g~ == 反转大小写</p><p>gu == 转换为小写</p><p>gU == 转换为大写</p><p>> ==增加缩紧</p><p>&lt; == 减小缩紧</p><p>= == 自动缩紧</p><p>! == 使用外部程序过滤{motion}所跨越的行</p></li><li><p>重绘屏幕达到写代码不滚至最底部的方法</p><p>zz命令,太牛了,小技巧插入模式<c-o>zz</c-o></p></li><li><p>:normal命令</p><p>结合@q来实现更复杂的功能</p><p>qqfpRbaidu</p><p>V50j</p><p>:’&lt;,’&gt;normal @q</p><p>or</p><p>:%normal @q</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;一箭双雕:&lt;/p&gt;
&lt;p&gt;C == c$&lt;/p&gt;
&lt;p&gt;s  == cl&lt;/p&gt;
&lt;p&gt;S == ^C&lt;/p&gt;
&lt;p&gt;I == ^i&lt;/p&gt;
&lt;p&gt;A == $a&lt;/p&gt;
&lt;p&gt;o == A&lt;/p&gt;
&lt;p&gt;O == ko&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="vim" scheme="demoorbug.github.io/categories/vim/"/>
    
    
      <category term="vim" scheme="demoorbug.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>pubg-react</title>
    <link href="demoorbug.github.io/2020/03/04/%E9%87%8D%E6%9E%84react%E9%A1%B9%E7%9B%AE/"/>
    <id>demoorbug.github.io/2020/03/04/重构react项目/</id>
    <published>2020-03-04T12:50:42.000Z</published>
    <updated>2022-03-15T22:58:15.963Z</updated>
    
    <content type="html"><![CDATA[<p>看到别人的一个项目不错，而且开源，react的，很多不懂，现在看能不能重构成功吧<br>项目名pubg-react<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app pubg-react</span><br></pre></td></tr></table></figure></p><h1 id="client用到的库，介绍"><a href="#client用到的库，介绍" class="headerlink" title="client用到的库，介绍"></a>client用到的库，介绍</h1><ol><li>apollo-client</li></ol><h1 id="server端"><a href="#server端" class="headerlink" title="server端"></a>server端</h1><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>用的最新hapi, 安装命令 <code>yarn add @hapi/hapi</code><br>这里需要注意，新版必须使用node 12.x 以上的版本，否则就会报错<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install n -g</span><br><span class="line"></span><br><span class="line">sudo n stable</span><br><span class="line"></span><br><span class="line">PATH=<span class="string">"<span class="variable">$PATH</span>"</span> // 更新环境变量，不然还是旧版</span><br></pre></td></tr></table></figure></p><p>要在node端使用es6语法，用babel实现，安装<code>yarn add @babel/preset-env @babel/node @babel/core -D</code><br>创建.babelrc 文件：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"@babel/preset-env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>开发环境安装nodemon <code>yarn add nodemon -D</code><br>package.json:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"nodemon -w src --exec babel-node src/app.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// shell 里面使用babel-node 的话，要用npx babel-node</span><br><span class="line">// 注意: 先要安装@babel/node @babel/core ，不然babel-node使用的就行旧版的babel-node 6.x</span><br><span class="line">如果是生产环境，就不要使用babel-node</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/babel/example-node-server" target="_blank" rel="noopener">https://github.com/babel/example-node-server 生产环境配置</a></p><h2 id="用到的库"><a href="#用到的库" class="headerlink" title="用到的库"></a>用到的库</h2><p>Hapi.js 如果仅是用于返回 api接口，或者通过node调用其他网络接口<br>socket.io 封装了HTML5的websocket，完成一次握手，就可以畅通通讯<br>dotenv 可以轻松使用process.env. 环境变量配置项目，只要在项目目录创建.env 文件<br>pgr 是数据库连接的工具Postgres DB, 这原来是一个作者开发的啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到别人的一个项目不错，而且开源，react的，很多不懂，现在看能不能重构成功吧&lt;br&gt;项目名pubg-react&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="demoorbug.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="react" scheme="demoorbug.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>服务端渲染</title>
    <link href="demoorbug.github.io/2019/10/19/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/"/>
    <id>demoorbug.github.io/2019/10/19/服务端渲染/</id>
    <published>2019-10-19T03:51:04.000Z</published>
    <updated>2022-03-15T22:58:15.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h1><a id="more"></a><h2 id="开始搭建项目webpack配置"><a href="#开始搭建项目webpack配置" class="headerlink" title="开始搭建项目webpack配置"></a>开始搭建项目webpack配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">  target: <span class="string">'node'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个配置项，很有必要，如果是浏览器环境打包<code>require(&#39;path&#39;)</code>会把他打包到<code>build.js</code>中，如果是服务器环境就不会把他打包到<code>build.js</code>中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">  target: <span class="string">'node'</span>,</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>__dirname</code>指服务器根目录</p><h2 id="同构"><a href="#同构" class="headerlink" title="同构"></a>同构</h2><p>一套React代码，在服务端执行一次，再在客户端执行一次</p><p>普通用的是render，服务端渲染要用hydrate, 后续会讲<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDom.hydrate(<span class="xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br></pre></td></tr></table></figure></p><h2 id="访问静态资源"><a href="#访问静态资源" class="headerlink" title="访问静态资源"></a>访问静态资源</h2><p>利用express的一个方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>))</span><br></pre></td></tr></table></figure></p><p>以后的静态资源都会去public里面找</p><h2 id="遇到任何错误都可以在这个网站查找"><a href="#遇到任何错误都可以在这个网站查找" class="headerlink" title="遇到任何错误都可以在这个网站查找"></a>遇到任何错误都可以在这个网站查找</h2><p><a href="https://stackoverflow.com/" target="_blank" rel="noopener">https://stackoverflow.com</a></p><h2 id="自动编译"><a href="#自动编译" class="headerlink" title="自动编译"></a>自动编译</h2><p>webpack 的自动编译很简单 加一个配置项即可<code>--watch</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --config webpack.config.js --watch</span><br></pre></td></tr></table></figure></p><p>node 就要借助nodemon 自动执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm i nodemon -g</span><br></pre></td></tr></table></figure></p><p>package.json<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="comment">//supervisor //也是一个第三方模块，和nodemon功能一样，但是写法不一样，下面的写法有误，不能这么用</span></span><br><span class="line">    <span class="comment">//"start": "nodemon build &amp;&amp; node \"./build/bundle.js\"",</span></span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"nodemon --watch build --exec node \"./build/bundle.js\""</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用 <code>npm-run-all</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"npm-run-all --parallel dev:**"</span>,</span><br><span class="line">  <span class="string">"dev:start"</span>: <span class="string">"nodemon --watch build --exec node \"./build/bundle.js\""</span>,</span><br><span class="line">  <span class="string">"dev:build"</span>: <span class="string">"webpack --config webpack.server.js --watch"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="webpack-自动化升级"><a href="#webpack-自动化升级" class="headerlink" title="webpack 自动化升级"></a>webpack 自动化升级</h2><p><a href="https://github.com/babel/babel-upgrade" target="_blank" rel="noopener">自动化升级</a><br>以后要用到<code>stage-x</code>提案阶段的东西就必须写入对应的功能名字，然后引入该插件，也可以用<code>npx babel-upgrade --write</code>自动升级，<code>packaage.json</code>就会自动安装该阶段的插件，自己选择使用哪个 <code>proposal</code> 特性的插件, 参考自 <a href="https://segmentfault.com/a/1190000018358854" target="_blank" rel="noopener">一文读懂 babel7 的配置文件加载逻辑</a></p><blockquote><p>注意升级前的写法必须是这样</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.js?$/</span>,</span><br><span class="line">    loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">        presets: [<span class="string">'@babek/preset-stage-0'</span>] <span class="comment">// 这里可以是0-4</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>升级后遇到一个bug,就是引入插件会报错未找到，<code>npm i</code>之后就好了<br>新版的写法案例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">options: &#123;</span><br><span class="line">  presets: [<span class="string">'@babel/preset-react'</span>], <span class="comment">// 这不是必须的</span></span><br><span class="line">  plugins: [<span class="string">'@babel/plugin-proposal-class-properties'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务端渲染中-store单例化问题"><a href="#服务端渲染中-store单例化问题" class="headerlink" title="服务端渲染中 store单例化问题"></a>服务端渲染中 store单例化问题</h2><blockquote><p>这是Vue ssr指南提到的，其实原理都一样，借鉴这篇文章的理解也是可以的<br>原文链接：<a href="https://ssr.vuejs.org/zh/structure.html" target="_blank" rel="noopener">避免状态单例</a></p></blockquote><p>当编写纯客户端(client-only)代码时，我们习惯于每次在新的上下文中对代码进行取值。但是，Node.js 服务器是一个长期运行的进程。当我们的代码进入该进程时，它将进行一次取值并留存在内存中。这意味着如果创建一个单例对象，它将在每个传入的请求之间共享。</p><p>如基本示例所示，我们为每个请求创建一个新的根 Vue 实例。这与每个用户在自己的浏览器中使用新应用程序的实例类似。如果我们在多个请求之间使用一个共享的实例，很容易导致交叉请求状态污染 (cross-request state pollution)。<br><strong>我们遇到的是store问题</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, applyMiddleware(thunk))</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></p><p>解决方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getStore = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> createStore(reducer, applyMiddleware(thunk))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getStore</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> getStore <span class="keyword">from</span> <span class="string">'./store.js'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Provider store=&#123;getStore()&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>例如我们store，初始化数据里面有Date()，这样的原始数据，就会导致问题，这个时间就只会初始化一次，而不会得到更新，所以必须使用以上方法去避免这样的问题。</p></blockquote><p>遇到一个新问题，就是如果store有Date这种实时数据的话，服务端渲染之后客户端渲染就会导致差1秒，控制台就会报错，这种问题应该如何避免呢，不渲染秒确实可以，但是如果某些场景必须使用秒呢</p><p><a href="https://gitee.com/Comet32/imooc-react-ssr/tree/master" target="_blank" rel="noopener">别人的库，已经学完，可以作为参考源文件</a></p><h2 id="报错总结"><a href="#报错总结" class="headerlink" title="报错总结"></a>报错总结</h2><blockquote><p>(node:3102) UnhandledPromiseRejectionWarning: Error: connect ECONNREFUSED 127.0.0.1:80<br>at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1117:14)</p></blockquote><p>这个错误是因为服务端渲染请求的目录不一样，服务端渲染如果请求<code>/</code>目录表示127.0.0.1:80, 然而我没有启动这个端口的服务，所以没东西，我将<code>/</code>改写为<code>http://192.168.0.2:3000/</code>之后就好了，但是不能跨域，所以访问的时候也不能用<code>localhost</code>, 解决方案，上线项目应该不会遇到这个问题把，毕竟不需要用到moke数据，直接请求服务器数据就ok了，服务器数据一般都用jsonp(开启跨域，这个我还不是很清楚)</p><blockquote><p>Warning: Expected server HTML to contain a matching \&lt;div> in\&lt;div>.</p></blockquote><p>首先这里是因为客户端代码和服务端代码不同，我如何引发这个的问题的呢，就是因为客户端多套了一层div, 而服务端没套，老师讲的客户端不套<code>div</code>直接会报一个错误，估计是新版修复了?</p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>本来想尝试使用async await 来实现服务端请求数据的异步操作，最后发现express(好像express也有async但是没找到怎么用)，居然不行，还是koa厉害啊，怪不得koa火了。</p><p><strong>这里遇到个问题，不知道是babel编译没有添加async还是说什么原因，要重新开一台node服务器来验证，这个服务器改的话太麻烦了，留着当一个坑</strong></p><h2 id="BASH-命令"><a href="#BASH-命令" class="headerlink" title="BASH 命令"></a>BASH 命令</h2><p><a href="https://www.jianshu.com/p/23cf8574272e" target="_blank" rel="noopener">bash命令</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;服务端渲染&quot;&gt;&lt;a href=&quot;#服务端渲染&quot; class=&quot;headerlink&quot; title=&quot;服务端渲染&quot;&gt;&lt;/a&gt;服务端渲染&lt;/h1&gt;
    
    </summary>
    
      <category term="学习" scheme="demoorbug.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="react" scheme="demoorbug.github.io/tags/react/"/>
    
      <category term="ssr" scheme="demoorbug.github.io/tags/ssr/"/>
    
      <category term="next" scheme="demoorbug.github.io/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>React 新特性</title>
    <link href="demoorbug.github.io/2019/07/18/React-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>demoorbug.github.io/2019/07/18/React-新特性/</id>
    <published>2019-07-18T08:47:46.000Z</published>
    <updated>2022-03-15T22:58:15.959Z</updated>
    
    <content type="html"><![CDATA[<p>项目目录<br>待填</p><a id="more"></a><h1 id="一些知识点"><a href="#一些知识点" class="headerlink" title="一些知识点"></a>一些知识点</h1><h2 id="SPA-MPA"><a href="#SPA-MPA" class="headerlink" title="SPA/MPA"></a>SPA/MPA</h2><p>单页应用/多页应用<br>MPA和SPA没有本质区别，SPA需要改造才能变为MPA,大网站都是这么搞的</p><h2 id="PWA-渐进式网络应用"><a href="#PWA-渐进式网络应用" class="headerlink" title="PWA 渐进式网络应用"></a>PWA 渐进式网络应用</h2><p>浏览器不支持pwa的时候就会退化为普通的应用，所以称之为渐进式网络应用。<br>如果浏览器支持PWA，就可以控制静态资源缓存，即便我们的设备没有联网，也可以用缓存来运行页面，提供了强大的离线访问能力，除了离线访问，还可以优化载入速度，PWA是前端近年来的革命性进化，移动端支持良好。vue官网就用了这种功能</p><h1 id="React-新特性"><a href="#React-新特性" class="headerlink" title="React 新特性"></a>React 新特性</h1><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>定义：Context 提供了一种方式，能够让数据在组件树中传递而不必一级一级手动传递<br>API: createContext(defaultValue?)<br>解决问题：编程效率</p><p>他娘的，这么简单，就是透传，和上面定义的是一个意思，在src/ticket/Candidate.jsx中有用到，很简单、很方便。</p><p>App.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; createContext &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BatteryContext = createContext(); <span class="comment">//首先是创建，默认值是找不到Provider时候使用，一般是单元测试会用到</span></span><br><span class="line"><span class="keyword">const</span> OnlineContext = createContext();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;BatteryContext.Consumer&gt; <span class="comment">//可以无限嵌套，没有先后之分，注意嵌套规则即可</span></span><br><span class="line">        &#123;</span><br><span class="line">          battery =&gt; (</span><br><span class="line">            &lt;OnlineContext.Consumer&gt;</span><br><span class="line">              &#123;</span><br><span class="line">                online =&gt; <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Battery: &#123;battery&#125;, online: &#123;online ? '联网':'未联网'&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// 布尔值可以这样显示 String(online)</span></span><br><span class="line">            &lt;<span class="regexp">/OnlineContext.Consumer&gt;</span></span><br><span class="line"><span class="regexp">          )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>BatteryContext.Consumer&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Middle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Leaf</span>/&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    battery: <span class="number">60</span>,</span><br><span class="line">    online: <span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; battery, online &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;BatteryContext.Provider value=&#123;battery&#125;&gt;</span><br><span class="line">        &lt;OnlineContext.Provider value=&#123;online&#125;&gt;</span><br><span class="line">          &lt;button</span><br><span class="line">            type=<span class="string">"button"</span></span><br><span class="line">            onClick=&#123;() =&gt; <span class="keyword">this</span>.setState(&#123;<span class="attr">battery</span>: battery - <span class="number">1</span>&#125;)&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            Press</span><br><span class="line">          &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">          &lt;button</span></span><br><span class="line"><span class="regexp">            type="button"</span></span><br><span class="line"><span class="regexp">            onClick=&#123;() =&gt; this.setState(&#123;online: !online&#125;)&#125;</span></span><br><span class="line"><span class="regexp">          &gt;</span></span><br><span class="line"><span class="regexp">            Online</span></span><br><span class="line"><span class="regexp">          &lt;/</span>button&gt;</span><br><span class="line">          &lt;Middle /&gt;</span><br><span class="line">        &lt;<span class="regexp">/OnlineContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>BatteryContext.Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure></p><h2 id="ContextType"><a href="#ContextType" class="headerlink" title="ContextType"></a>ContextType</h2><p>结合Context代码使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> contextType = BatteryContext</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> battery = <span class="keyword">this</span>.context</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;Battery: &#123;battery&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>一个Context确实挺方便，多个是否就无法使用了呢？<br>看到4-4节的时候老师有说，确实是只能指向一个，但是可以用useContext 解决这个问题，写法还会更简单</p><h2 id="lazy"><a href="#lazy" class="headerlink" title="lazy"></a>lazy</h2><p>所有的细节都在注释里面</p><p>app.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; lazy, Suspense &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> About = lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "about" */</span> <span class="string">'./About.jsx'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误捕获，如果手动将about.chunk.js 右键Block request URL，就会报错，我们必须手动处理错误。</span></span><br><span class="line"><span class="comment">// 借助 ErrorBoundary，他的实现原理就是用react的生命周期钩子，componentDidCatch</span></span><br><span class="line"><span class="comment">// 不过页面还是会报错，老师的报错位置是控制台，我直接就是页面</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    hasError: <span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// componentDidCatch () &#123;</span></span><br><span class="line">  <span class="comment">//   this.setState(&#123;</span></span><br><span class="line">  <span class="comment">//     hasError: true</span></span><br><span class="line">  <span class="comment">//   &#125;)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// ErrorBoundary的另一种写法</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> getDerivedStateFromError () &#123; <span class="comment">// 一旦遇到错误，他就会返回一个新的state数据，并合并到组件的state中</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      hasError: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.hasError) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;加载错误，可能是网络请求问题&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Suspense fallback=&#123;&lt;div&gt;loading&lt;/</span>div&gt;&#125;&gt;</span><br><span class="line">          &lt;About /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Suspense&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure></p><p>About.jsx<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">About</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;About&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default About</span></span><br></pre></td></tr></table></figure></p><h2 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h2><p>都在上面的代码里面</p><h2 id="memo"><a href="#memo" class="headerlink" title="memo"></a>memo</h2><p>解决父组件更改,子组件重新渲染问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent, memo &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// memo 解决方案</span></span><br><span class="line"><span class="keyword">const</span> Foo = memo(<span class="function"><span class="keyword">function</span> <span class="title">Foo</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(props.name)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种解决方案PureComponent</span></span><br><span class="line"><span class="comment">// 有局限性，只有传入属性的对比，如果内部发生什么变化，就么得用了</span></span><br><span class="line"><span class="comment">// 比如传入对象就算修改，也不会更新视图。还有传入内敛callback(&lt;Foo cb=&#123;() =&gt; &#123;&#125;&#125;&gt;&lt;/Foo&gt;)，这样每次都会渲染</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// callback () &#123;&#125;</span></span><br><span class="line"><span class="comment">// &lt;Foo cb=&#123;this.callback&#125;&gt;&lt;/Foo&gt;</span></span><br><span class="line"><span class="comment">// 解决callback this指向问题 callback = () =&gt; &#123;&#125; ,这就是一个比较完美的写法了，不过又听说箭头函数优化不好。</span></span><br><span class="line"><span class="comment">// class Foo extends PureComponent &#123;</span></span><br><span class="line"><span class="comment">//   render () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(this.props.name)</span></span><br><span class="line"><span class="comment">//     return null;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调解决方案</span></span><br><span class="line"><span class="comment">// class Foo extends React.Component &#123;</span></span><br><span class="line"><span class="comment">//   //　是否决定重新渲染</span></span><br><span class="line"><span class="comment">//   shouldComponentUpdate (nextProps, nextState) &#123;</span></span><br><span class="line"><span class="comment">//     if (nextProps.name === this.props.name) &#123;</span></span><br><span class="line"><span class="comment">//       return false</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     return true</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   render () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(this.props.name)</span></span><br><span class="line"><span class="comment">//     return null;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    num: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;()=&gt;&#123;<span class="keyword">this</span>.setState(&#123;<span class="attr">num</span>: <span class="keyword">this</span>.state.num + <span class="number">1</span>&#125;)&#125;&#125;&gt;&#123;<span class="keyword">this</span>.state.num&#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Foo name="Foo"&gt;&lt;/</span>Foo&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h1 id="State-Hooks"><a href="#State-Hooks" class="headerlink" title="State Hooks"></a>State Hooks</h1><h1 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h1><p>所有的hooks函数都应该以use开头<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [num, setNum] = useState(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'inall'</span>)</span><br><span class="line">    <span class="keyword">return</span> props.defaultCount || <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setNum(num + <span class="number">1</span>)&#125;&gt;</span><br><span class="line">        &#123;num&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Effect-Hooks"><a href="#Effect-Hooks" class="headerlink" title="Effect Hooks"></a>Effect Hooks</h2><p>useEffect 代替 componentDidMount, componentDidUpdate, componentWillUnmount<br>灵活运用,就可以达到上面生命周期钩子的效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// let num, setNum;</span></span><br><span class="line">  <span class="comment">// let Main, setMain;</span></span><br><span class="line">  <span class="keyword">let</span> [title, setNum] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> [size, setSize] = useState(&#123;</span><br><span class="line">    width: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">    height: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onResize = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setSize(&#123;</span><br><span class="line">      width: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">      height: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = title</span><br><span class="line">  &#125;)</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, onResize, <span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">//回调清理函数</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'remove'</span>);</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">'resize'</span>, onResize, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, []) <span class="comment">// 数组的每一项都不变,才会阻止里面的内容更改</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setNum(title + <span class="number">1</span>)&#125;&gt;</span><br><span class="line">        &#123;title&#125;, &#123;size.width&#125;, &#123;size.height&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h2 id="Hooks-下的-Context"><a href="#Hooks-下的-Context" class="headerlink" title="Hooks 下的 Context"></a>Hooks 下的 Context</h2><p>可以说是很简单了<br>不要滥用context, 破坏组件独立性</p><p>App.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, createContext , useContext&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BatteryContext = createContext();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> title = useContext(BatteryContext)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;&#123;title&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App (props) &#123;</span></span><br><span class="line"><span class="regexp">  const [title, setNum] = useState(0)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setNum(title + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Add</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">      &lt;BatteryContext.Provider value=&#123;title&#125;&gt;</span><br><span class="line">        &lt;Foo /&gt;</span><br><span class="line">      &lt;<span class="regexp">/BatteryContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure></p><h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h2><p>这是掘金看到的写法，老师的写法有错，现在用会警告，而且没有视频中的效果<br>纠结了半小时，原来是要配合memo，听课没认真的后果。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useMemo &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'渲染'</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div title=&#123;props.title&#125;&gt;&#123;props.title&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Coo(props) &#123;</span></span><br><span class="line"><span class="regexp">  console.log('Coo');</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;&#123;props.coo&#125;&lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [title, setNum] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [coo, setCoo] = useState(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> double = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &lt;Foo title=&#123;title&#125;/&gt;, [title]);</span><br><span class="line">  <span class="keyword">const</span> douCoo = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &lt;Coo coo=&#123;coo&#125;/&gt;, [coo])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setNum(title + <span class="number">1</span>)&#125;&gt;</span><br><span class="line">        Add</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCoo(coo + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        C</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">        &#123;double&#125;</span><br><span class="line">        &#123;douCoo&#125;</span><br><span class="line">        &lt;div&gt;&#123;double&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure></p><p>配合 memo 使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useMemo, memo, useCallback &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Foo = memo(<span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'渲染'</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;h1 onClick=&#123;props.onClick&#125;&gt;&#123;props.title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App (props) &#123;</span></span><br><span class="line"><span class="regexp">  const [title, setNum] = useState(0)</span></span><br><span class="line"><span class="regexp">  const [lest, setLest] = useState(0)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  const fun = useMemo(() =&gt; &#123; /</span><span class="regexp">/ 如果是一个普通的箭头函数，每次都会是一个新的句柄，只有这样才会传入固定的句柄</span></span><br><span class="line"><span class="regexp">    return () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      console.log('useMemo');</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;, [])</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 如果useMemo返回的是函数，可以直接用useCallback，来省略顶层的函数</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 这两种写法等价</span></span><br><span class="line"><span class="regexp">  const fun = useCallback(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    console.log('useCallback')</span></span><br><span class="line"><span class="regexp">  &#125;, [])</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 更新状态, 依赖的两个变量都要写到状态里面，其实官方说，可以保证每次setState返回的同一个句柄</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ const fun = useCallback(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/   console.log('callback')</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/   setLest((le) =&gt; le + 1)</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ &#125;, [])</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 另一种更新状态写法</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ const fun = useCallback(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/   console.log('callback')</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/   setLest(lest + 1)</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ &#125;, [lest])</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  const num = useMemo(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    return title * 2</span></span><br><span class="line"><span class="regexp">  &#125;, [title === 3]) /</span><span class="regexp">/ 这么写会有报错，不过可以实现</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setNum(title + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Add</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;-</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setLest(lest + <span class="number">1</span>)&#125;&gt;</span><br><span class="line">        lest</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Foo onClick=&#123;fun&#125; title=&#123;num&#125;&gt;&lt;/</span>Foo&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure></p><h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h2><p>class 的时候可以使用 String Ref, Callback Ref, CreateRef<br>hooks 使用 useRef</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, PureComponent,useMemo, useCallback, useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为函数无法创建实例，所以必须用class来实现，原来hooks不能完全代替奥</span></span><br><span class="line"><span class="comment">// const Foo = memo(function Foo(props) &#123;</span></span><br><span class="line"><span class="comment">//   console.log('渲染');</span></span><br><span class="line"><span class="comment">//   return (</span></span><br><span class="line"><span class="comment">//     &lt;h1 onClick=&#123;props.onClick&#125;&gt;&#123;props.title&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">//   )</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用PureComponent代替memo</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  mems () &#123; <span class="comment">// 第一种使用场景</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props.title);</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'渲染'</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1 onClick=&#123;<span class="keyword">this</span>.props.onClick&#125;&gt;&#123;<span class="keyword">this</span>.props.title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App (props) &#123;</span></span><br><span class="line"><span class="regexp">  const [title, setNum] = useState(0)</span></span><br><span class="line"><span class="regexp">  const [lest, setLest] = useState(0)</span></span><br><span class="line"><span class="regexp">  const contRef= useRef()</span></span><br><span class="line"><span class="regexp">  const it = useRef()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  const fun = useCallback(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    console.log('callback')</span></span><br><span class="line"><span class="regexp">    setLest((le) =&gt; le + 1)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    contRef.current.mems(); /</span><span class="regexp">/ 第一种使用场景</span></span><br><span class="line"><span class="regexp">  &#125;, [contRef])</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  const num = useMemo(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    return title * 2</span></span><br><span class="line"><span class="regexp">  &#125;, [title]) /</span><span class="regexp">/ 这么写会有报错，不过可以实现</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 如果是在App函数中声明变量，每次都会执行这个变量，就会导致无法清除it,就必须全局创建，state好像也是可以解决</span></span><br><span class="line"><span class="regexp">    it.current = setInterval(() =&gt; &#123; /</span><span class="regexp">/ Ref的第二种使用场景</span></span><br><span class="line"><span class="regexp">      setNum(title =&gt; title +1)</span></span><br><span class="line"><span class="regexp">    &#125;, 1000)</span></span><br><span class="line"><span class="regexp">  &#125;, [])</span></span><br><span class="line"><span class="regexp">  useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    if (num &gt;= 10) &#123;</span></span><br><span class="line"><span class="regexp">      clearInterval(it.current)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setNum(title + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Add</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;-</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setLest(lest + <span class="number">1</span>)&#125;&gt;</span><br><span class="line">        &#123;lest&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Foo onClick=&#123;fun&#125; ref=&#123;contRef&#125; title=&#123;num&#125;&gt;&lt;/</span>Foo&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h2 id="自定义hooks，达到状态逻辑复用"><a href="#自定义hooks，达到状态逻辑复用" class="headerlink" title="自定义hooks，达到状态逻辑复用"></a>自定义hooks，达到状态逻辑复用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useMemo, useRef, useEffect, useCallback &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFoo</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;height, width&#125; = useSize()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;h1&gt;&#123;count&#125;, &#123;height&#125;, &#123;width&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function useCount() &#123;</span></span><br><span class="line"><span class="regexp">  const [title, setNum] = useState(0)</span></span><br><span class="line"><span class="regexp">  const it = useRef()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  const num = useMemo(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    return title * 2</span></span><br><span class="line"><span class="regexp">  &#125;, [title]) /</span><span class="regexp">/ 这么写会有报错，不过可以实现</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    it.current = setInterval(() =&gt; &#123; /</span><span class="regexp">/ Ref的第二种使用场景</span></span><br><span class="line"><span class="regexp">      setNum(title =&gt; title +1)</span></span><br><span class="line"><span class="regexp">    &#125;, 1000)</span></span><br><span class="line"><span class="regexp">  &#125;, [])</span></span><br><span class="line"><span class="regexp">  useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    if (num &gt;= 10) &#123;</span></span><br><span class="line"><span class="regexp">      clearInterval(it.current)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">  return [title, setNum, num]</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function useSize() &#123;</span></span><br><span class="line"><span class="regexp">  const [size, setSize] = useState(&#123;</span></span><br><span class="line"><span class="regexp">    width: document.documentElement.clientWidth,</span></span><br><span class="line"><span class="regexp">    height: document.documentElement.clientHeight</span></span><br><span class="line"><span class="regexp">  &#125;);</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ const onResize = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/   setSize(&#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/     width: document.documentElement.clientWidth,</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/     height: document.documentElement.clientHeight</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/   &#125;)</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ &#125;</span></span><br><span class="line"><span class="regexp">  const onResize = useCallback(() =&gt; &#123; /</span><span class="regexp">/ 老师也是一笔带过，没有细讲为什么要用useCallback(), 我也记不起来了。算一个坑吧</span></span><br><span class="line"><span class="regexp">    setSize(&#123;</span></span><br><span class="line"><span class="regexp">      width: document.documentElement.clientWidth,</span></span><br><span class="line"><span class="regexp">      height: document.documentElement.clientHeight</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;, [])</span></span><br><span class="line"><span class="regexp">  useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    window.addEventListener('resize', onResize, false)</span></span><br><span class="line"><span class="regexp">    return () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      window.removeEventListener('resize', onResize, false)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;, [onResize])</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  return size</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App (props) &#123;</span></span><br><span class="line"><span class="regexp">  const [title, setNum, num] = useCount()</span></span><br><span class="line"><span class="regexp">  const Counter = useFoo(num)</span></span><br><span class="line"><span class="regexp">  const size = useSize()</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setNum(title + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Add,&#123;size.width&#125;,&#123;size.height&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">      &#123;Counter&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h2 id="hooks-使用法则"><a href="#hooks-使用法则" class="headerlink" title="hooks 使用法则"></a>hooks 使用法则</h2><p>顶层调用hooks函数：<br>不能在循环语句，条件语句或者是嵌套函数中调用hooks函数<br>仅在函数组件和自定义hooks函数中，调用hooks函数</p><h2 id="hooks使用问题"><a href="#hooks使用问题" class="headerlink" title="hooks使用问题"></a>hooks使用问题</h2><h3 id="生命周期的问题："><a href="#生命周期的问题：" class="headerlink" title="生命周期的问题："></a>生命周期的问题：</h3><p>getDerivedStateFromProps 可以用hooks代替<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    ovflive: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> getDerivedStateFromProps(props) &#123;</span><br><span class="line">    <span class="keyword">if</span> (props.num &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ovflive: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hooks写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = useState(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">if</span> (props.num &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    setNum(<span class="literal">true</span>) <span class="comment">// 不用担心性能问题，这个setNum是在React操作dom之前完成的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><p>hooks 代替 memo</p><h3 id="componentDidMount-componentDidUpdate-componentWillUnmount"><a href="#componentDidMount-componentDidUpdate-componentWillUnmount" class="headerlink" title="componentDidMount componentDidUpdate componentWillUnmount"></a>componentDidMount componentDidUpdate componentWillUnmount</h3><p>hooks 写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// componentDidMount</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// componentWillUnmount</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">let</span> renderCounter = useRef(<span class="number">0</span>)</span><br><span class="line">  renderCounter.current++;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (renderCounter &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// componentDidUpdate</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="getSnapshotBeforeUpdate-componentDidCatch-getDerivedStateFromError"><a href="#getSnapshotBeforeUpdate-componentDidCatch-getDerivedStateFromError" class="headerlink" title="getSnapshotBeforeUpdate componentDidCatch getDerivedStateFromError"></a>getSnapshotBeforeUpdate componentDidCatch getDerivedStateFromError</h3><p>目前hooks无法实现，函数组件目前还无法取代类组件</p><h3 id="类实例成员如何映射到hooks"><a href="#类实例成员如何映射到hooks" class="headerlink" title="类实例成员如何映射到hooks"></a>类实例成员如何映射到hooks</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  it = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> it = useRef(<span class="number">0</span>) <span class="comment">// 初始值不能传入函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hooks如何获取历史props和state"><a href="#hooks如何获取历史props和state" class="headerlink" title="hooks如何获取历史props和state"></a>hooks如何获取历史props和state</h3><p>了解了了解了，如果不用useRef每次组件重新渲染值都会初始化为0，只有用useRef值才能保持不变，还有就是useEffect的优先级比较低，怎么比喻呢。，写下来把(0表示最先，依次)<br>次序有问题，下面做了修改<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>) <span class="comment">// 0</span></span><br><span class="line">  <span class="keyword">const</span> prevCountRef = useRef() <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 2</span></span><br><span class="line">    prevCountRef.current = count <span class="comment">// 保存上一次的count值，因为ref不受重新渲染的影响，因此可以从下一次渲染中取出count</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> prevCount = prevCountRef.current <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Now: &#123;count&#125;, before: &#123;prevCount&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的次序有问题，这里重新更改, useEffect 居然这么晚执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>) <span class="comment">// 0</span></span><br><span class="line">  <span class="keyword">const</span> prevCountRef = useRef() <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 2</span></span><br><span class="line">    prevCountRef.current = count</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> prevCount = prevCountRef.current <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Now: &#123;count&#125;, before: &#123;prevCount&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="如何强制更新一个hooks组件"><a href="#如何强制更新一个hooks组件" class="headerlink" title="如何强制更新一个hooks组件"></a>如何强制更新一个hooks组件</h3><p>class中有一个forceUpdate, 不过hooks 我们可以用其他方法其代替</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [updater, setUpdater] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">forceUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setUpdater(<span class="function"><span class="params">updater</span> =&gt;</span> updater + <span class="number">1</span>) <span class="comment">// 更新updater 就是间接更新了hooks组件</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> prevCountRef = useRef()</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    prevCountRef.current = count</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> prevCount = prevCountRef.current</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Now: &#123;count&#125;, before: &#123;prevCount&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>Redux 三大原则<br>单一数据源<br>状态不可变<br>纯函数修改数据</p><h3 id="实现的一个todolist应用。很简单，样式以及源码全部在train-ticket的src-TodoListSoundCode目录下"><a href="#实现的一个todolist应用。很简单，样式以及源码全部在train-ticket的src-TodoListSoundCode目录下" class="headerlink" title="实现的一个todolist应用。很简单，样式以及源码全部在train-ticket的src/TodoListSoundCode目录下"></a>实现的一个todolist应用。很简单，样式以及源码全部在train-ticket的src/TodoListSoundCode目录下</h3><p>这里放上app.js代码部分，方便查阅<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useCallback, useRef, useEffect, memo &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> idSeq = <span class="built_in">Date</span>.now()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Control = memo(<span class="function"><span class="keyword">function</span> <span class="title">Control</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; addTodo &#125; = props</span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123; <span class="comment">// 没有像任何子组件传递，所以就没有必要包裹callback</span></span><br><span class="line">    e.preventDefault()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newText = inputRef.current.value.trim()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newText.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    addTodo(&#123;</span><br><span class="line">      id: ++idSeq,</span><br><span class="line">      text: newText,</span><br><span class="line">      complate: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    inputRef.current.value = <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"control"</span>&gt;</span><br><span class="line">      &lt;h1&gt;todos&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;form onSubmit=&#123;onSubmit&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input</span></span><br><span class="line"><span class="regexp">          type="text"</span></span><br><span class="line"><span class="regexp">          ref=&#123;inputRef&#125;</span></span><br><span class="line"><span class="regexp">          className="new-todo"</span></span><br><span class="line"><span class="regexp">          placeholder="what needs to be done?"</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TodoItem = memo(<span class="function"><span class="keyword">function</span> <span class="title">TodoItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    todo: &#123;</span><br><span class="line">      id,</span><br><span class="line">      text,</span><br><span class="line">      complate</span><br><span class="line">    &#125;,</span><br><span class="line">    toggleTodo,</span><br><span class="line">    removeTodo</span><br><span class="line">  &#125; = props</span><br><span class="line">  <span class="keyword">const</span> onChange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    toggleTodo(id)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> onRemove = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    removeTodo(id)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'0'</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li className=<span class="string">"todo-item"</span>&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">"checkbox"</span></span><br><span class="line">        onChange=&#123;onChange&#125;</span><br><span class="line">        checked=&#123;complate&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;label className=&#123;complate ? <span class="string">'complate'</span> : <span class="string">''</span>&#125;&gt;&#123;text&#125;,&#123;<span class="built_in">String</span>(complate)&#125;&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;onRemove&#125;&gt;&amp;#xd7;&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Todos = memo(function Todos(props) &#123;</span></span><br><span class="line"><span class="regexp">  const &#123; todos, toggleTodo, removeTodo &#125; = props</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">      &#123;</span></span><br><span class="line"><span class="regexp">        todos.map(todo =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          return &lt;TodoItem</span></span><br><span class="line"><span class="regexp">            key=&#123;todo.id&#125;</span></span><br><span class="line"><span class="regexp">            todo=&#123;todo&#125;</span></span><br><span class="line"><span class="regexp">            toggleTodo=&#123;toggleTodo&#125;</span></span><br><span class="line"><span class="regexp">            removeTodo=&#123;removeTodo&#125;</span></span><br><span class="line"><span class="regexp">          /</span>&gt;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">const LS_KEY = '$-todos_';</span></span><br><span class="line"><span class="regexp">function TodoList() &#123;</span></span><br><span class="line"><span class="regexp">  const [todos, setTodos] = useState([])</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  const addTodo = useCallback((todo) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    setTodos(todos =&gt; [...todos, todo])</span></span><br><span class="line"><span class="regexp">  &#125;, [])</span></span><br><span class="line"><span class="regexp">  const removeTodo = useCallback((id) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    setTodos(todos =&gt; todos.filter(todo =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      return todo.id !== id</span></span><br><span class="line"><span class="regexp">    &#125;))</span></span><br><span class="line"><span class="regexp">  &#125;, [])</span></span><br><span class="line"><span class="regexp">  const toggleTodo = useCallback((id) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    setTodos(todos =&gt; todos.map(todo =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      return todo.id === id</span></span><br><span class="line"><span class="regexp">        ? &#123;</span></span><br><span class="line"><span class="regexp">          ...todo,</span></span><br><span class="line"><span class="regexp">          complate: !todo.complate</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        : todo;</span></span><br><span class="line"><span class="regexp">    &#125;))</span></span><br><span class="line"><span class="regexp">  &#125;, [])</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 下面两个副作用都是来实现本地数据存储的</span></span><br><span class="line"><span class="regexp">  useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    const todos = JSON.parse(localStorage.getItem(LS_KEY) || '[]')</span></span><br><span class="line"><span class="regexp">    setTodos(todos)</span></span><br><span class="line"><span class="regexp">  &#125;, [])</span></span><br><span class="line"><span class="regexp">  useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    localStorage.setItem(LS_KEY, JSON.stringify(todos))</span></span><br><span class="line"><span class="regexp">  &#125;, [todos])</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div className="todo-list"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Control</span></span><br><span class="line"><span class="regexp">        addTodo=&#123;addTodo&#125;</span></span><br><span class="line"><span class="regexp">      /</span>&gt;</span><br><span class="line">      &lt;Todos</span><br><span class="line">        removeTodo=&#123;removeTodo&#125;</span><br><span class="line">        toggleTodo=&#123;toggleTodo&#125;</span><br><span class="line">        todos=&#123;todos&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default TodoList;</span></span><br></pre></td></tr></table></figure></p><h3 id="Dispatch-与-Action"><a href="#Dispatch-与-Action" class="headerlink" title="Dispatch 与 Action"></a>Dispatch 与 Action</h3><p>这不就是我苦苦寻找的vuex里面的解构为什么可以…dispatch的原因了吗，帅呆了奥，原来是这么写一个函数的<br>addTodo = (payload) =&gt; dispatch(createAdd(payload))<br>把传入的对象转换为下面这种格式，然后通过解构的方式传递给组件，帅<br>{<br>   addTodo: dispatch Function<br>}<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useCallback, useRef, useEffect, memo &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createAdd,</span><br><span class="line">  createSet,</span><br><span class="line">  createRemove,</span><br><span class="line">  createToggle</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> idSeq = <span class="built_in">Date</span>.now()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这不就是我苦苦寻找的vuex里面的解构为什么可以...dispatch的原因了吗，帅呆了奥，原来是这么写一个函数的</span></span><br><span class="line"><span class="comment">// addTodo = (payload) =&gt; dispatch(createAdd(payload))</span></span><br><span class="line"><span class="comment">// 把传入的对象转换为下面这种格式，然后通过解构的方式传递给组件，帅</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//    addTodo: dispatch Function</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params">actionCreators, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> actionCreators) &#123;</span><br><span class="line">    ret[key] = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> actionCreator = actionCreators[key]</span><br><span class="line">      <span class="keyword">const</span> action = actionCreator(...args)</span><br><span class="line">      dispatch(action)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Control = memo(<span class="function"><span class="keyword">function</span> <span class="title">Control</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; addTodos &#125; = props</span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123; <span class="comment">// 没有像任何子组件传递，所以就没有必要包裹callback</span></span><br><span class="line">    e.preventDefault()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newText = inputRef.current.value.trim()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newText.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    addTodos(&#123;</span><br><span class="line">      id: ++idSeq,</span><br><span class="line">      text: newText,</span><br><span class="line">      complate: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    inputRef.current.value = <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"control"</span>&gt;</span><br><span class="line">      &lt;h1&gt;todos&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;form onSubmit=&#123;onSubmit&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input</span></span><br><span class="line"><span class="regexp">          type="text"</span></span><br><span class="line"><span class="regexp">          ref=&#123;inputRef&#125;</span></span><br><span class="line"><span class="regexp">          className="new-todo"</span></span><br><span class="line"><span class="regexp">          placeholder="what needs to be done?"</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TodoItem = memo(<span class="function"><span class="keyword">function</span> <span class="title">TodoItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    todo: &#123;</span><br><span class="line">      id,</span><br><span class="line">      text,</span><br><span class="line">      complate</span><br><span class="line">    &#125;,</span><br><span class="line">    remove,</span><br><span class="line">    toggle</span><br><span class="line">  &#125; = props</span><br><span class="line">  <span class="keyword">const</span> onChange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    toggle(id)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> onRemove = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    remove(id)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li className=<span class="string">"todo-item"</span>&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">"checkbox"</span></span><br><span class="line">        onChange=&#123;onChange&#125;</span><br><span class="line">        checked=&#123;complate&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;label className=&#123;complate ? <span class="string">'complate'</span> : <span class="string">''</span>&#125;&gt;&#123;text&#125;,&#123;<span class="built_in">String</span>(complate)&#125;&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;onRemove&#125;&gt;&amp;#xd7;&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Todos = memo(function Todos(props) &#123;</span></span><br><span class="line"><span class="regexp">  const &#123; todos, remove, toggle &#125; = props</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">      &#123;</span></span><br><span class="line"><span class="regexp">        todos.map(todo =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          return &lt;TodoItem</span></span><br><span class="line"><span class="regexp">            key=&#123;todo.id&#125;</span></span><br><span class="line"><span class="regexp">            todo=&#123;todo&#125;</span></span><br><span class="line"><span class="regexp">            remove=&#123;remove&#125;</span></span><br><span class="line"><span class="regexp">            toggle=&#123;toggle&#125;</span></span><br><span class="line"><span class="regexp">          /</span>&gt;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">const LS_KEY = '$-todos_';</span></span><br><span class="line"><span class="regexp">function TodoList() &#123;</span></span><br><span class="line"><span class="regexp">  const [todos, setTodos] = useState([])</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  const dispatch = useCallback((action) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    const &#123; type, payload &#125; = action</span></span><br><span class="line"><span class="regexp">    switch (type) &#123;</span></span><br><span class="line"><span class="regexp">      case 'set':</span></span><br><span class="line"><span class="regexp">        setTodos(payload)</span></span><br><span class="line"><span class="regexp">        break;</span></span><br><span class="line"><span class="regexp">      case 'add':</span></span><br><span class="line"><span class="regexp">        setTodos(todos =&gt; [...todos, payload])</span></span><br><span class="line"><span class="regexp">        break;</span></span><br><span class="line"><span class="regexp">      case 'remove':</span></span><br><span class="line"><span class="regexp">        setTodos(todos =&gt; todos.filter(todo =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          return todo.id !== payload</span></span><br><span class="line"><span class="regexp">        &#125;))</span></span><br><span class="line"><span class="regexp">        break;</span></span><br><span class="line"><span class="regexp">      case 'toggle':</span></span><br><span class="line"><span class="regexp">        setTodos(todos =&gt; todos.map(todo =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          return todo.id === payload</span></span><br><span class="line"><span class="regexp">            ? &#123;</span></span><br><span class="line"><span class="regexp">              ...todo,</span></span><br><span class="line"><span class="regexp">              complate: !todo.complate</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            : todo;</span></span><br><span class="line"><span class="regexp">        &#125;))</span></span><br><span class="line"><span class="regexp">        break;</span></span><br><span class="line"><span class="regexp">      default:</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;, [])</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    const todos = JSON.parse(localStorage.getItem(LS_KEY) || '[]')</span></span><br><span class="line"><span class="regexp">    dispatch(createSet(todos))</span></span><br><span class="line"><span class="regexp">  &#125;, [dispatch])</span></span><br><span class="line"><span class="regexp">  useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    localStorage.setItem(LS_KEY, JSON.stringify(todos))</span></span><br><span class="line"><span class="regexp">  &#125;, [todos])</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div className="todo-list"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Control</span></span><br><span class="line"><span class="regexp">        &#123;</span></span><br><span class="line"><span class="regexp">          ...bindActionCreators(&#123;</span></span><br><span class="line"><span class="regexp">            addTodos: createAdd</span></span><br><span class="line"><span class="regexp">          &#125;, dispatch)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      /</span>&gt;</span><br><span class="line">      &lt;Todos</span><br><span class="line">        &#123;</span><br><span class="line">          ...bindActionCreators(&#123;</span><br><span class="line">            remove: createRemove,</span><br><span class="line">            toggle: createToggle</span><br><span class="line">          &#125;, dispatch)</span><br><span class="line">        &#125;</span><br><span class="line">        todos=&#123;todos&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default TodoList;</span></span><br></pre></td></tr></table></figure></p><h3 id="reducer-这边问题很多啊"><a href="#reducer-这边问题很多啊" class="headerlink" title="reducer 这边问题很多啊"></a>reducer 这边问题很多啊</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useCallback, useRef, useEffect, memo &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createAdd,</span><br><span class="line">  createSet,</span><br><span class="line">  createRemove,</span><br><span class="line">  createToggle</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> idSeq = <span class="built_in">Date</span>.now()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这不就是我苦苦寻找的vuex里面的解构为什么可以...dispatch的原因了吗，帅呆了奥，原来是这么写一个函数的</span></span><br><span class="line"><span class="comment">// addTodo = (payload) =&gt; dispatch(createAdd(payload))</span></span><br><span class="line"><span class="comment">// 把传入的对象转换为下面这种格式，然后通过解构的方式传递给组件，帅</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//    addTodo: dispatch Function</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params">actionCreators, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> actionCreators) &#123;</span><br><span class="line">    ret[key] = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> actionCreator = actionCreators[key]</span><br><span class="line">      <span class="keyword">const</span> action = actionCreator(...args)</span><br><span class="line">      dispatch(action)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Control = memo(<span class="function"><span class="keyword">function</span> <span class="title">Control</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; addTodos &#125; = props</span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123; <span class="comment">// 没有像任何子组件传递，所以就没有必要包裹callback</span></span><br><span class="line">    e.preventDefault()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newText = inputRef.current.value.trim()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newText.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    addTodos(&#123;</span><br><span class="line">      id: ++idSeq,</span><br><span class="line">      text: newText,</span><br><span class="line">      complate: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    inputRef.current.value = <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"control"</span>&gt;</span><br><span class="line">      &lt;h1&gt;todos&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;form onSubmit=&#123;onSubmit&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input</span></span><br><span class="line"><span class="regexp">          type="text"</span></span><br><span class="line"><span class="regexp">          ref=&#123;inputRef&#125;</span></span><br><span class="line"><span class="regexp">          className="new-todo"</span></span><br><span class="line"><span class="regexp">          placeholder="what needs to be done?"</span></span><br><span class="line"><span class="regexp">          /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TodoItem = memo(<span class="function"><span class="keyword">function</span> <span class="title">TodoItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    todo: &#123;</span><br><span class="line">      id,</span><br><span class="line">      text,</span><br><span class="line">      complate</span><br><span class="line">    &#125;,</span><br><span class="line">    remove,</span><br><span class="line">    toggle</span><br><span class="line">  &#125; = props</span><br><span class="line">  <span class="keyword">const</span> onChange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    toggle(id)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> onRemove = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    remove(id)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li className=<span class="string">"todo-item"</span>&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">"checkbox"</span></span><br><span class="line">        onChange=&#123;onChange&#125;</span><br><span class="line">        checked=&#123;complate&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;label className=&#123;complate ? <span class="string">'complate'</span> : <span class="string">''</span>&#125;&gt;&#123;text&#125;,&#123;<span class="built_in">String</span>(complate)&#125;&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;onRemove&#125;&gt;&amp;#xd7;&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Todos = memo(function Todos(props) &#123;</span></span><br><span class="line"><span class="regexp">  const &#123; todos, remove, toggle &#125; = props</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">      &#123;</span></span><br><span class="line"><span class="regexp">        todos.map(todo =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          return &lt;TodoItem</span></span><br><span class="line"><span class="regexp">            key=&#123;todo.id&#125;</span></span><br><span class="line"><span class="regexp">            todo=&#123;todo&#125;</span></span><br><span class="line"><span class="regexp">            remove=&#123;remove&#125;</span></span><br><span class="line"><span class="regexp">            toggle=&#123;toggle&#125;</span></span><br><span class="line"><span class="regexp">            /</span>&gt;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function reducer(state, action) &#123;</span></span><br><span class="line"><span class="regexp">  const &#123; type, payload &#125; = action;</span></span><br><span class="line"><span class="regexp">  const &#123; todos, incrementCount &#125; = state</span></span><br><span class="line"><span class="regexp">  switch (type) &#123;</span></span><br><span class="line"><span class="regexp">    case 'set':</span></span><br><span class="line"><span class="regexp">      return &#123;</span></span><br><span class="line"><span class="regexp">        ...state,</span></span><br><span class="line"><span class="regexp">        todos: payload,</span></span><br><span class="line"><span class="regexp">        incrementCount: incrementCount + 1</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    case 'add':</span></span><br><span class="line"><span class="regexp">      return &#123;</span></span><br><span class="line"><span class="regexp">        ...state,</span></span><br><span class="line"><span class="regexp">        todos: [...todos, payload],</span></span><br><span class="line"><span class="regexp">        incrementCount: incrementCount + 1</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    case 'remove':</span></span><br><span class="line"><span class="regexp">      return &#123;</span></span><br><span class="line"><span class="regexp">        ...state,</span></span><br><span class="line"><span class="regexp">        todos: todos.filter(todo =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          return todo.id !== payload</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    case 'toggle':</span></span><br><span class="line"><span class="regexp">      return &#123;</span></span><br><span class="line"><span class="regexp">        ...state,</span></span><br><span class="line"><span class="regexp">        todos: todos.map(todo =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          return todo.id === payload</span></span><br><span class="line"><span class="regexp">          ? &#123;</span></span><br><span class="line"><span class="regexp">            ...todo,</span></span><br><span class="line"><span class="regexp">            complate: !todo.complate</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">          : todo;</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    default:</span></span><br><span class="line"><span class="regexp">      return state</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const LS_KEY = '$-todos_';</span></span><br><span class="line"><span class="regexp">function TodoList() &#123;</span></span><br><span class="line"><span class="regexp">  const [todos, setTodos] = useState([])</span></span><br><span class="line"><span class="regexp">  const [incrementCount, setIncrementCount] = useState(0)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  const dispatch = useCallback((action) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    const state = &#123;</span></span><br><span class="line"><span class="regexp">      todos,</span></span><br><span class="line"><span class="regexp">      incrementCount</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    const setters = &#123;</span></span><br><span class="line"><span class="regexp">      todos: setTodos,</span></span><br><span class="line"><span class="regexp">      incrementCount: setIncrementCount</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    const newState = reducer(state, action)</span></span><br><span class="line"><span class="regexp">    for (var key in newState) &#123;</span></span><br><span class="line"><span class="regexp">      setters[key](newState[key])</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;, [todos, incrementCount])</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    const todos = JSON.parse(localStorage.getItem(LS_KEY) || '[]')</span></span><br><span class="line"><span class="regexp">    dispatch(createSet(todos))</span></span><br><span class="line"><span class="regexp">  &#125;, [])</span></span><br><span class="line"><span class="regexp">  useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    localStorage.setItem(LS_KEY, JSON.stringify(todos))</span></span><br><span class="line"><span class="regexp">  &#125;, [todos])</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div className="todo-list"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Control</span></span><br><span class="line"><span class="regexp">        &#123;</span></span><br><span class="line"><span class="regexp">          ...bindActionCreators(&#123;</span></span><br><span class="line"><span class="regexp">            addTodos: createAdd</span></span><br><span class="line"><span class="regexp">          &#125;, dispatch)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">      &lt;Todos</span><br><span class="line">        &#123;</span><br><span class="line">          ...bindActionCreators(&#123;</span><br><span class="line">            remove: createRemove,</span><br><span class="line">            toggle: createToggle</span><br><span class="line">          &#125;, dispatch)</span><br><span class="line">        &#125;</span><br><span class="line">        todos=&#123;todos&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default TodoList;</span></span><br></pre></td></tr></table></figure><p>以上代码这一块编辑器提示必须依赖dispatch，否则就删除数组，但是依赖后就会出现bug，代码会进入无限循环，莫名其妙，不过老师后面的异步actions好像是可以避免这个问题，但是我没有跟进，直接进入了PWA应用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> todos = <span class="built_in">JSON</span>.parse(localStorage.getItem(LS_KEY) || <span class="string">'[]'</span>)</span><br><span class="line">  dispatch(createSet(todos))</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure></p><h2 id="PWA-Progressive-Web-App"><a href="#PWA-Progressive-Web-App" class="headerlink" title="PWA (Progressive Web App)"></a>PWA (Progressive Web App)</h2><p>渐进式网络应用</p><h3 id="Service-Worker-服务器工作线程"><a href="#Service-Worker-服务器工作线程" class="headerlink" title="Service Worker 服务器工作线程"></a>Service Worker 服务器工作线程</h3><p>常驻内存运行<br>代理网络请求<br>依赖HttpS</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>优化回调地狱<br>async/await 语法同步化</p><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p>比XMLHttpRequest更简洁<br>Promise风格</p><h3 id="cache-API"><a href="#cache-API" class="headerlink" title="cache API"></a>cache API</h3><p>支持资源的缓存系统<br>缓存(css/scritp/image)<br>依赖Service Worker代理网络请求</p><h3 id="Notification-API"><a href="#Notification-API" class="headerlink" title="Notification API"></a>Notification API</h3><p>消息推送<br>依赖用户授权<br>适合在Service Worker中推送</p><h2 id="删除除serviceWorker-js以外的所有文件"><a href="#删除除serviceWorker-js以外的所有文件" class="headerlink" title="删除除serviceWorker.js以外的所有文件"></a>删除除serviceWorker.js以外的所有文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls | grep -v serviceWorker.js | xargs rm</span><br></pre></td></tr></table></figure><p>这句代码也太帅了？从来没用过哎</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p><strong>生成26个字母表</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> alphabet = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">26</span>), (eie, index) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(<span class="number">65</span> + index)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>通过data来进行元素的锚跳转</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-cate</span>=<span class="string">"X"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">`[data-cate='X']`</span>)</span></span><br><span class="line"><span class="undefined">  .scrollIntoView()</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>传参如果是对象可以解构：</strong><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bash = &#123;</span><br><span class="line">  name,</span><br><span class="line">  bash,</span><br><span class="line">  hello</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;div &#123;...bash&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p><strong>icon小图标的&amp;#x在js中要替换为’\u’</strong></p><p><strong>delete操作符居然可以这样用-</strong><br>in运算符：<br>src/query/Bottom.jsx<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toggle = useCallback(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newCheckedMap = &#123;...checkedMap&#125;</span><br><span class="line">  <span class="keyword">if</span> (value <span class="keyword">in</span> checkedMap) &#123;</span><br><span class="line">    <span class="keyword">delete</span> newCheckedMap[value]</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    newCheckedMap[value] = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  update(newCheckedMap)</span><br><span class="line">&#125;, [checkedMap, update])</span><br></pre></td></tr></table></figure></p><p><strong>今天用到了<code>Object.assign()</code></strong><br>目前根据代码推断，作用应该等同于:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;...data, <span class="attr">msg</span>: <span class="string">"helo"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(data, &#123;</span><br><span class="line">  msg: <span class="string">"helo"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>Candidate.jsx中还写了个选项卡，很简单，很简单</strong></p><h2 id="没有用过的css"><a href="#没有用过的css" class="headerlink" title="没有用过的css"></a>没有用过的css</h2><p><strong>实现的效果就是拖动到顶部的时候会变成固定定位，下一个同样属性的元素划过会替换掉。蛮神奇的</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>readonly</strong><br>input的一个属性，加了后不能填写，初步理解</p><h2 id="日期组件很顶，以后可以用到估计"><a href="#日期组件很顶，以后可以用到估计" class="headerlink" title="日期组件很顶，以后可以用到估计"></a>日期组件很顶，以后可以用到估计</h2><p>common/DeteSelector.jsx</p><p>这个日期选择组件实在是帅的一批，react居然要拆这么细的组件，日期组件原来这么简单，感觉下一次做就不会有所畏惧了，结尾老师说的注意点，什么鬼，听不明白，hide？</p><h2 id="开发中所用到的npm安装的模块总结"><a href="#开发中所用到的npm安装的模块总结" class="headerlink" title="开发中所用到的npm安装的模块总结"></a>开发中所用到的npm安装的模块总结</h2><p><strong>prop-types 校验传入属性值的类型</strong><br>具体在common/header.jsx 文件中使用<br>classnames 动态类、没有这个的话可以这么写<br>没有：<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&#123;[<span class="string">'city-selector'</span>, (!show) &amp;&amp; <span class="string">'hidden'</span>].filter(<span class="built_in">Boolean</span>).join(<span class="string">' '</span>)&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><strong>用classnames</strong><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> classnames <span class="keyword">from</span> <span class="string">'classnames'</span></span><br><span class="line">&lt;div className=&#123;classnames(<span class="string">'city-selector'</span>, &#123;</span><br><span class="line">  hidden: !show</span><br><span class="line">  &#125;)&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><strong>day.js</strong> 仅2K大小，和Moment.js一样的api，nice啊，虽然没有用过Monment</p><p><strong>urijs</strong><br>解析用get提交的url数据，这个居然也要库，怎么什么都要库啊，自己写不行吗。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> URI <span class="keyword">from</span> <span class="string">'urijs'</span></span><br><span class="line"><span class="keyword">const</span> &#123;dispatch&#125; = props</span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> queries = URI.parseQuery(<span class="built_in">window</span>.location.search)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      <span class="keyword">from</span>,</span><br><span class="line">      to,</span><br><span class="line">      date,</span><br><span class="line">      highSpeed</span><br><span class="line">    &#125; = queries</span><br><span class="line">    dispatch(setFrom(<span class="keyword">from</span>))</span><br><span class="line">    dispatch(setTo(to))</span><br><span class="line">    dispatch(setDeparDate(h0(dayjs(date).valueOf())))</span><br><span class="line">    dispatch(setHighSpeed(highSpeed === <span class="string">'true'</span>))</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure></p><p><strong>left-pad</strong> 这个模块就11行代码，我真的服了，现在有现成的支持,String.padStart()<br>这几集的视频没了，只能自己看源码，还行吧，挺简单的，里面操作滚动条技巧还挺厉害的，掌握原理了，我自己写还真写不出来，艾，基础太薄弱了。fuck<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(index: <span class="built_in">number</span>).padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="webpack-的-MPA-多页网页设置"><a href="#webpack-的-MPA-多页网页设置" class="headerlink" title="webpack 的 MPA 多页网页设置"></a>webpack 的 MPA 多页网页设置</h2><p>9-2 节必须更改config/webpack.config.js下的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  <span class="comment">/* 142 */</span> filename: isEnvProduction</span><br><span class="line">  <span class="comment">/* 143 */</span> ? <span class="string">'static/js/[name].[chunkhash:8].js'</span></span><br><span class="line">  <span class="comment">/* 144 */</span> : isEnvDevelopment &amp;&amp; <span class="string">'static/js/build.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更改为: ‘static/js/[name].js’<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  <span class="comment">/* 142 */</span> filename: isEnvProduction</span><br><span class="line">  <span class="comment">/* 143 */</span> ? <span class="string">'static/js/[name].[chunkhash:8].js'</span></span><br><span class="line">  <span class="comment">/* 144 */</span> : isEnvDevelopment &amp;&amp; <span class="string">'static/js/[name].js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="应该补充的知识"><a href="#应该补充的知识" class="headerlink" title="应该补充的知识"></a>应该补充的知识</h2><p><strong>给组件传自定义dom</strong><br>这块还不知道其他用法，比如传多个dom。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Detail(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">&#123; props.children &#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function App()&#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Detail&gt;</span><br><span class="line">      // 这里可以自己定义</span><br><span class="line">      &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    &lt;/Detail&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>for of 以及 object.keys() 的使用</strong><br>以前还专门记过，他娘的，怎么就忘了呢<br>src/order/actions.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> passengers = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">0</span>, <span class="attr">ticketType</span>: <span class="string">'abult'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">child</span>: <span class="string">''</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> passenger <span class="keyword">of</span> passengers) &#123;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(passenger)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!passenger[key]) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (passenger.ticketType === <span class="string">'adult'</span>) &#123;</span><br><span class="line">    adultFound = passenger.id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>总体来说还是可以的，hooks比想象的要简单要好用的多</p><p>12.1 代码规范和格式化，git提交格式化，使用Prettier增强eslist的格式化能力<br>12.2 代码部署以及PWA应用所需的，serviceWorker.js 的应用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目目录&lt;br&gt;待填&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="demoorbug.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="react" scheme="demoorbug.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="demoorbug.github.io/2019/06/11/TypeScript/"/>
    <id>demoorbug.github.io/2019/06/11/TypeScript/</id>
    <published>2019-06-11T12:59:54.000Z</published>
    <updated>2022-03-15T22:58:15.959Z</updated>
    
    <content type="html"><![CDATA[<p>TypeScript 学习<br><a href="https://github.com/DemoorBug/Typescript-axios" target="_blank" rel="noopener">库地址</a><br><a id="more"></a></p><p>换一套课程，上一个就是按照官方文档来的</p><h1 id="2-4基础类型"><a href="#2-4基础类型" class="headerlink" title="2-4基础类型"></a>2-4基础类型</h1><p>undefined 和 null是所有类型的子类型</p><p>比如：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><p>跳过检查<code>any</code><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> strOrnum: <span class="built_in">any</span> = <span class="string">'num'</span></span><br><span class="line">strOrnum = <span class="number">213</span></span><br></pre></td></tr></table></figure></p><p>联合类型<code>|</code><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> strOrnum: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">'num'</span></span><br><span class="line">strOrnum = <span class="number">2123</span></span><br></pre></td></tr></table></figure></p><p>数字数组<code>number[]</code><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrOfNumbers: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arrOfNumbers.push(<span class="number">5</span>)</span><br><span class="line">arrOfNumbers.push(<span class="string">'6'</span>) <span class="comment">//报错，必须是数字</span></span><br></pre></td></tr></table></figure></p><p>类数组<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">//arguments 就是一个类数组</span></span><br><span class="line">  <span class="comment">// 可以用arguments.length</span></span><br><span class="line">  <span class="comment">// 但是没有数组的方法</span></span><br><span class="line">  <span class="keyword">let</span> arr: <span class="built_in">any</span>[] = <span class="built_in">arguments</span></span><br><span class="line">  <span class="comment">//这样会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>元组<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">'viking'</span>, <span class="number">123</span>]</span><br></pre></td></tr></table></figure></p><p><strong>interface 接口</strong></p><blockquote><p>对对象的形状(shape)进行描述<br>对类(class) 进行抽象<br>Duck typing (鸭子类型)</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> viking: Person = &#123;</span><br><span class="line">  name: <span class="string">'viking'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可选属性<code>?</code><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只读属性<code>readonly</code><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  readonly id: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// readonly 是加在前面</span></span><br><span class="line"><span class="keyword">let</span> obj: Person = &#123;</span><br><span class="line">  id: <span class="number">0</span>,</span><br><span class="line">  name: <span class="string">'string'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.id = <span class="number">2</span> <span class="comment">// 报错，不可修改</span></span><br></pre></td></tr></table></figure></p><blockquote><p>const 和 readonly的区别是，const是用在变量上面，readonly是用在属性上面</p></blockquote><p><strong>函数</strong><br>函数的构成，输入，和返回</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x:<span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>可选参数<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x:<span class="built_in">number</span>, y: <span class="built_in">number</span>, z?: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> z === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可选参数，必须是最后一个，不能更改顺序</span></span><br></pre></td></tr></table></figure></p><p>函数表达式<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x:<span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> add2: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z?: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = add</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出现的`=&gt;`不是ES6的箭头函数，而是ts提供的写法</span></span><br></pre></td></tr></table></figure></p><p><strong>类 class</strong><br>类(Class): 定义了一切事物的抽象特点<br>对象(Object): 类的实例<br>面向对象(OOP): 三大特性: 封装、继承、多态<br>封装: 数据操作细节隐藏，仅暴露对外的接口，外界调用端不需要知道细节，就可以用对外提供的接口来访问对象<br>继承: 子类继承父类，子类除了拥有父类的所有特性外，还有一些更加具体的特性<br>多态: 是由继承而产生的相关的不同的类，对同一个方法呢可以有不同的响应，比如猫和狗都继承自动物,但是他们分别实现了自己吃的方法，此时针对某一个实例，我们无需了解他是猫还是狗，我们可以直接调用吃方法，程序就会自动判断出如何正确执行吃方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">nam: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = nam</span><br><span class="line">  &#125;</span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;this.name&#125;</span> is runing`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> snake = <span class="keyword">new</span> Animal(<span class="string">'snake'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  bark() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;this.name&#125;</span> is barking`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xiaobao = <span class="keyword">new</span> Dog(<span class="string">'xiaobao'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(xiaobao.run());</span><br><span class="line"><span class="built_in">console</span>.log(xiaobao.bark());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写run</span></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span> (<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">  run () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Meow, '</span> + <span class="keyword">super</span>.run()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> maomao = <span class="keyword">new</span> Cat(<span class="string">'maomao'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(maomao.run());</span><br><span class="line"></span><br><span class="line"><span class="comment">//多态：我们不用关注调用run的时候他是猫还是狗，系统会自动判断执行正确方法</span></span><br></pre></td></tr></table></figure><p>类里面用到的修饰符</p><p>默认是 <code>public</code><br>有些属性或方法，不愿意对外访问就要用到<br><code>private</code> 只能在类里面访问，子类都不能访问<br>如果希望子类可以访问，就要用到<br><code>protected</code><br>如果想让属性只能访问不能修改，可以用<br><code>readonly</code><br>静态属性(ES6也有？),不用实例也可以访问<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  <span class="keyword">static</span> categoies: <span class="built_in">string</span>[] = [<span class="string">'mammal'</span>,<span class="string">'bird'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>静态方法<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  <span class="keyword">static</span> isAnimal(a) &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">instanceof</span> Animal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> snake = <span class="keyword">new</span> Animal(<span class="string">'li'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Animal.isAnimal(snake));</span><br></pre></td></tr></table></figure></p><p><strong>类和接口</strong><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Radio &#123;</span><br><span class="line">  switchRadio(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> RadioWithBattery <span class="keyword">extends</span> Radio &#123;</span><br><span class="line">  checkBatteryStatus(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Car <span class="keyword">implements</span> Radio &#123;</span><br><span class="line">  switchRadio() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cellphone <span class="keyword">implements</span> RadioWithBattery &#123;</span><br><span class="line">  switchRadio() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  checkBatteryStatus() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>interface 接口<br>对对象的形状(shape)进行描述<br>对类(class)进行抽象<br>Duck Typing(鸭子类型)</p><blockquote><p>鸭子类型：只要你走起来像鸭子,叫起来像鸭子，我就不管你是什么东西，我就可以用它来约束各种概念上毫不相关内容</p></blockquote><p><strong>枚举</strong><br>数字枚举<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Direction &#123;</span><br><span class="line">  Up,</span><br><span class="line">  Down,</span><br><span class="line">  Left,</span><br><span class="line">  Right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>常量枚举<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> Direction &#123;</span><br><span class="line">  Up,</span><br><span class="line">  Down,</span><br><span class="line">  Left,</span><br><span class="line">  Right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>枚举分两种，只有常量值可以常量枚举，计算值不能使用常量枚举不可以加const，上面讲的都是常量值，计算值后面用到了讲</p><p><strong>泛型(最难的部分)</strong><br>动机，要解决什么问题(太NICE了，比那个好多了)<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">num:<span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sr = name(<span class="number">123</span>);</span><br><span class="line"><span class="comment">// 如果我们要传入字符串、布尔、复杂类型，就要使用到any，那样就会导致sr常量就会丧失类型，泛型就是解决这种问题的</span></span><br></pre></td></tr></table></figure></p><p>泛型: 是指在定义函数接口或类的时候，我们不预先指定具体类型，而是在使用的时候再指定类型的一种特征<br>老师讲的很通透，感觉挺简单？<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">names</span>&lt;<span class="title">T</span>&gt;(<span class="params">num:T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sr = names(<span class="string">'123'</span>)</span><br><span class="line"><span class="comment">// 现在不管我们传入什么，ts类型推断都会帮我们推断出常量的类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">names</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">params:[T, U]</span>): [<span class="title">U</span>, <span class="title">T</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [params[<span class="number">1</span>], params[<span class="number">0</span>]]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sr = names([<span class="string">'number'</span>, <span class="number">123</span>]) <span class="comment">//类型推断 [number, string]</span></span><br></pre></td></tr></table></figure></p><p>更深入的用法<br>只能传入数组<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echoWithArr</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">  arg.length</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = echoWithArr([<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">//只能传入数组</span></span><br></pre></td></tr></table></figure></p><p>这种方法就可以传入带length属性的类型参数<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Length &#123;</span><br><span class="line">  length: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echoWithArr</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Length</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  arg.length</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> str = echoWithArr(<span class="string">'str'</span>)</span><br><span class="line"><span class="keyword">const</span> obj = echoWithArr(&#123;length: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> arr2 = echoWithArr([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure></p><p>在类里面使用泛型<br>为什么要用到<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Queue &#123;</span><br><span class="line">  <span class="keyword">private</span> data = []</span><br><span class="line">  push(item) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.push(item)</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.shift()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line">queue.push(<span class="number">1</span>)</span><br><span class="line">queue.push(<span class="string">'srt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed());</span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed());</span><br><span class="line"><span class="comment">// 这里就会报错，因为第二个值是string，string没有toFixed方法</span></span><br><span class="line"><span class="comment">// 简单修改</span></span><br><span class="line"><span class="keyword">class</span> Queue &#123;</span><br><span class="line">  <span class="keyword">private</span> data = []</span><br><span class="line">  push(item: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.push(item)</span><br><span class="line">  &#125;</span><br><span class="line">  pop(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.shift()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样也可以，如果需求传入更多参数，会变得很麻烦</span></span><br></pre></td></tr></table></figure></p><p>使用泛型类<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Queue&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> data = []</span><br><span class="line">  push (item: T) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.push(item)</span><br><span class="line">  &#125;</span><br><span class="line">  pop(): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.shift()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">queue.push(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed());</span><br></pre></td></tr></table></figure></p><p>interface 泛型<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> KeyPair&lt;T, U&gt; &#123;</span><br><span class="line">  key: T;</span><br><span class="line">  value: U;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> kp1: KeyPair&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt; = &#123;</span><br><span class="line">  key: <span class="number">123</span>,</span><br><span class="line">  value: <span class="string">'str'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>泛型数组<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></p><p>泛型描述函数<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPlus &#123;</span><br><span class="line">  (a: <span class="built_in">number</span>, b: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params">a:<span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a: IPlus = plus</span><br></pre></td></tr></table></figure></p><p>泛型interface 结合泛型描述函数<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPlus&lt;T&gt; &#123;</span><br><span class="line">  (a: T, b: T): T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params">a:<span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a: IPlus&lt;<span class="built_in">number</span>&gt; = plus</span><br></pre></td></tr></table></figure></p><p><strong>类型别名</strong><br>// type aliases<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PlusType = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: <span class="built_in">number</span> y:<span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sum2: PlusType = sum</span><br></pre></td></tr></table></figure></p><p>如果一个函数要接受参数比较复杂，比如联合类型接收一个函数，就要用到类型别名<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NameResolver = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">type</span> NameOrResolver = <span class="built_in">string</span> | NameResolver</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>类型断言</strong><br>// type assertion<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ls</span>(<span class="params">s: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// s.length 这样会报错，因为联合类型number没有length</span></span><br><span class="line">  (s <span class="keyword">as</span> <span class="built_in">string</span>).length</span><br><span class="line">  <span class="comment">//这样就ok了</span></span><br><span class="line">  (&lt;<span class="built_in">string</span>&gt;s).length</span><br><span class="line">  <span class="comment">// 好像也没有比as简单。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>声明文件</strong><br>后缀为.d.ts的文件ts都会解析<br>如果用到jQuery的话，直接写会报错，要声明<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> jQuery: <span class="function">(<span class="params">selector: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">any</span></span><br></pre></td></tr></table></figure></p><p>tsconfig.json 配置文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"include"</span> : [<span class="string">"**/*"</span>]</span><br><span class="line">&#125;</span><br><span class="line">// 这个字段就是告诉编译器，帮我们编译当前文件夹下的所有文件</span><br></pre></td></tr></table></figure></p><p>官方也为我们准备好了声明文件<br>比如<code>@type/jquery</code>就是jquery的声明文件</p><p><a href="https://microsoft.github.io/TypeSearch/" target="_blank" rel="noopener">查看声明文件的一个网址</a></p><p><strong>React + typescript</strong><br><strong>ts组件，太好用了</strong><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IHelloProps &#123;</span><br><span class="line">  message?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const Hello = (props: IHelloProps) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   return &lt;h2&gt;&#123;props.message&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// React.FC是React.FunctionComponent的别名</span></span><br><span class="line"><span class="comment">// React.FC 内置了很多方法，很有用，目前就讲了defaultProps</span></span><br><span class="line"><span class="comment">// ts可以直接替代以前的propTypes(类型检查)</span></span><br><span class="line"><span class="keyword">const</span> Hello: React.FC&lt;IHelloProps&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;h2&gt;&#123;props.message&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Hello.defaultProps = &#123;</span></span><br><span class="line"><span class="regexp">  message: 'Hello word'</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Hello</span></span><br></pre></td></tr></table></figure></p><p><strong>自定义hook</strong><br>必须use开头</p><p>高阶组件HOC就是一个函数，接受一个组件作为参数，返回一个新的组件</p><h1 id="项目开始"><a href="#项目开始" class="headerlink" title="项目开始"></a>项目开始</h1><p>安装命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app q --TypeScript //未来会弃用，使用下面的命令</span><br><span class="line">npx create-react-app q --template typescript</span><br></pre></td></tr></table></figure></p><p>安装了classnames 插件，还要安装附属的typescript<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add classnames -S</span><br><span class="line">yarn add @types/classnames -S</span><br></pre></td></tr></table></figure></p><p>代码方面倒是挺简单，样式是直接复制的<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NativeButtonProps = BaseButtonProps &amp; React.ButtonHTMLAttributes&lt;HTMLElement&gt;</span><br><span class="line"><span class="keyword">type</span> AnchorButtonProps = BaseButtonProps &amp; React.AnchorHTMLAttributes&lt;HTMLElement&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> ButtonProps = Partial&lt;NativeButtonProps &amp; AnchorButtonProps&gt;;</span><br><span class="line"><span class="comment">// ButtonHTMLAttributes，AnchorHTMLAttributes button和a元素所有的附加属性，写起来还</span></span><br><span class="line"><span class="comment">// 会有代码提示, 用起来效果很NICE</span></span><br><span class="line"><span class="comment">// 此块代码的位置在项目的Button组件里面 q/src/components/Button/button.tsx:24</span></span><br><span class="line"><span class="comment">// Partial&lt;T&gt; 把里面的属性全部变成可选属性，难道以前的属性不是可选吗？(经测试，以前的属性都是可选的，所以这个算是多余代码，没必要。当然老师的意思估计是了解把)</span></span><br><span class="line"><span class="comment">// 为什么不直接一行解决？例如：</span></span><br><span class="line"><span class="comment">// type AllButtonProps = Partial&lt;BaseButtonProps &amp; React.ButtonHTMLAttributes&lt;HTMLElement&gt; &amp; React.AnchorHTMLAttributes&lt;HTMLElement&gt;&gt;</span></span><br><span class="line"><span class="comment">// 可以一行解决，还要写这么多，估计是好理解，确实</span></span><br></pre></td></tr></table></figure></p><p><strong>测试</strong><br>测试框架有很多，这次用到的是一个后起之秀<code>JEST</code></p><p>create react app 用的就是这个测试工具<br>已经内置了jest测试工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx jest jest.test.js //用于测试</span><br><span class="line">npx jest jest.test.js --watch //一直运行，保存一次运行一次</span><br></pre></td></tr></table></figure></p><p>ReactTestUtils 可搭配测试框架使用，比如jest，<br>官网推荐使用React Testing Library 也算是后起之秀<br>也可以使用Enzyme</p><p>create react app 3.0已经内置了React Testing Library了</p><p>三种文件会被自动认为是测试文件</p><ul><li>在<strong>tests</strong>文件夹下面的.js，.ts文件</li><li>使用.test.js结尾的文件</li><li>使用.spec.js结尾的文件</li></ul><p><strong>jest dom</strong><br>增加新的dom断言,这个库也已经内置了</p><p>插曲：设置npm代理(不上代理，总感觉很慢)，同时yarn没有任何设置，但是执行命令也是走的代理，挺奇怪的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> proxy http://127.0.0.1:10809</span><br><span class="line">npm config <span class="built_in">set</span> https-proxy http://127.0.0.1:10809</span><br><span class="line">// 第二句不设置也行，暂时没出问题，但是还是设置上为好</span><br><span class="line">// 而且要配置,不然sudo执行命令的适合，不会使用代理</span><br><span class="line">sudo npm config <span class="built_in">set</span> proxy http://127.0.0.1:10809</span><br><span class="line">sudo npm config <span class="built_in">set</span> https-proxy http://127.0.0.1:10809</span><br><span class="line">// 删除代理</span><br><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br><span class="line">// 同理sudo也要删除一遍</span><br></pre></td></tr></table></figure></p><p>linux | ubuntu <a href="https://zhuanlan.zhihu.com/p/58690128" target="_blank" rel="noopener">设置全局代理</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改shell配置文件 ~/.bashrc ~/.zshrc等</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=socks5://127.0.0.1:1024</span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="variable">$http_proxy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置setproxy和unsetproxy 可以快捷的开关</span></span><br><span class="line"><span class="comment"># 需要时先输入命令 setproxy</span></span><br><span class="line"><span class="comment"># 不需要时输入命令 unsetproxy</span></span><br><span class="line"><span class="built_in">alias</span> setproxy=<span class="string">"export http_proxy=socks5://127.0.0.1:1024; export https_proxy=<span class="variable">$http_proxy</span>; echo 'HTTP Proxy on';"</span></span><br><span class="line"><span class="built_in">alias</span> unsetproxy=<span class="string">"unset http_proxy; unset https_proxy; echo 'HTTP Proxy off';"</span></span><br><span class="line"><span class="comment"># 设置快捷开关这个倒是不错的想法，不过目前没有应用场景，用上倒是可以借鉴</span></span><br></pre></td></tr></table></figure><p>nvm因为不能sudo执行，安装的node也不能用sudo命令访问，要通过软链接才行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $NVM_DIR 这些常量是.nvm的目录，后面的$(nvm version)，版本号，挺讨巧的</span></span><br><span class="line">sudo ln -s <span class="string">"<span class="variable">$NVM_DIR</span>/versions/node/<span class="variable">$(nvm version)</span>/bin/node"</span> <span class="string">"/usr/local/bin/node"</span></span><br><span class="line">sudo ln -s <span class="string">"<span class="variable">$NVM_DIR</span>/versions/node/<span class="variable">$(nvm version)</span>/bin/npm"</span> <span class="string">"/usr/local/bin/npm"</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u014789266/article/details/76571763" target="_blank" rel="noopener">sudo时无法使用代理</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在/etc/sudoers中，env_reset下添加</span></span><br><span class="line">Defaults env_keep=<span class="string">"http_proxy https_proxy ftp_proxy no_proxy</span></span><br></pre></td></tr></table></figure><p>上次看的是jest测试，还是结合react的测试更有趣，让我知道了用处</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; render, fireEvent &#125; <span class="keyword">from</span> <span class="string">'@testing-library/react'</span></span><br><span class="line"><span class="keyword">import</span> Button, &#123; ButtonProps, ButtonSize, ButtonType&#125;  <span class="keyword">from</span> <span class="string">'./button'</span></span><br><span class="line"><span class="comment">// jest.fn() 创建出一个被监控的模拟函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultProps = &#123;</span><br><span class="line">  onClick: jest.fn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里用 ButtonProps 是因为会有代码提示，判断什么类型很方便</span></span><br><span class="line"><span class="keyword">const</span> testProps: ButtonProps = &#123;</span><br><span class="line">  btnType: ButtonType.Primary,</span><br><span class="line">  size: ButtonSize.Large,</span><br><span class="line">  className: <span class="string">'names'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> disabledProps: ButtonProps = &#123;</span><br><span class="line">  disabled: <span class="literal">true</span>,</span><br><span class="line">  onClick: jest.fn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分类测试</span></span><br><span class="line">describe(<span class="string">'test Button component'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// test 简写也可以是it</span></span><br><span class="line">  it(<span class="string">'should render the correct default button'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = render(&lt;Button &#123;...defaultProps&#125;&gt;Nice&lt;<span class="regexp">/Button&gt;)</span></span><br><span class="line"><span class="regexp">    const element = wrapper.getByText('Nice') /</span><span class="regexp">/测试文本</span></span><br><span class="line"><span class="regexp">    expect(element).toBeInTheDocument() /</span><span class="regexp">/判断组件是否在文档中</span></span><br><span class="line"><span class="regexp">    expect(element.tagName).toEqual('BUTTON') /</span><span class="regexp">/判断元素是否为BUTTON</span></span><br><span class="line"><span class="regexp">    expect(element).toHaveClass('btn btn-default') /</span><span class="regexp">/判断class 是否含有btn btn-default</span></span><br><span class="line"><span class="regexp">    fireEvent.click(element) /</span><span class="regexp">/ 模拟点击</span></span><br><span class="line"><span class="regexp">    expect(defaultProps.onClick).toHaveBeenCalled() /</span><span class="regexp">/ 判断是否处罚点击事件</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">  it('should render the correct component based on different props', () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    const wrapper = render(&lt;Button &#123;...testProps&#125;&gt;Nice&lt;/</span>Button&gt;)</span><br><span class="line">    <span class="keyword">const</span> element = wrapper.getByText(<span class="string">'Nice'</span>)</span><br><span class="line">    expect(element).toBeInTheDocument()</span><br><span class="line">    expect(element).toHaveClass(<span class="string">'btn-primary btn-lg names'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">'should render a link when btnType equals link and href is provided'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = render(&lt;Button btnType=&#123;ButtonType.Link&#125; href=<span class="string">"http//www.google.com"</span>&gt;Link&lt;<span class="regexp">/Button&gt;)</span></span><br><span class="line"><span class="regexp">    const element = wrapper.getByText('Link')</span></span><br><span class="line"><span class="regexp">    expect(element).toBeInTheDocument()</span></span><br><span class="line"><span class="regexp">    expect(element.tagName).toEqual('A')</span></span><br><span class="line"><span class="regexp">    expect(element).toHaveClass('btn btn-link')</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">  it('should render disabled button when disabled set to true', () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    const wrapper = render(&lt;Button &#123;...disabledProps&#125;&gt;Nice&lt;/</span>Button&gt;)</span><br><span class="line">    <span class="keyword">const</span> element = wrapper.getByText(<span class="string">'Nice'</span>) <span class="keyword">as</span> HTMLButtonElement <span class="comment">// 返回一个HTMLElement，但是我们要用到disabled，而且我们认为必返回Button，所以我们可以使用类型断言，把他变成一个button</span></span><br><span class="line">    expect(element).toBeInTheDocument()</span><br><span class="line">    expect(element.disabled).toBeTruthy()</span><br><span class="line">    fireEvent.click(element)</span><br><span class="line">    expect(disabledProps.onClick).not.toHaveBeenCalled() <span class="comment">// 因为是disabled属性，所以这里用到了not，表示没有被点击</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="插曲：批量更改文件名，shell脚本"><a href="#插曲：批量更改文件名，shell脚本" class="headerlink" title="插曲：批量更改文件名，shell脚本"></a>插曲：批量更改文件名，shell脚本</h2><p>文件结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">大秧歌</span><br><span class="line">  - 01.mkv</span><br><span class="line">    - 01.mkv.xls</span><br></pre></td></tr></table></figure><p>IDM/shell.sh:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for l in `ls 大秧歌`</span><br><span class="line">  do</span><br><span class="line">  mv 大秧歌/$l/`ls 大秧歌/$l` 大秧歌压缩/`ls 大秧歌/$l | sed 's/....$//' | sed 's/^/大秧歌./'`</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>优化代码:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">mkdrname='大秧歌'</span><br><span class="line"></span><br><span class="line">for l in `ls $mkdrname`</span><br><span class="line">  do</span><br><span class="line">  mv $mkdrname/$l/`ls $mkdrname/$l` $mkdrname压缩/`ls $mkdrname/$l | sed 's/....$//' | sed 's/^/'$mkdrname'./'`</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>如果是直接命令输出脚本，则要用echo关键字<br>比如大秧歌目录下执行命令如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> `ls`; <span class="keyword">do</span> mv <span class="variable">$s</span> `<span class="built_in">echo</span> <span class="variable">$s</span> | sed <span class="string">'s/^/大秧歌./'</span>`; <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>处理带有空格文件的时候会循环错误，一个文件有几个空格就循环几次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> folder <span class="keyword">in</span> `ls|tr <span class="string">" "</span> <span class="string">"?"</span>`</span><br><span class="line"> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># 如果所目录的情况</span></span><br><span class="line">  folder=<span class="variable">$&#123;folder//'?'/' '&#125;</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">cd</span> <span class="string">"<span class="variable">$folder</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 先把空格用特殊符号代替，然后替换即可。  使用cd时需要添加双引号</span></span><br></pre></td></tr></table></figure><blockquote><p>先把空格用特殊符号代替，然后替换即可。使用cd时需要添加双引号</p><p><a href="https://blog.csdn.net/dqswuyundong/article/details/7427467" target="_blank" rel="noopener">PS</a></p></blockquote><p>改进后</p><p>处理带有空格的文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> `ls|tr <span class="string">" "</span> <span class="string">"?"</span>`; <span class="keyword">do</span> mv <span class="string">"<span class="variable">$s</span>"</span> `<span class="built_in">echo</span> <span class="variable">$s</span> | sed <span class="string">'s/..$//'</span>`; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><blockquote><p>研究了半天，终于搞懂了</p></blockquote><hr><h2 id="图标Icon解决方案"><a href="#图标Icon解决方案" class="headerlink" title="图标Icon解决方案"></a>图标Icon解决方案</h2><p>font 字体已经过时</p><p>svg 可以采用</p><p><a href="https://fontawesome.com/icons?d=gallery&amp;m=free" target="_blank" rel="noopener">Font Awesome</a></p><p><a href="https://github.com/FortAwesome/react-fontawesome" target="_blank" rel="noopener">react-fontawesome</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; fas &#125; from &apos;@fortawesome/free-solid-svg-icons&apos;</span><br><span class="line">import &#123; library &#125; from &apos;@fortawesome/fontawesome-svg-core&apos;</span><br><span class="line">import &#123; FontAwesomeIcon &#125; from &apos;@fortawesome/react-fontawesome&apos;</span><br><span class="line">library.add(fas)</span><br><span class="line">// fas代表了引入所有图标，然后就可以很轻松的用字符串代替了</span><br><span class="line">&lt;FontAwesomeIcon icon=&apos;coffee&apos;/&gt;</span><br><span class="line">// 或者是这样</span><br><span class="line">import &#123; faCoffee &#125; from &apos;@fortawesome/free-solid-svg-icons&apos;</span><br><span class="line">&lt;FontAwesomeIcon icon=&apos;faCoffee&apos;/&gt;</span><br></pre></td></tr></table></figure><p><a href="https://sass-lang.com/documentation/at-rules/control/each" target="_blank" rel="noopener">Sass的each循环</a></p><p>创建一个<code>With Maps</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _variables.scss</span></span><br><span class="line"><span class="variable">$theme-colors</span>: </span><br><span class="line">(</span><br><span class="line">  <span class="string">"primary"</span>: <span class="variable">$primary</span>,</span><br><span class="line">  <span class="string">"secondary"</span>: <span class="variable">$secondary</span>,</span><br><span class="line">  <span class="string">"success"</span>: <span class="variable">$success</span>,</span><br><span class="line">  <span class="string">"info"</span>: <span class="variable">$info</span>,</span><br><span class="line">  <span class="string">"warning"</span>: <span class="variable">$warning</span>,</span><br><span class="line">  <span class="string">"danger"</span>: <span class="variable">$danger</span>,</span><br><span class="line">  <span class="string">"light"</span>: <span class="variable">$light</span>,</span><br><span class="line">  <span class="string">"dark"</span>: <span class="variable">$dark</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// Icon/_style.scss</span><br><span class="line">@each <span class="variable">$key</span>, <span class="variable">$val</span> in <span class="variable">$theme-colors</span> &#123;</span><br><span class="line">  .icon-#&#123;<span class="variable">$key</span>&#125; &#123;</span><br><span class="line">    color: <span class="variable">$val</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>React中制作动画</strong></p><p>动画间隙，这个东西具体叫什么忘记了，不过vue学过，忘了，行吧，不过这东西react的挺简单的</p><p><a href="https://reactjs.org/docs/faq-styling.html#can-i-do-animations-in-react" target="_blank" rel="noopener">官网插件推荐</a></p><p><a href="https://reactcommunity.org/react-transition-group/" target="_blank" rel="noopener">react-transition-group这个库用的最多</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-transition-group</span><br><span class="line">yarn add @types/react-transition-group </span><br><span class="line">这个typescript的插件官网没有介绍</span><br></pre></td></tr></table></figure><p>我人傻了，居然是classNames,我写成className 导致了子组件的className被替代，我还以为组件升级写法变了，研究半天，莫名其妙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;CSSTransition</span><br><span class="line">    in=&#123;menuOpen&#125;</span><br><span class="line">    timeout=&#123;300&#125;</span><br><span class="line">    classNames=&apos;zoom-in-top&apos; // 致命错误classNames 不是 className</span><br><span class="line">    appear</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;ul className=&#123;subMenuClasses&#125;&gt;&#123;childrenComponent&#125;&lt;/ul&gt;</span><br><span class="line">&lt;/CSSTransition&gt;</span><br></pre></td></tr></table></figure><p>莫名其妙的报错，findDomNode</p><p><a href="https://reactjs.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage" target="_blank" rel="noopener">React官方的解释，没看懂</a></p><p>react-transition-group的解决方法是4.4.0 换种写法</p><p>挺奇怪的，为什么官方不自己封装一下，肯定有其他用处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fucntion SubMenu ()&#123;</span><br><span class="line">const nodeRef = React.useRef(null)</span><br><span class="line">return (</span><br><span class="line">        &lt;CSSTransition nodeRef=&#123;nodeRef&#125;&gt;</span><br><span class="line">        &lt;div ref=&#123;nodeRef&#125;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/CSSTransition&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="storybook"><a href="#storybook" class="headerlink" title="storybook"></a>storybook</h2><p><a href="storybook.js.org">storybook.js.org</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx sb init</span><br><span class="line">安装不成功就换个节点。前面几次都没成功，换了个节点好了</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br><span class="line">查看变化，Q退出</span><br></pre></td></tr></table></figure><p>真是醉了，搞了半天的styorbook 的props显示问题，老师解决起来很麻烦，因为用的旧版本，新版本直接集成了，谁知道居然也这么麻烦，官方文档也没提，导出的时候不能<code>export default</code>导出，不然就会显示寥寥无几的<code>props</code>，直接导出组件就行了<code>export</code>,还有就是默认值的问题，如果用元组<code>enum</code>的话，就会导致默认值是一个变量，很不好理解，目前解决办法就是用<code>type</code>声明，不用元组就ok了</p><h2 id="自动完成input"><a href="#自动完成input" class="headerlink" title="自动完成input"></a>自动完成input</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 忽略值</span></span><br><span class="line">Omit&lt;InputHTMLAttributes&lt;HTMLElement&gt;, <span class="string">'size'</span>&gt;</span><br><span class="line"><span class="comment">// 目前用到的场景，继承的时候这个值和当前接口size冲突，必须改名或者这种解决</span></span><br><span class="line"><span class="comment">// omit删除inputHTMLAttributers中的size属性</span></span><br><span class="line"><span class="keyword">export</span> interface InputProps</span><br><span class="line">  extends Omit&lt;</span><br><span class="line">    React.InputHTMLAttributes&lt;HTMLElement&gt;,</span><br><span class="line">    <span class="string">'size'</span></span><br><span class="line">  &gt; &#123;</span><br><span class="line">  disabled?: boolean</span><br><span class="line">  size?: <span class="string">'lg'</span> | <span class="string">'sm'</span></span><br><span class="line">  icon?: IconName</span><br><span class="line">  prefixs?: string | React.ReactElement</span><br><span class="line">  append?: string | React.ReactElement</span><br><span class="line">  theme?: ThemeProps</span><br><span class="line">&#125;</span><br><span class="line">因为size属性和input默认属性冲突，所以这里要忽略</span><br></pre></td></tr></table></figure><p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noopener">Omit&lt;&gt;</a></p><p><strong>input 表单，优化</strong> 课程9-3节，对应文件路径src/components/Input/*.tsx</p><p><code>onChange</code>如果是input表单上面用，会导致<code>e</code>参数是HTMLElement类型，自己增加一个类型检测就行了</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// input.tsx</span></span><br><span class="line"><span class="keyword">export</span> interface InputProps extends Omit&lt;React.InputHTMLAttributes&lt;HTMLElement&gt;, <span class="string">'size'</span>&gt; &#123;</span><br><span class="line">    onChange?: <span class="function">(<span class="params">e: React.changeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>受控组件 <a href="https://reactjs.org/docs/forms.html#controlled-components" target="_blank" rel="noopener">Controlled Components</a> </p><p>我的理解是有value，就是受控组件，defaultValue就是非受控组件</p><p>如果自己写的组件让别人用，同时输入以上两个参数，就会报错，所以我们必须优化代码，其实我觉得没必要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// input.stories.tsx</span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line">export const Input: React.FC&lt;InputProps&gt; = (props) =&gt; &#123;</span><br><span class="line">const &#123;...restProps&#125; = props</span><br><span class="line">    if (&apos;value&apos; in props) &#123; // 如果有value这个值</span><br><span class="line">        delete restProps.defaultValue // 就删除defaultValue</span><br><span class="line">    &#125;</span><br><span class="line">    return &lt;&gt;&lt;input &#123;...restProps&#125;&gt;&lt;/&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用的时候state传入参数为<code>undefined</code>或者<code>null</code>也会上述报错，<code>undefined</code></p><p>被识别为非受控组件</p><p>使用：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// input.stories.tsx</span></span><br><span class="line"><span class="keyword">const</span> inputTemplate: Story&lt;InputProps&gt; = <span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [value, setValue] = useState() <span class="comment">//如果这里是空，参数类型就会变成`undefined`</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    &lt;Input &#123;...args&#125; value=&#123;value&#125; onChange=&#123;e =&gt; setValue(e.target.value)&#125; /&gt; <span class="comment">// 这样赋值就会报错，因为value类型是undefind，而e.target.value类型是string, 其二 页面改变input值也会warning非受控组件被修改问题</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// input.tsx</span><br><span class="line">const valueDefault = (value: any) =&gt;  &#123;</span><br><span class="line">    if (value === &apos;undefined&apos; || value === null) &#123;</span><br><span class="line">        return &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    return value</span><br><span class="line">&#125;</span><br><span class="line">if(&apos;value&apos; in props) &#123;</span><br><span class="line">    delete restProps.defaultValue </span><br><span class="line">    restProps.value = valueDefalt(restProps.value) //主要代码是这里</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试的一个小bug"><a href="#测试的一个小bug" class="headerlink" title="测试的一个小bug"></a>测试的一个小bug</h2><p>menu.test.tsx中94行<em>expect(wrapper.queryByText(‘drop1’)).not.toBeVisible()</em>报错，理所应当，因为必须要鼠标事件才会显示，以前不知道为什么没发现，写完没测试？？不应该啊</p><p>后面还有一个报错<a href="https://github.com/testing-library/dom-testing-library/issues/477#" target="_blank" rel="noopener"><br>waitFor error “MutationObserver is not a constructor” with latest version</a> 这个原因是jsdom依赖的jest版本低，可以用一个很麻烦的方法解决，另一个就是更新react-scripts，和jest来解决，我用的第二种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yarn upgrade react-script@^</span><br><span class="line">- 4.0.1  <span class="comment"># 目前的最新版,此版本依赖jest 26.6.0</span></span><br><span class="line">yarn upgrade jest@^</span><br><span class="line">- 26.6.0</span><br><span class="line">查看版本以及依赖，npm ls jsdom</span><br><span class="line"></span><br><span class="line">// 上面这种更新用法，会导致package不更新，遗留问题？，我好像遇到了，后面用，又消失了这个bug</span><br></pre></td></tr></table></figure><p>发现一个新写法，还挺好看+简洁源文件写法：src\components\Input\input.tsx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const cnames = classNames(&apos;viking-input-wrapper&apos;, &#123;</span><br><span class="line">  [`input-size-$&#123;size&#125;`]: size,</span><br><span class="line">  &apos;is-disabled&apos;: disabled,</span><br><span class="line">  &apos;input-group&apos;: prepend || append,</span><br><span class="line">  &apos;input-group-append&apos;: !!append,</span><br><span class="line">  &apos;input-group-prepend&apos;: !!prepend</span><br><span class="line">&#125;)</span><br><span class="line">// !!双感叹号，是因为append是string类型，一个感叹号变为布尔值，另一个感叹号变为真正的true还是false，有点绕口，不知道该怎么解释。</span><br></pre></td></tr></table></figure><hr><blockquote><p>这里是另一个ts教程笔记，弃用</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i typescript -g</span><br><span class="line">tsc -V</span><br></pre></td></tr></table></figure><h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><p>布尔值<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>数字<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>字符串<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">'bob'</span></span><br><span class="line">name = <span class="string">'smith'</span></span><br></pre></td></tr></table></figure></p><p>数组<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这两种写法等价</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><p>元组 Tuple<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>]</span><br><span class="line">x= [<span class="string">'hello'</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure></p><p>枚举<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;</span><br><span class="line">  Red,</span><br><span class="line">  Green,</span><br><span class="line">  Blue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let c: Color = Color[2]</span></span><br><span class="line"><span class="keyword">let</span> c: <span class="built_in">string</span> = Color[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c)</span><br></pre></td></tr></table></figure></p><p>any<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">4</span></span><br><span class="line">notSure = <span class="string">'maybe a string instead'</span></span><br><span class="line">notSure = <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">'free'</span>]</span><br><span class="line">list[<span class="number">1</span>] = <span class="number">100</span></span><br></pre></td></tr></table></figure><p>void</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123; <span class="comment">//没有返回值的函数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'This i my waring message'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>null 和 undefined<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure></p><p>never 永远不存在<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> error(<span class="string">'something faild'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>object<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">o: object | <span class="literal">null</span></span>) : <span class="title">void</span></span>;</span><br><span class="line"><span class="comment">//原始类型 非原始类型</span></span><br><span class="line">create(o: &#123;prop: <span class="number">0</span>&#125;)</span><br><span class="line">create(o: <span class="literal">null</span>)</span><br><span class="line"><span class="comment">//基础类型 不行</span></span><br><span class="line">create(o: <span class="number">42</span>)</span><br><span class="line">create(o: <span class="string">'string'</span>)</span><br><span class="line">create(o: <span class="literal">false</span>)</span><br><span class="line">create(o: <span class="literal">undefined</span>)</span><br></pre></td></tr></table></figure></p><p>类型断言<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">'string'</span></span><br><span class="line"><span class="comment">// let strLength: number = (&lt;string&gt;someValue).length</span></span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length</span><br></pre></td></tr></table></figure></p><hr><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">3</span></span><br><span class="line">num = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>编译<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsc greeter.ts // 这么是不会报错的</span><br><span class="line">tsc greeter.ts --strictNullChecks //这么编译就会出错，就要用到联合类型，就不会报错了</span><br></pre></td></tr></table></figure></p><p>联合类型<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> | <span class="literal">null</span> = <span class="number">3</span></span><br><span class="line">num = <span class="literal">null</span></span><br></pre></td></tr></table></figure></p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Square &#123;</span><br><span class="line">  color: <span class="built_in">string</span></span><br><span class="line">  area: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可选参数<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">  color: <span class="built_in">string</span></span><br><span class="line">  width?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整实例<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Square &#123;</span><br><span class="line">  color: <span class="built_in">string</span></span><br><span class="line">  area: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">  color?: <span class="built_in">string</span></span><br><span class="line">  width?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquear</span>(<span class="params">config: SquareConfig</span>): <span class="title">Square</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newSquear = &#123; color: <span class="string">'white'</span>, area: <span class="number">100</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.color) &#123;</span><br><span class="line">    newSquear.color = config.color</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.width) &#123;</span><br><span class="line">    newSquear.area = config.width</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSquear</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(createSquear(&#123;color: <span class="string">'red'</span>&#125;))</span><br></pre></td></tr></table></figure></p><p>只读属性,创建完成之后就不能再改变了<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">  readonly x: <span class="built_in">number</span></span><br><span class="line">  readonly y: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1: Point = &#123; x: <span class="number">10</span>, y: <span class="number">20</span> &#125;</span><br><span class="line"></span><br><span class="line">p1.x = <span class="number">2</span> <span class="comment">// 报错，尝试对一个只读属性修改</span></span><br></pre></td></tr></table></figure></p><p>泛型只读数组<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> ro: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = a</span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">12</span> <span class="comment">// 编译报错</span></span><br><span class="line">a = ro <span class="keyword">as</span> <span class="built_in">number</span>[] <span class="comment">// 这样可以，类型断言</span></span><br></pre></td></tr></table></figure></p><p>额外属性检查<br>索引签名<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这段代码要和上面的完整实例结合使用</span></span><br><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">  color?: <span class="built_in">string</span></span><br><span class="line">  width?: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">any</span> <span class="comment">// 索引签名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(createSquear(&#123;color: <span class="string">'red'</span>, colorus: <span class="string">'names'</span>&#125;))</span><br></pre></td></tr></table></figure></p><p>函数类型接口<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">  (source: <span class="built_in">string</span>, subString: <span class="built_in">string</span>): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span> (<span class="params">src, sub</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = src.search(sub)</span><br><span class="line">  <span class="keyword">return</span> result &gt; <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用接口实现</span></span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span> (<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = src.search(sub)</span><br><span class="line">  <span class="keyword">return</span> result &gt; <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>索引签名<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray: StringArray</span><br><span class="line"></span><br><span class="line">myArray = [<span class="string">'Bob'</span>, <span class="string">'Fred'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myStr: <span class="built_in">string</span> = myArray[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><h1 id="遇到的问题，搞不懂，先记录下来"><a href="#遇到的问题，搞不懂，先记录下来" class="headerlink" title="遇到的问题，搞不懂，先记录下来"></a>遇到的问题，搞不懂，先记录下来</h1><p>同时拥有string和number类型的索引签名，number索引返回值必须是string索引返回的子类型，因为当用一个数字索引时，js实际会在索引到对象之前将其转换为字符串</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error: indexing with a numeric string might get you a completely separate type of Animal!</span></span><br><span class="line"><span class="keyword">interface</span> NotOkay &#123;</span><br><span class="line">  [x: <span class="built_in">number</span>]: Animal;</span><br><span class="line">Numeric index <span class="keyword">type</span> <span class="string">'Animal'</span> is not assignable to <span class="built_in">string</span> index <span class="keyword">type</span> <span class="string">'Dog'</span>.</span><br><span class="line">  [x: <span class="built_in">string</span>]: Dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TypeScript 学习&lt;br&gt;&lt;a href=&quot;https://github.com/DemoorBug/Typescript-axios&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;库地址&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="demoorbug.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="TypeScript" scheme="demoorbug.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>React-learn</title>
    <link href="demoorbug.github.io/2019/06/04/React-learn/"/>
    <id>demoorbug.github.io/2019/06/04/React-learn/</id>
    <published>2019-06-04T14:52:20.000Z</published>
    <updated>2022-03-15T22:58:15.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React学习笔记"><a href="#React学习笔记" class="headerlink" title="React学习笔记"></a>React学习笔记</h1><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React学习笔记&quot;&gt;&lt;a href=&quot;#React学习笔记&quot; class=&quot;headerlink&quot; title=&quot;React学习笔记&quot;&gt;&lt;/a&gt;React学习笔记&lt;/h1&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="demoorbug.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="React" scheme="demoorbug.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据解构初识</title>
    <link href="demoorbug.github.io/2019/05/26/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%84%E5%88%9D%E8%AF%86/"/>
    <id>demoorbug.github.io/2019/05/26/算法与数据解构初识/</id>
    <published>2019-05-26T11:22:57.000Z</published>
    <updated>2022-03-15T22:58:15.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法与数据解构初始"><a href="#算法与数据解构初始" class="headerlink" title="算法与数据解构初始"></a>算法与数据解构初始</h1><p>jest 做测试，一些简单的测试，原因是有大量的js代码，如果逐个复制到浏览器，操作麻烦，而且不方便，测试可以提供工作效率<br><a id="more"></a><br>字符串，数组，正则都属于基本类型，排序，递归属于常见的算法，这个顺序是由简单到难的一个顺序</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;算法与数据解构初始&quot;&gt;&lt;a href=&quot;#算法与数据解构初始&quot; class=&quot;headerlink&quot; title=&quot;算法与数据解构初始&quot;&gt;&lt;/a&gt;算法与数据解构初始&lt;/h1&gt;&lt;p&gt;jest 做测试，一些简单的测试，原因是有大量的js代码，如果逐个复制到浏览器，操作麻烦，而且不方便，测试可以提供工作效率&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="demoorbug.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="javascript" scheme="demoorbug.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 协议</title>
    <link href="demoorbug.github.io/2019/05/18/HTTP-%E5%8D%8F%E8%AE%AE/"/>
    <id>demoorbug.github.io/2019/05/18/HTTP-协议/</id>
    <published>2019-05-18T08:12:59.000Z</published>
    <updated>2022-03-15T22:58:15.959Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>get 获取数据<br>post 创建数据<br>put 更新数据<br>delete 删除<br>应该这么做，实际上不按照方法去实现，<br>语义存在的意义，就是希望别人用的时候，一眼就看有看出来干什么的， </p><h1 id="HTTP-CODE"><a href="#HTTP-CODE" class="headerlink" title="HTTP CODE"></a>HTTP CODE</h1><p>100-199之间代表操作要持续进行，接下来要做一些其他事情才会返回给你<br>200-299 代表操作成功<br>300-399 代表操作重定向，有别的方式获取数据<br>400-499 发送请求有问题，401发送请求的时候没有认证，没有权限获取资源的内容<br>500-599 服务器出现问题</p><h1 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h1><p>curl -v <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;get 获取数据&lt;br&gt;post 创建数据&lt;br&gt;put 更新数据&lt;br&gt;delete 删除&lt;br&gt;应该这么做，实际上不按照方法去实现，&lt;br&gt;语义存在的意义，就是希望别人用的时候，一眼就看有看出来干什么的， &lt;/p&gt;
&lt;h1 id=&quot;H
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>koa2 + vue2.5 + mongodb 开发记录</title>
    <link href="demoorbug.github.io/2019/05/06/koa2-vue2-5-mongodb-%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>demoorbug.github.io/2019/05/06/koa2-vue2-5-mongodb-开发记录/</id>
    <published>2019-05-05T18:12:05.000Z</published>
    <updated>2022-03-15T22:58:15.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后端环境搭建"><a href="#后端环境搭建" class="headerlink" title="后端环境搭建"></a>后端环境搭建</h1><h2 id="node使用import语法"><a href="#node使用import语法" class="headerlink" title="node使用import语法"></a>node使用import语法</h2><p>@vue/cli 耦合，他会使用<code>babel.config.js</code>，而不会使用<code>.babelrc</code>，而且在<code>babel.config.js</code> 中配置会报错，所以要package.json 里面这样写<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">script: &#123;</span><br><span class="line">  <span class="string">"start-koa"</span>: <span class="string">"nodemon --exec babel-node server/index.js --config-file ./.babelrc"</span>,</span><br><span class="line">  <span class="string">"build-koa"</span>: <span class="string">"babel src --out-dir dist"</span>,</span><br><span class="line">  <span class="string">"serve-koa"</span>: <span class="string">"node dist/server.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>–config-file [path] 指定配置文件<br>要安装的包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@babel/cli</span><br><span class="line">@babel/core</span><br><span class="line">@babel/node          //新版本抽离出来了</span><br><span class="line">@babel/preset-env    </span><br><span class="line">nodemon</span><br></pre></td></tr></table></figure></p><p>.babelrc<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"@babel/preset-env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;后端环境搭建&quot;&gt;&lt;a href=&quot;#后端环境搭建&quot; class=&quot;headerlink&quot; title=&quot;后端环境搭建&quot;&gt;&lt;/a&gt;后端环境搭建&lt;/h1&gt;&lt;h2 id=&quot;node使用import语法&quot;&gt;&lt;a href=&quot;#node使用import语法&quot; class=&quot;headerlink&quot; title=&quot;node使用import语法&quot;&gt;&lt;/a&gt;node使用import语法&lt;/h2&gt;&lt;p&gt;@vue/cli 耦合，他会使用&lt;code&gt;babel.config.js&lt;/code&gt;，而不会使用&lt;code&gt;.babelrc&lt;/code&gt;，而且在&lt;code&gt;babel.config.js&lt;/code&gt; 中配置会报错，所以要package.json 里面这样写&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;script: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;start-koa&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;nodemon --exec babel-node server/index.js --config-file ./.babelrc&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;build-koa&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;babel src --out-dir dist&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;serve-koa&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;node dist/server.js&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试问题</title>
    <link href="demoorbug.github.io/2019/04/19/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
    <id>demoorbug.github.io/2019/04/19/面试问题/</id>
    <published>2019-04-19T15:38:13.000Z</published>
    <updated>2022-03-15T22:58:15.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录一些学习过程中遇到的面试问题"><a href="#记录一些学习过程中遇到的面试问题" class="headerlink" title="记录一些学习过程中遇到的面试问题"></a>记录一些学习过程中遇到的面试问题</h1><a id="more"></a><h1 id="暂存死区"><a href="#暂存死区" class="headerlink" title="暂存死区"></a>暂存死区</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> monkey = <span class="string">'我是美猴王'</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(monkey); <span class="comment">//按道理应该取外面的let，但是输出'monkey is not defined'</span></span><br><span class="line">  <span class="keyword">let</span> monkey = <span class="string">'我觉得还能抢救一下'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(monkey);</span><br></pre></td></tr></table></figure><p>ES6中规定，如果块级作用域中存在let，const声明的变量，这个变量一开始就会形成一个封闭的作用域，即使向上的作用域中存在同名的变量，也是拿不到的</p><h1 id="生成十给按钮，每个按点击的时候弹出-1-10"><a href="#生成十给按钮，每个按点击的时候弹出-1-10" class="headerlink" title="生成十给按钮，每个按点击的时候弹出 1-10"></a>生成十给按钮，每个按点击的时候弹出 1-10</h1><p>ES5<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">    btn.innerText = i;</span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(i)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(btn);</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ES6<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">  btn.innerText = i;</span><br><span class="line">  btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(i)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(btn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记录一些学习过程中遇到的面试问题&quot;&gt;&lt;a href=&quot;#记录一些学习过程中遇到的面试问题&quot; class=&quot;headerlink&quot; title=&quot;记录一些学习过程中遇到的面试问题&quot;&gt;&lt;/a&gt;记录一些学习过程中遇到的面试问题&lt;/h1&gt;
    
    </summary>
    
      <category term="面试" scheme="demoorbug.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="node" scheme="demoorbug.github.io/tags/node/"/>
    
      <category term="js" scheme="demoorbug.github.io/tags/js/"/>
    
      <category term="html" scheme="demoorbug.github.io/tags/html/"/>
    
      <category term="css" scheme="demoorbug.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>移动webapp</title>
    <link href="demoorbug.github.io/2019/04/12/%E7%A7%BB%E5%8A%A8webapp/"/>
    <id>demoorbug.github.io/2019/04/12/移动webapp/</id>
    <published>2019-04-12T10:47:45.000Z</published>
    <updated>2022-03-15T22:58:15.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动webapp开发"><a href="#移动webapp开发" class="headerlink" title="移动webapp开发"></a>移动webapp开发</h1><a id="more"></a><h1 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h1><h2 id="viewport-标签的介绍"><a href="#viewport-标签的介绍" class="headerlink" title="viewport 标签的介绍"></a>viewport 标签的介绍</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mate</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>width=device-width 视口宽，自适应<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mate</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"height"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>很少用height，基本不用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mate</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>initial-scale=1 缩放比<br>相当于设置width=device-width，但是用的时候都得写，因为个浏览器有bug<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mate</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>不允许用户缩放<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mate</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"maximum-scale=1, minimum-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最大缩放比，和最小缩放比</p><p>标准写法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, user-scalable=no, maximum-scale=1, minimum-scale=1"</span>&gt;</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><h2 id="获取视口宽度"><a href="#获取视口宽度" class="headerlink" title="获取视口宽度"></a>获取视口宽度</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.innerWidth);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.documentElement.clientWidth);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.documentElement.getBoundingClientRect().width);</span><br><span class="line"><span class="comment">// 兼容个浏览器写法</span></span><br><span class="line"><span class="keyword">var</span> width = <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">window</span>.innerWidth</span><br><span class="line"><span class="comment">// dpr</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.devicePixelRatio);</span><br></pre></td></tr></table></figure><h1 id="Flex-布局，弹性布局"><a href="#Flex-布局，弹性布局" class="headerlink" title="Flex 布局，弹性布局"></a>Flex 布局，弹性布局</h1><p>这个box就为flex的container容器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex | inline-flex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="flex布局属性"><a href="#flex布局属性" class="headerlink" title="flex布局属性"></a>flex布局属性</h2><h3 id="flex-direction-决定主轴方向"><a href="#flex-direction-决定主轴方向" class="headerlink" title="flex-direction 决定主轴方向"></a><code>flex-direction</code> 决定主轴方向</h3><p><code>row</code>: 默认值<br><code>row-reverse</code>: 主轴为水平方向，起点在右端<br><code>column</code>: 主轴水平方向变为垂直方向，起点在上<br><code>column-reverse</code>: 主轴为垂直方向，起点在下</p><h3 id="flex-wrap-换行"><a href="#flex-wrap-换行" class="headerlink" title="flex-wrap 换行"></a><code>flex-wrap</code> 换行</h3><p>一条轴线排不下，是否换行<br><code>nowrap</code>: 不换行，默认值<br><code>wrap</code>: 换行<br><code>wrap-reverse</code>: 相反换行</p><h3 id="flex-flow-简写，上面两种属性的简写"><a href="#flex-flow-简写，上面两种属性的简写" class="headerlink" title="flex-flow 简写，上面两种属性的简写"></a><code>flex-flow</code> 简写，上面两种属性的简写</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  flex-flow: row nowrap; //默认值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="justify-content-属性定义了项目在主轴上的对齐方式-常用"><a href="#justify-content-属性定义了项目在主轴上的对齐方式-常用" class="headerlink" title="justify-content 属性定义了项目在主轴上的对齐方式   常用"></a><code>justify-content</code> 属性定义了项目在主轴上的对齐方式   常用</h3><p><code>flex-start</code>: 默认值<br><code>flex-end</code>: 右对齐<br><code>center</code>: 居中<br><code>space-between</code>: 两端对齐<br><code>space-around</code>: 每个项目两侧间隔相等</p><h3 id="align-items-交叉轴对齐方式"><a href="#align-items-交叉轴对齐方式" class="headerlink" title="align-items 交叉轴对齐方式"></a><code>align-items</code> 交叉轴对齐方式</h3><p><code>flex-start</code>: 不是默认值<br><code>flex-end</code>: 交叉轴终点对其<br><code>center</code>: 中点对齐<br><code>baseline</code>: 项目的第一行文字的基线对其<br><code>stretch</code>: 默认值，项目未设置高度或设为auto，将沾满整个容器的高度</p><h3 id="align-content-多根轴线对齐方式-多行-，如果项目只有一根轴线，则不起作用"><a href="#align-content-多根轴线对齐方式-多行-，如果项目只有一根轴线，则不起作用" class="headerlink" title="align-content 多根轴线对齐方式(多行)，如果项目只有一根轴线，则不起作用"></a><code>align-content</code> 多根轴线对齐方式(多行)，如果项目只有一根轴线，则不起作用</h3><p>属性值和<code>justify-content</code>一致, 默认值为<code>stretch</code></p><h2 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2><p>###　<code>order</code> 属性定义项目的排列顺序，数值越小，排列越靠前，默认为0<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="flex-grow-默认值为0，类似于，栅格系统，不过更灵活"><a href="#flex-grow-默认值为0，类似于，栅格系统，不过更灵活" class="headerlink" title="flex-grow 默认值为0，类似于，栅格系统，不过更灵活"></a><code>flex-grow</code> 默认值为0，类似于，栅格系统，不过更灵活</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  flex-grow: 2;  //2的值就占用项目.item-1的二倍</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有固定宽度，则减去这个固定宽度，等分其他空间<br>如果两个值都为1，则总共有两份，大家都占用了2/1空间，</p><h3 id="flex-shrink-默认值为1，属性定位缩小比例，和flex-grow是相反的"><a href="#flex-shrink-默认值为1，属性定位缩小比例，和flex-grow是相反的" class="headerlink" title="flex-shrink 默认值为1，属性定位缩小比例，和flex-grow是相反的"></a><code>flex-shrink</code> 默认值为1，属性定位缩小比例，和<code>flex-grow</code>是相反的</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  flex-shrink: 0; //不缩放该项目</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex-basis-默认值为auto-项目占据的主轴空间，如果有width属性，就会覆盖width属性-浏览器根据这个属性，计算主轴是否有多余空间"><a href="#flex-basis-默认值为auto-项目占据的主轴空间，如果有width属性，就会覆盖width属性-浏览器根据这个属性，计算主轴是否有多余空间" class="headerlink" title="flex-basis 默认值为auto,项目占据的主轴空间，如果有width属性，就会覆盖width属性, 浏览器根据这个属性，计算主轴是否有多余空间"></a><code>flex-basis</code> 默认值为auto,项目占据的主轴空间，如果有width属性，就会覆盖width属性, 浏览器根据这个属性，计算主轴是否有多余空间</h3><h3 id="flex-是前面3给的简写，不算order"><a href="#flex-是前面3给的简写，不算order" class="headerlink" title="flex 是前面3给的简写，不算order"></a><code>flex</code> 是前面3给的简写，不算<code>order</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  flex: 1; //相当于flex: 1 1 auto; 相当于 flex: auto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="align-self-默认auto-表示继承align-items-可覆盖align-items-如果没有父元素，则等同于stretch"><a href="#align-self-默认auto-表示继承align-items-可覆盖align-items-如果没有父元素，则等同于stretch" class="headerlink" title="align-self 默认auto, 表示继承align-items, 可覆盖align-items, 如果没有父元素，则等同于stretch"></a><code>align-self</code> 默认auto, 表示继承align-items, 可覆盖align-items, 如果没有父元素，则等同于stretch</h3><p>属性都可以借鉴<code>align-items</code></p><h1 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">900px</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>screen</code> 屏幕类型，除了屏幕打印设备和阅读设备</p><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>all(default)<br>screen / print(打印预览，可以做简历) /speech(阅读设备，残障人士使用)<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> all and (min-width=<span class="number">900px</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></p><p><code>all</code>因为是默认值，可以不写<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> (min-width=<span class="number">900px</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="媒体查询中的逻辑"><a href="#媒体查询中的逻辑" class="headerlink" title="媒体查询中的逻辑"></a>媒体查询中的逻辑</h2><p>与(and)<br>或(,)<br>非(not)</p><p>或写法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width=<span class="number">1024px</span>), (max-width:<span class="number">900px</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>值得注意的是，或(,)之后的算是个体，也就是说，我们使用了默认值all的写法</p><p>非写法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> not screen and (min-width=<span class="number">1024px</span>), (max-width:<span class="number">900px</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>同理，只是前半段，或之后算一个整体</p><h2 id="媒体特征表达"><a href="#媒体特征表达" class="headerlink" title="媒体特征表达"></a>媒体特征表达</h2><p><code>max-width, min-width, width</code><br>设备像素比<br>dpr<br><code>-webkit-device-pixel-ratio: 2,-webkit-max-device-pixel-ratio: 2,-webkit-min-device-pixel-ratio: 2</code></p><p><code>orientation</code><br>有两个值：<code>landscape</code> 横屏(宽比高大)，<code>portrait</code> 竖屏<br>后面还有值，几乎不用，了解即可，这里就没有记录，要看的就是3-19 媒体查询-基础(2).vep</p><h2 id="媒体查询策略"><a href="#媒体查询策略" class="headerlink" title="媒体查询策略"></a>媒体查询策略</h2><p>设置断点<br>xs: &lt; 576px<br>sm: 576px ~ 768px<br>md: 768px ~ 992px<br>lg: 992px ~ 1200px<br>xl: &gt; 1200px</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@<span class="keyword">medio</span> screen and (max-width=<span class="number">576px</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">medio</span> screen and (min-width=<span class="number">577px</span>) and (max=<span class="number">768px</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">medio</span> screen and (min-width=<span class="number">769px</span>) and (max=<span class="number">992px</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">medio</span> screen and (min-width=<span class="number">993px</span>) and (max=<span class="number">1200px</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">medio</span> screen and (min-width=<span class="number">1201px</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="移动端单位问题"><a href="#移动端单位问题" class="headerlink" title="移动端单位问题"></a>移动端单位问题</h1><h2 id="em的技巧"><a href="#em的技巧" class="headerlink" title="em的技巧"></a>em的技巧</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.font</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  text-indent: 2em; //这个em就会继承当前元素字体的大小，也就是2个字节，很方便啊</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rem主流"><a href="#rem主流" class="headerlink" title="rem主流"></a>rem主流</h2><p>这么写，内容就可以根据宽度自适应变化，666，公式就是：<br>(当前页面宽度/375) * 20 这个比例，为什么是这个比例呢<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html &#123;</span></span><br><span class="line"><span class="undefined">      font-size: 20px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span>: 2<span class="selector-class">.5rem</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">height</span>: 2<span class="selector-class">.5rem</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-id">#222</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.documentElement.style.fontSize = (<span class="built_in">document</span>.documentElement.clientWidth / <span class="number">375</span>)* <span class="number">20</span> +<span class="string">'px'</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="响应开发，因为都懂，就记一些不懂的吧"><a href="#响应开发，因为都懂，就记一些不懂的吧" class="headerlink" title="响应开发，因为都懂，就记一些不懂的吧"></a>响应开发，因为都懂，就记一些不懂的吧</h1><h2 id="img图片的处理"><a href="#img图片的处理" class="headerlink" title="img图片的处理"></a>img图片的处理</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block; <span class="comment">/*因为默认是inline-block;*/</span></span><br><span class="line">  <span class="comment">/*但是这样解决会造，一行显示换行问题*/</span></span><br><span class="line">  <span class="comment">/*最优解决*/</span></span><br><span class="line">  <span class="attribute">vertical-align</span>: top; <span class="comment">/*这个属性居然没用过，而且所有浏览器都支持*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上选一即可</p><h1 id="通用适配"><a href="#通用适配" class="headerlink" title="通用适配"></a>通用适配</h1><p>设计稿750px为例<br>750px 1rem = 750 / 18.75 = 40<br>js动态去设置font-size<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// document.documentElement.getBoundingClientRect().width</span></span><br><span class="line"><span class="comment">// window.innerWidth</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="string">'use str'</span></span><br><span class="line">  setRemUnit()</span><br><span class="line">  <span class="built_in">window</span>.onresize = setRemUnit;</span><br><span class="line">  <span class="comment">// window.addEventListener('resize', setRemUnit); 都可以</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setRemUnit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement;</span><br><span class="line">    <span class="keyword">var</span> ratio = <span class="number">18.75</span>;</span><br><span class="line">    <span class="keyword">var</span> viewWidth = docEl.getBoundingClientRect().width || <span class="built_in">window</span>.innerWidth; <span class="comment">//兼容处理</span></span><br><span class="line">    docEl.style.fontSize = viewWidth / ratio + <span class="string">'px'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><h1 id="通用适配解决方案，解决1px边框显示过’粗’问题"><a href="#通用适配解决方案，解决1px边框显示过’粗’问题" class="headerlink" title="通用适配解决方案，解决1px边框显示过’粗’问题"></a>通用适配解决方案，解决1px边框显示过’粗’问题</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="string">'use str'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取dpr</span></span><br><span class="line">  <span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement,</span><br><span class="line">    viewportEl = <span class="built_in">document</span>.querySelector(<span class="string">'meta[name="viewport"]'</span>),</span><br><span class="line">    dpr = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span>,</span><br><span class="line">    maxWidth = <span class="number">540</span>,</span><br><span class="line">    minWidth = <span class="number">320</span>;</span><br><span class="line"></span><br><span class="line">  dpr = dpr &gt;= <span class="number">3</span> ? <span class="number">3</span> : (dpr &gt;= <span class="number">2</span> ? <span class="number">2</span> : <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  docEl.setAttribute(<span class="string">'data-dpr'</span>, dpr);<span class="comment">// 自己设置dpr，后面有用处</span></span><br><span class="line">  docEl.setAttribute(<span class="string">'max-width'</span>, maxWidth);</span><br><span class="line">  docEl.setAttribute(<span class="string">'min-width'</span>, minWidth);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> scale = <span class="number">1</span>/dpr,</span><br><span class="line">      content = <span class="string">'width=device-width, initial-scale='</span>+ scale +<span class="string">', maximum-scale='</span>+ scale +<span class="string">', minimum-scale='</span>+ scale +<span class="string">', user-scalable=no'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (viewportEl) &#123;</span><br><span class="line">    viewportEl.setAttribute(<span class="string">'content'</span>, content)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    viewportEl = <span class="built_in">document</span>.createElement(<span class="string">'meta'</span>);</span><br><span class="line">    viewportEl.setAttribute(<span class="string">'name'</span>, <span class="string">'viewport'</span>);</span><br><span class="line">    viewportEl.setAttribute(<span class="string">'content'</span>, content);</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(viewportEl)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  setRemUnit()</span><br><span class="line">  <span class="built_in">window</span>.onresize = setRemUnit;</span><br><span class="line">  <span class="comment">// window.addEventListener('resize', setRemUnit); 都可以</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setRemUnit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// var docEl = document.documentElement;</span></span><br><span class="line">    <span class="keyword">var</span> ratio = <span class="number">18.75</span>;</span><br><span class="line">    <span class="keyword">var</span> viewWidth = docEl.getBoundingClientRect().width || <span class="built_in">window</span>.innerWidth; <span class="comment">//兼容处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置最大最小值，页面过大后不设置fontSize</span></span><br><span class="line">    <span class="keyword">if</span> (maxWidth &amp;&amp; (viewWidth / dpr &gt; maxWidth)) &#123;</span><br><span class="line">      viewWidth = maxWidth * dpr;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxWidth &amp;&amp; (viewWidth / dpr &lt; minWidth))&#123;</span><br><span class="line">      viewWidth = minWidth * dpr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    docEl.style.fontSize = viewWidth / ratio + <span class="string">'px'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="移动端事件"><a href="#移动端事件" class="headerlink" title="移动端事件"></a>移动端事件</h1><p>触摸事件，手势事件，传感器事件，主要讲的是触摸事件，其他两个兼容性堪忧，而且手势事件也可以用触摸事件代替，传感器事件就是手机倾斜什么的，但是兼容性不ok</p><p>触摸事件可以非为两种：<br><code>touch</code> 事件，最早出现的，兼容性ok<br><code>pointer</code> 事件 ，这个是微软出的，比较友好，但是呢实现的厂商不多，兼容性不好，但是很有意义，把鼠标事件和触摸事件统一为指针事件，不论是pc端还是移动端，只用使用<code>pointer</code>事件就ok了</p><h2 id="touch-事件"><a href="#touch-事件" class="headerlink" title="touch 事件"></a>touch 事件</h2><p><code>ontouchstart</code>  触摸开始执行<br><code>ontouchmove</code>   移动执行<br><code>ontouchend</code>    触摸结束执行<br><code>ontouchcancel</code>  不常用，发生触摸中断的时候执行，当我们点击的时候，突然来电话，界面跳转，称之为触摸中断。系统级事件</p><p><code>document.ontouchstart = function () {}</code> 这种写法不推荐，如果要兼容IE8浏览器及一下，还是用这种</p><p><code>document.addEventListener(&#39;touchstart&#39;, function(){}, false)</code> 推荐写法，IE9及以上兼容。第三个参数表示冒泡，true表示捕获</p><h2 id="touch-事件event-对象"><a href="#touch-事件event-对象" class="headerlink" title="touch 事件event 对象"></a>touch 事件event 对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ev)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>以上对象属性含义:<br><code>altKey: false</code> 触摸的时候是否有按住alt键，手机哪来的alt键<br>以下三个和冒泡有关<br><code>bubbles: true</code>  目前是否是冒泡<br><code>cacelBubble: false</code> 目前是否取消冒泡<br><code>cancelable: true</code> 是否可以取消冒泡<br>以下就讲了一下主要用到的，其他就不讲了<br><code>type</code> 知道当前什么事件，和pc端事件一样<br><code>target</code> 当前元素，什么元素响应你的<br><code>changeTouches</code> 捕获发生变化的手指，触摸列表，类数组(没有数组的方法),一般情况下都使用这个，其中一个原因是<code>ontouchend</code>事件以下两种捕获不到东西<br><code>targetTouches</code> 捕获到物体上的手指<br><code>touches</code> 捕获到屏幕上所有手指头</p><p>常用<code>changeTouches</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> touch = ev.changeTouches[<span class="number">0</span>] <span class="comment">//一般都是单指</span></span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure></p><p><code>changeTouches</code>里面的属性：<br><code>clientX:</code> 可视区范围内的坐标<br><code>clientY:</code> 可视区范围内的坐标<br><code>pageX</code> 有滚动条的时候，也会把滚动条的距离算上，而不仅仅是可视区域<br><code>pageY</code><br><code>radiusX</code> 指头的触摸大小半径<br><code>radiusY</code></p><h2 id="这里讲到了拖动，我没有做，明天补上，今晚记一些技巧"><a href="#这里讲到了拖动，我没有做，明天补上，今晚记一些技巧" class="headerlink" title="这里讲到了拖动，我没有做，明天补上，今晚记一些技巧"></a>这里讲到了拖动，我没有做，明天补上，今晚记一些技巧</h2><p>chrome的a点击有个高亮，当时自己还是百度了好久，我晕<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-tap-highlight-color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有就是用transform的时候用translate3d，会开启设备的GPU加速<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.backtop</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(x, y, 0); <span class="comment">/*会开启GPU加速*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>补：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html &#123;</span></span><br><span class="line"><span class="undefined">      height: 2000px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.top</span> &#123;</span></span><br><span class="line"><span class="undefined">      height: 20px;</span></span><br><span class="line"><span class="undefined">      width: 20px;</span></span><br><span class="line"><span class="undefined">      position: fixed;</span></span><br><span class="line"><span class="undefined">      bottom: 20px;</span></span><br><span class="line"><span class="undefined">      right: 20px;</span></span><br><span class="line"><span class="undefined">      border-radius: 50%;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.3</span>);</span></span><br><span class="line"><span class="css">      <span class="comment">/*transition: all .3s;*/</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span> <span class="attr">id</span>=<span class="string">"top"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    122</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> topN = <span class="built_in">document</span>.getElementById(<span class="string">'top'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> coordinate = &#123;</span></span><br><span class="line"><span class="undefined">      pageX: 0,</span></span><br><span class="line"><span class="undefined">      pageY: 0</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> page = &#123;</span></span><br><span class="line"><span class="undefined">      pageX: 0,</span></span><br><span class="line"><span class="undefined">      pageY: 0</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> isTouchMove = <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    topN.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> changedTouches = ev.changedTouches[<span class="number">0</span>]</span></span><br><span class="line"><span class="undefined">      coordinate.pageX = changedTouches.pageX;</span></span><br><span class="line"><span class="undefined">      coordinate.pageY = changedTouches.pageY;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    topN.addEventListener(<span class="string">'touchmove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">      ev.preventDefault()</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      isTouchMove = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> changedTouches = ev.changedTouches[<span class="number">0</span>]</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> x = changedTouches.pageX - coordinate.pageX + page.pageX;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> y = changedTouches.pageY - coordinate.pageY + page.pageY;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      ev.target.style.transform = <span class="string">'translate3d('</span>+ x +<span class="string">'px,'</span>+ y +<span class="string">'px,0)'</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    topN.addEventListener(<span class="string">'touchend'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!isTouchMove) &#123;<span class="keyword">return</span>&#125;;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'touch'</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> changedTouches = ev.changedTouches[<span class="number">0</span>]</span></span><br><span class="line"><span class="undefined">      page.pageX += changedTouches.pageX - coordinate.pageX;</span></span><br><span class="line"><span class="undefined">      page.pageY += changedTouches.pageY - coordinate.pageY;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      isTouchMove = <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="移动端调试"><a href="#移动端调试" class="headerlink" title="移动端调试"></a>移动端调试</h1><h2 id="Vorlon-js"><a href="#Vorlon-js" class="headerlink" title="Vorlon.js"></a>Vorlon.js</h2><h2 id="多端同步工具Browsersync"><a href="#多端同步工具Browsersync" class="headerlink" title="多端同步工具Browsersync"></a>多端同步工具Browsersync</h2><h2 id="终端检测，navigator"><a href="#终端检测，navigator" class="headerlink" title="终端检测，navigator"></a>终端检测，navigator</h2><p>最好后端来做，但是前端也是可以做的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> isMobile = navigator.userAgent.match(<span class="regexp">/android|iphone|ipad|ipod/i</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isMobile) &#123;</span><br><span class="line">  location.href = <span class="string">'https://m.imooc.com'</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  location.href = <span class="string">'https://www.imooc.com'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以根据这段代码，加载各端自己的代码，比如响应式开发</p><h1 id="移动开发常见问题"><a href="#移动开发常见问题" class="headerlink" title="移动开发常见问题"></a>移动开发常见问题</h1><p>解决html5标签兼容问题引入<br><code>html5shiv.js</code></p><h2 id="css3-兼容问题"><a href="#css3-兼容问题" class="headerlink" title="css3 兼容问题"></a>css3 兼容问题</h2><p>用<code>modernizr.js</code> 这个库来兼容，写两套样式</p><h2 id="click-300毫秒延迟解决"><a href="#click-300毫秒延迟解决" class="headerlink" title="click 300毫秒延迟解决"></a>click 300毫秒延迟解决</h2><p>原因是手机端的double click双击造成的，<br>解决办法<code>fastclick</code>,很多浏览器已经解决就是给<code>viewport</code>添加<code>width=device-width</code></p><h2 id="文字溢出问题"><a href="#文字溢出问题" class="headerlink" title="文字溢出问题"></a>文字溢出问题</h2><p>普通解决方法不能配合<code>flex</code> 布局，必须给元素套一层<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.text-ellipsis</span> &#123;</span></span><br><span class="line"><span class="undefined">    overflow: hidden;</span></span><br><span class="line"><span class="undefined">    text-overflow: ellipsis;</span></span><br><span class="line"><span class="undefined">    white-space: normal;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.flex</span> &#123;</span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-ellipsis flex"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span> //套一层就好了</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>多行文字溢出问题解决<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.flex</span> &#123;</span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.multiline-ellipsis</span> &#123;</span></span><br><span class="line"><span class="undefined">    overflow: hidden;</span></span><br><span class="line"><span class="undefined">    text-overflow: ellipsis;</span></span><br><span class="line"><span class="undefined">    display: -webkit-box;</span></span><br><span class="line"><span class="undefined">    -webkit-line-clamp: 3; 这个就可以控制显示几行文字</span></span><br><span class="line"><span class="undefined">    -webkit-box-orient: vertical;</span></span><br><span class="line"><span class="undefined">    white-space: normal !important;</span></span><br><span class="line"><span class="undefined">    word-wrap: break-word;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"multiline-ellipsis flex"</span>&gt;</span></span><br><span class="line">  文字</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="javascript兼容"><a href="#javascript兼容" class="headerlink" title="javascript兼容"></a>javascript兼容</h2><p>做特性检测，不要做浏览器检测<br>这个是fastclick.js的特性检测做法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'addEventListener'</span> <span class="keyword">in</span> <span class="built_in">document</span>) &#123; <span class="comment">//这个是fastclick.js的特性检测做法</span></span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    FastClick.attach(<span class="built_in">document</span>.body)</span><br><span class="line">  &#125;, <span class="literal">false</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>特性检测就很简单，就是判断以下，要加<code>window</code>的原因是因为如果没有该元素就会报错，未定义，而挂载到<code>window</code>上，他就会报<code>undefined</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (requestAnimateionFrom) &#123; <span class="comment">//错误写法，如果不存在就会变成一个没有声明的变量</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.requestAnimateionFrom) &#123; <span class="comment">//正确做法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>前缀<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> requestAnimationFrame = <span class="built_in">window</span>.requestAnimateionFrom || <span class="built_in">window</span>.webkitRequestAnimationFrame || <span class="built_in">window</span>.mozRequestAnimationFrame || <span class="built_in">window</span>.msRequestAnimationFrame || <span class="built_in">window</span>.oRequestAnimationFrame || <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;setTimeout(fn, <span class="number">16</span>)&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="移动端动画"><a href="#移动端动画" class="headerlink" title="移动端动画"></a>移动端动画</h2><p>优先使用 <code>requestAnimateionFrom</code>, 请求动画帧<br>css3使用<code>transition</code>, <code>animation</code></p><p><code>canvas</code> 要配合<code>setTimeout</code>,<code>setInterval</code>做动画，不能用css3，而DOM动画，就可以用提到的所有</p><h2 id="水平居中和垂直居中"><a href="#水平居中和垂直居中" class="headerlink" title="水平居中和垂直居中"></a>水平居中和垂直居中</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">水平居中：</span><br><span class="line">`text-align: center` 有固定宽度就可以使用</span><br><span class="line">`margin: 0 auto` 针对块级容器，有固定宽度</span><br><span class="line">`position+margin-left/translate` 以前仅用到了`margin`来解决，不过`translate`可以解决没有固定宽度，也可以实现</span><br><span class="line">`flex`终极解决方案</span><br><span class="line">垂直居中</span><br><span class="line">`line-height` 有固定高度可以使用，仅仅只能用于单行文字，其实配合</span><br><span class="line">`position+margin-top/translate` 同理</span><br><span class="line">`flex`终极解决方案</span><br><span class="line"></span><br><span class="line">## Zepto</span><br><span class="line">这里面虽然都很基础，和jQuery都差不多，不过还是能学到东西的，比如`window.onload`和`$(document).ready(function ()&#123;&#125;)`的区别，前者是页面全部加载完成，包括图片，js，css，dom,后者则是dom加载完毕，肯定是dom加载完毕更高效啊</span><br></pre></td></tr></table></figure><p>还有事件的命名空间，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'click.muke'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span><br><span class="line">  $(<span class="keyword">this</span>).off(<span class="string">'.muke'</span>) <span class="comment">//大概是这么写的？</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这样就仅仅会取消一个，以前老师教的是创建一个变量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ev;</span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'click'</span>, ev = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span><br><span class="line">  $(<span class="keyword">this</span>).off(ev)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="按需加载，我觉得还是另一个老师讲的细，这里就不深究了，看那个老师的就ok，这个参考一下就好"><a href="#按需加载，我觉得还是另一个老师讲的细，这里就不深究了，看那个老师的就ok，这个参考一下就好" class="headerlink" title="按需加载，我觉得还是另一个老师讲的细，这里就不深究了，看那个老师的就ok，这个参考一下就好"></a>按需加载，我觉得还是另一个老师讲的细，这里就不深究了，看那个老师的就ok，这个参考一下就好</h2><h1 id="实战开始-这里就直接上vue项目了"><a href="#实战开始-这里就直接上vue项目了" class="headerlink" title="实战开始,这里就直接上vue项目了"></a>实战开始,这里就直接上vue项目了</h1><p>页面最大宽度640，最小宽度320<br>设计稿为 375px 的页面，扩大两倍到750px，做标注，同时等比放大1.5倍生成宽度位1125的设计稿，在这里面切图</p><p>项目初始化完毕了，很简单，懒加载，重定向什么的</p><p>全局的样式都写在<code>assets/less</code>目录，这样便于管理，而且可以全局引入，其他页面都不用引入</p><p><strong>固定定位，以前的手机兼容不好，最好使用绝对定位来模拟</strong></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>src/<br>– assets 全局文件<br>– base 基础组件<br>– components 公共组件<br>– views 所有页面放的位置，一个文件夹代表一块，index为默认出口<br>– App.vue<br>– main.js<br>– router.js<br>– store.js<br><strong>基础组件和业务逻辑毫无瓜葛</strong><br>也就是说base里面的组件都可以扩展，slot插槽</p><h2 id="用到的插件统计"><a href="#用到的插件统计" class="headerlink" title="用到的插件统计"></a>用到的插件统计</h2><p><code>fastclick</code> 解决移动端300点击延迟<br><code>Vue-Awesome-Swiper</code> vue 封装的 swiper插件，轮播<br><code>jsonp</code> 获取jsonp数据<br><code>vue-lazyload</code> 延迟加载</p><h2 id="开发vue项目用到的技巧"><a href="#开发vue项目用到的技巧" class="headerlink" title="开发vue项目用到的技巧"></a>开发vue项目用到的技巧</h2><p>header 部分公共化<br>使用slot插槽，$slots判断是否使用了该插槽，没使用就隐藏<br>这里遇到个问题，定位问题如果前面元素不显示就会导致，最后一个元素无法右对齐，所以呢，有两种方案，第一种就是把第一个元素不用v-if判断，一直显示，另一种是用css3选择器完成，不过我觉得没必要，用到的选择器~ , 不过呢，我觉得这种方法很笨，不会用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- navbar.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mine-navbar"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mine-navbar-left"</span> <span class="attr">v-if</span>=<span class="string">"$slots.left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mine-navbar-center"</span> <span class="attr">v-if</span>=<span class="string">"$slots.center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mine-navbar-right"</span> <span class="attr">v-if</span>=<span class="string">"$slots.right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"mine-navbar-title"</span> <span class="attr">v-if</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mine-navbar-text ellipsis"</span> <span class="attr">v-text</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">@<span class="keyword">import</span> <span class="string">'~assets/less/_mixins.less'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.mine-navbar</span> &#123;</span></span><br><span class="line"><span class="undefined">  display: flex;</span></span><br><span class="line"><span class="undefined">  justify-content: space-between;</span></span><br><span class="line"><span class="undefined">  align-items: center;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">height</span>: @<span class="keyword">navbar</span>-<span class="keyword">height</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">  &amp;-left &#123;</span></span><br><span class="line"><span class="undefined">    margin-left: 20/@r;</span></span><br><span class="line"><span class="undefined">    ~ .mine-navbar-right &#123;  //新增代码</span></span><br><span class="line"><span class="undefined">      position: static;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  &amp;-center &#123;</span></span><br><span class="line"><span class="undefined">    flex: 1;</span></span><br><span class="line"><span class="undefined">    margin: 0 20/@r;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    ~ .mine-navbar-right &#123;  //新增代码</span></span><br><span class="line"><span class="undefined">      position: static;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  &amp;-right &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;   //新增代码</span></span><br><span class="line"><span class="undefined">    right: 0;</span></span><br><span class="line"><span class="undefined">    display: flex;    //用了绝对定位父元素的flex就会失效，所以要搞这个</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    margin-right: 20/@r;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  &amp;-title &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    left: 20%;</span></span><br><span class="line"><span class="undefined">    right: 20%;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  &amp;-text &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.ellipsis</span>();</span></span><br><span class="line"><span class="undefined">    font-size: 18px;</span></span><br><span class="line"><span class="undefined">    width: 100%;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">line-height</span>: 1<span class="selector-class">.5</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用插槽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 差点忘记了，这里不能用:title.加：后面调用的就是表达式了 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">me-navbar</span> <span class="attr">title</span>=<span class="string">"哈哈哈"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont"</span> <span class="attr">slot</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont"</span> <span class="attr">slot</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">me-navbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MeNavbar <span class="keyword">from</span> <span class="string">'navbar.vue'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> defult &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'homeHeader'</span>,</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    MeNavbar</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="props-接收效验"><a href="#props-接收效验" class="headerlink" title="props 接收效验"></a>props 接收效验</h3><p>不过我觉得把，我自己写好像没必要效验，又不是团队开发，就算是团队开发，这个东西不给别人用就没必要效验？估计是我现在还没有接触到，所以还是写一下吧，逼格？嗯，目前为止<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  direction: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'horizontal'</span>,</span><br><span class="line">    validator (value) &#123; <span class="comment">// value就可以接收到传入的参数</span></span><br><span class="line">      <span class="comment">// 如果返回true代表成功效验，flase失败</span></span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">      <span class="string">'horizontal'</span>,</span><br><span class="line">      <span class="string">'vertical'</span></span><br><span class="line">      ].includes(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;移动webapp开发&quot;&gt;&lt;a href=&quot;#移动webapp开发&quot; class=&quot;headerlink&quot; title=&quot;移动webapp开发&quot;&gt;&lt;/a&gt;移动webapp开发&lt;/h1&gt;
    
    </summary>
    
      <category term="移动开发" scheme="demoorbug.github.io/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="html5" scheme="demoorbug.github.io/tags/html5/"/>
    
      <category term="css3" scheme="demoorbug.github.io/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>开发中的技巧及问题</title>
    <link href="demoorbug.github.io/2019/03/22/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7%E5%8F%8A%E9%97%AE%E9%A2%98/"/>
    <id>demoorbug.github.io/2019/03/22/开发中的技巧及问题/</id>
    <published>2019-03-22T15:57:31.000Z</published>
    <updated>2022-03-15T22:58:15.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发网站记录"><a href="#开发网站记录" class="headerlink" title="开发网站记录"></a>开发网站记录</h1><a id="more"></a><p>若时光往复，我仍爱你如初</p><p>#组件化开发<br>css不换行<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="下拉菜单的方式有3种"><a href="#下拉菜单的方式有3种" class="headerlink" title="下拉菜单的方式有3种"></a>下拉菜单的方式有3种</h2><p>第一种是用js改变添加css，这样导致页面的回流，和重绘问题，性能低下</p><p>第二种是用js添加class类来完成操作，相对来说不错，</p><p>第三种是最优的，就是用<code>:hover</code> 伪类来解决，不过<code>IE6</code>不支持</p><h1 id="分离下拉菜单，组件化开发"><a href="#分离下拉菜单，组件化开发" class="headerlink" title="分离下拉菜单，组件化开发"></a>分离下拉菜单，组件化开发</h1><p>这种组件化开发思想确实很不错，可以节省很多代码结构，把类似的结构提出来，弄一个公共的样式<br>老师将的思路很清晰<br><a href="https://github.com/DemoorBug/lx/blob/master/组件化开发/站点导航/dropdown.html" target="_blank" rel="noopener">本节代码</a></p><p>可复用<code>html</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown menu"</span> <span class="attr">data-dropdown</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle link"</span>&gt;</span></span><br><span class="line">    我的慕陶<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"dropdown-arrow"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-layer dropdown-left"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>复用<code>css</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dropdown</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown-toggle</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown-arrow</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown-layer</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown-left</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown-right</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>封装可服用<code>javascript</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dropdown</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $elem = $(elem)</span><br><span class="line">    $elem.hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>)</span><br><span class="line">      $<span class="keyword">this</span>.addClass($<span class="keyword">this</span>.data(<span class="string">'dropdown'</span>)+<span class="string">'-active'</span>);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>)</span><br><span class="line">      $<span class="keyword">this</span>.removeClass($<span class="keyword">this</span>.data(<span class="string">'dropdown'</span>)+<span class="string">'-active'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  $.fn.extend(&#123;</span><br><span class="line">    dropdown: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        dropdown(<span class="keyword">this</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.dropdown'</span>).dropdown()</span><br></pre></td></tr></table></figure></p><h1 id="下拉图标问题"><a href="#下拉图标问题" class="headerlink" title="下拉图标问题"></a>下拉图标问题</h1><p>用图片的方式至少会增加1次http请求</p><p>第二种方式就是把图片转化为<code>base64</code>，<code>IE6-7</code>不支持,编码后比原图大，不能缓存</p><p>纯<code>CSS</code>箭头，兼容<code>IE6</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">arrow-down</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#535b62</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>: transform;</span><br><span class="line">  <span class="attribute">border-left-color</span>: transform;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不过呢，<code>IE6</code> 不兼容<code>transform</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">arrow-down</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#535b62</span>;</span><br><span class="line">  <span class="attribute">border-right-color</span>: transform;</span><br><span class="line">  <span class="attribute">_border-right-color</span>: <span class="number">#fff</span>; <span class="comment">/* 兼容IE6写法。_只有IE6会识别 */</span></span><br><span class="line">  <span class="attribute">border-left-color</span>: transform;</span><br><span class="line">  <span class="attribute">_border-left-color</span>: <span class="number">#fff</span>; <span class="comment">/* 兼容IE6写法。_只有IE6会识别 */</span></span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="用字体图标的技巧"><a href="#用字体图标的技巧" class="headerlink" title="用字体图标的技巧"></a>用字体图标的技巧</h2><p>因为是字体的问题，所以会继承父级的<code>line-height</code>所以我们把字体图片的，<code>line-height: 1</code>就可以解决这个问题，还用旋转图标的样式因为是<code>css3</code>的原因，所以直接用<code>css3</code>的查找方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[class*='-active']</span> <span class="selector-class">.dropdown-arrow</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(180deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动画呢，我基本都是单独写，因为感觉<code>all</code>老师说不高效，不过写一个利于以后的修改<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.transition</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">3s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="隐藏和显示"><a href="#隐藏和显示" class="headerlink" title="隐藏和显示"></a>隐藏和显示</h1><p><a href="">本节代码</a><br><code>trigger()</code>这个jquery方法居然还可以传递事件，我服了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.box'</span>).trigger(<span class="string">'hide'</span>);</span><br></pre></td></tr></table></figure></p><p>给那个元素绑定的就监听那个元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.box'</span>).on(<span class="string">'hide'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.type)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><code>is()</code> 这个返回true，或者false<br><code>:hidden</code> 匹配隐藏元素<br><code>:visible</code> 匹配显示元素<br>初始化(防止多次点击),老师不知道为什么还给hidden添加data，我觉得没必要，难道不监听事件就不会绑定吗？应该不是，毕竟是链式调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anim = &#123;</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($elem.is(<span class="string">':hidden'</span>)) &#123;</span><br><span class="line">      $elem.data(<span class="string">'start'</span>, <span class="string">'hide'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $elem.data(<span class="string">'start'</span>, <span class="string">'show'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  hide: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($elem.data(<span class="string">'start'</span>) === hide) <span class="keyword">return</span>;</span><br><span class="line">    $elem.data(<span class="string">'start'</span>, <span class="string">'hide'</span>).trigger(<span class="string">'hide'</span>);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过事件监听的方式实现回调函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anim = &#123;</span><br><span class="line">  hide: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">    $elem.trigger(<span class="string">'hide'</span>); <span class="comment">//第一个事件</span></span><br><span class="line">    $elem.hide();</span><br><span class="line">    $elem.trigger(<span class="string">'hidden'</span>); <span class="comment">//隐藏完之后传递的事件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">'.hide'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  anim.hide($(<span class="string">'.box'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.box'</span>).on(<span class="string">'hide hidden'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.type ==== <span class="string">'hide'</span>) &#123;</span><br><span class="line">    <span class="comment">//执行的第一个回调函数</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(e.type === <span class="string">'hidden'</span>) &#123;</span><br><span class="line">    <span class="comment">//执行的第二个回调函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h1 id="css3-隐藏和显示"><a href="#css3-隐藏和显示" class="headerlink" title="css3 隐藏和显示"></a>css3 隐藏和显示</h1><p><code>one()</code> 给匹配元素绑定一次事件<br><code>off()</code> 删除事件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">show: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//多次点击无效</span></span><br><span class="line">  <span class="keyword">if</span> ($elem.data(<span class="string">'start'</span>) === <span class="string">'show'</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> ($elem.data(<span class="string">'start'</span>) === <span class="string">'shown'</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">//触发事件show</span></span><br><span class="line">  $elem.data(<span class="string">'start'</span>, <span class="string">'show'</span>).trigger(<span class="string">'show'</span>)</span><br><span class="line">  <span class="comment">//开始隐藏</span></span><br><span class="line">  $elem.show()</span><br><span class="line">  <span class="comment">//css3的动画原理呢，就是给个延迟，不然就没有动画效果了</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $elem.removeClass(<span class="string">'fadeOut'</span>)</span><br><span class="line">  &#125;, <span class="number">20</span>)</span><br><span class="line">  <span class="comment">//监听transition 完成后触发该事件，抛出事件，外面就可以监听到，从而执行回调函数</span></span><br><span class="line">  $elem.off(<span class="string">'transitionend'</span>).one(<span class="string">'transitionend'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $elem.data(<span class="string">'start'</span>, <span class="string">'shown'</span>).trigger(<span class="string">'shown'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>隐藏略有不同<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hide: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ($elem.data(<span class="string">'start'</span>) === <span class="string">'hide'</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> ($elem.data(<span class="string">'start'</span>) === <span class="string">'hidden'</span>) <span class="keyword">return</span>;</span><br><span class="line">  $elem.data(<span class="string">'start'</span>, <span class="string">'hide'</span>).trigger(<span class="string">'hide'</span>)</span><br><span class="line">  <span class="comment">//因为是隐藏，所以先去掉class，执行css3动画</span></span><br><span class="line">  $elem.addClass(<span class="string">'fadeOut'</span>)</span><br><span class="line">  <span class="comment">//transition完成后，执行该事件，隐藏该元素</span></span><br><span class="line">  $elem.off(<span class="string">'transitionend'</span>).one(<span class="string">'transitionend'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $elem.hide()</span><br><span class="line">    $elem.data(<span class="string">'start'</span>, <span class="string">'hidden'</span>).trigger(<span class="string">'hidden'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="老师还讲到了浏览器对transitionend各浏览器的各种写法，以及兼容"><a href="#老师还讲到了浏览器对transitionend各浏览器的各种写法，以及兼容" class="headerlink" title="老师还讲到了浏览器对transitionend各浏览器的各种写法，以及兼容"></a>老师还讲到了浏览器对<code>transitionend</code>各浏览器的各种写法，以及兼容</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//各大浏览器的兼容，firefox和chrome一样</span></span><br><span class="line">  <span class="keyword">var</span> transitionEndEventName = &#123;</span><br><span class="line">    transition: <span class="string">'transitionend'</span>,</span><br><span class="line">    MozTransition: <span class="string">'transitionend'</span>,</span><br><span class="line">    WebkitTransition: <span class="string">'webkitTransitionEnd'</span>,</span><br><span class="line">    OTransition: <span class="string">'oTransitionEnd otransitionend'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> transitionEnd = <span class="string">''</span>,</span><br><span class="line">      isSupport = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> transitionEndEventName) &#123;</span><br><span class="line">    <span class="comment">//不存在就返回undefined</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.body.style[name] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      transitionEnd = transitionEndEventName[name]</span><br><span class="line">      isSupport = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果全局存在window.mt就直接用，不存在则创建空对象</span></span><br><span class="line">  <span class="built_in">window</span>.mt = <span class="built_in">window</span>.mt || &#123;&#125;;</span><br><span class="line">  <span class="built_in">window</span>.mt.transiton = &#123;</span><br><span class="line">    end: transitionEnd,</span><br><span class="line">    isSupport: isSupport</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><p>调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.mt.transition.end);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.mt.transition.isSupport);</span><br></pre></td></tr></table></figure></p><h1 id="酷，下拉呀，淡入淡出，左右动画，全部都是通用的，直接修改css即可"><a href="#酷，下拉呀，淡入淡出，左右动画，全部都是通用的，直接修改css即可" class="headerlink" title="酷，下拉呀，淡入淡出，左右动画，全部都是通用的，直接修改css即可"></a>酷，下拉呀，淡入淡出，左右动画，全部都是通用的，直接修改css即可</h1><h1 id="js切换，封装的时候有一个技巧"><a href="#js切换，封装的时候有一个技巧" class="headerlink" title="js切换，封装的时候有一个技巧"></a>js切换，封装的时候有一个技巧</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$elem.stop().fadeIn(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//居然可以这么写。。。。</span></span><br><span class="line">$elem.stop()[<span class="string">'fadeIn'</span>](<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>#封装，taiquanle<br><code>proxy()</code> 这东西不但可以传参，还可以修改this指向，用处多多<br><code>extend()</code> 可以合并对象，还可以绑定jQuery方法<br>这里干货满满<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认配置</span></span><br><span class="line"><span class="keyword">var</span> defaults = &#123;</span><br><span class="line">  css3: <span class="literal">true</span>,</span><br><span class="line">  js: <span class="literal">true</span>,</span><br><span class="line">  animate: <span class="string">'fade'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showhide</span>(<span class="params">$elem, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mode = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">//传进来的参数和默认的对比，合并</span></span><br><span class="line">  options = $.extend(&#123;&#125;, defaults, options)</span><br><span class="line">  <span class="comment">//这里的transition.isSupport 是检测浏览器是否兼容css3，和js，transitionend的各浏览器兼容写法</span></span><br><span class="line">  <span class="keyword">if</span> (options.css3 &amp;&amp; transition.isSupport) &#123;</span><br><span class="line">    <span class="comment">//如果css3为true，而且浏览器兼容，就直接使用css3动画</span></span><br><span class="line">    mode = css3[options.animate]</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.js) &#123;</span><br><span class="line">    <span class="comment">//不兼容css3，或者css3为false，js为true就用js动画</span></span><br><span class="line">    mode = js[options.animate]</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//以上两种都不行，则执行基础隐藏显示，没有动画</span></span><br><span class="line">    mode = slide</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//初始化</span></span><br><span class="line">  mode.init($elem)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">//返回两个方法，给外界调用</span></span><br><span class="line">    show: $.proxy(mode.show, <span class="keyword">this</span>, $elem),</span><br><span class="line">    hide: $.proxy(mode.hide, <span class="keyword">this</span>, $elem)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>因为是自制行环境，所以还要将该方法暴露出去<br>普通暴露<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.mt = <span class="built_in">window</span>.mt || &#123;&#125;,</span><br><span class="line"><span class="built_in">window</span>.mt.showhide = showhide</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的是调用形式</span></span><br><span class="line"><span class="keyword">var</span> showHide = <span class="built_in">window</span>.mt.showhide($box, &#123;</span><br><span class="line">  animate: <span class="string">'slideUpDown'</span></span><br><span class="line">&#125;)</span><br><span class="line">showHide.show($box)</span><br><span class="line">showHide.hide($box)</span><br></pre></td></tr></table></figure></p><p>jQuery暴露<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$.fn.extend(&#123;</span><br><span class="line">  showHide: <span class="function"><span class="keyword">function</span> (<span class="params">option</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//mode 这个很巧妙，没用值就执行if里面的语句，赋值，第二次进入就没问题了，老师很爱用data，巧妙</span></span><br><span class="line">      <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</span><br><span class="line">          mode = $(<span class="keyword">this</span>).data(<span class="string">'showHide'</span>);</span><br><span class="line">      <span class="keyword">if</span> (!mode) &#123;</span><br><span class="line">        <span class="comment">//判断参数是否为对象，因为接收参数不仅接受配置，还接收调用的方法</span></span><br><span class="line">        $<span class="keyword">this</span>.data(<span class="string">'showHide'</span>, mode = showhide($<span class="keyword">this</span>, <span class="keyword">typeof</span> option === <span class="string">'object'</span> &amp;&amp; option))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//传进来的参数和showhide暴露的方法对比，如果不是暴露的方法就退出，是的话就执行</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> mode[option] === <span class="string">'function'</span>) &#123;</span><br><span class="line">        mode[option]();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="用构造函数的方式重写dropdown"><a href="#用构造函数的方式重写dropdown" class="headerlink" title="用构造函数的方式重写dropdown"></a>用构造函数的方式重写dropdown</h1><p>为什么不这样写的原因<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dropdown</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.hide =<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每次实例化，都会在堆内存中开辟空间，来存放函数本体</span></span><br><span class="line"><span class="keyword">var</span> dropdown = <span class="keyword">new</span> Dropdown();</span><br><span class="line"><span class="keyword">var</span> dropdown2 = <span class="keyword">new</span> Dropdown();</span><br><span class="line"><span class="keyword">var</span> dropdown3 = <span class="keyword">new</span> Dropdown();</span><br></pre></td></tr></table></figure></p><p>解决this指针的几种办法<br>1: <code>$.proxy()</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$elem.hover($.proxy(<span class="keyword">this</span>.show, <span class="keyword">this</span>), $.proxy(<span class="keyword">this</span>.hide, <span class="keyword">this</span>))</span><br></pre></td></tr></table></figure></p><p>2: 定义_this<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line"><span class="keyword">this</span>.$elem.hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  _this.show()</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  _this.hide()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>3: ES6 Module<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$elem.hover(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="keyword">this</span>.show()&#125;, () =&gt; &#123;<span class="keyword">this</span>.hide()&#125;)</span><br></pre></td></tr></table></figure></p><h1 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h1><p>是从匹配元素的DOM结构向上冒泡<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="单例化"><a href="#单例化" class="headerlink" title="单例化"></a>单例化</h1><p>抛出一个方法，执行的时候每次都会创建该实例，浪费内存，所以单例化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$.fn.extend(&#123;</span><br><span class="line">  dropdown: <span class="function"><span class="keyword">function</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//单例化，就是给该DOM元素绑定data属性，一旦赋值，就不会继续创建</span></span><br><span class="line">      <span class="keyword">var</span> dropdown = $(<span class="keyword">this</span>).data(<span class="string">'dropdown'</span>),</span><br><span class="line">        options = $.extend(&#123;&#125;, Dropdown.DEFAULTS, <span class="keyword">typeof</span> option === <span class="string">'object'</span> &amp;&amp; option);</span><br><span class="line">      <span class="comment">//判断是否data赋值</span></span><br><span class="line">      <span class="keyword">if</span> (!dropdown) &#123;</span><br><span class="line">        <span class="comment">//这里面写法还真是省位置。</span></span><br><span class="line">        $(<span class="keyword">this</span>).data(<span class="string">'dropdown'</span>, dropdown = <span class="keyword">new</span> Dropdown(<span class="keyword">this</span>, options))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//判断是否为方法，有可能使用组件的人，传进来一个别的值，不是我们要抛出的事件，那就会返回undefined</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> dropdown[option] === <span class="string">'function'</span>) &#123;</span><br><span class="line">        dropdown[option]()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h1 id="动画条算是完成了，很nice，很全面，很完美，总结一下"><a href="#动画条算是完成了，很nice，很全面，很完美，总结一下" class="headerlink" title="动画条算是完成了，很nice，很全面，很完美，总结一下"></a>动画条算是完成了，很nice，很全面，很完美，总结一下</h1><h2 id="transition-js-解决兼容问题"><a href="#transition-js-解决兼容问题" class="headerlink" title="transition.js 解决兼容问题"></a><code>transition.js</code> 解决兼容问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> transitionEndEventName = &#123;</span><br><span class="line">    transition: <span class="string">'transitionend'</span>,</span><br><span class="line">    MozTransition: <span class="string">'transitionend'</span>,</span><br><span class="line">    WebkitTransition: <span class="string">'webkitTransitionEnd'</span>,</span><br><span class="line">    OTransition: <span class="string">'oTransitionEnd otransitionend'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> transitionEnd = <span class="string">''</span>,</span><br><span class="line">      isSupport = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> transitionEndEventName) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.body.style[name] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      transitionEnd = transitionEndEventName[name]</span><br><span class="line">      isSupport = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.mt = <span class="built_in">window</span>.mt || &#123;&#125;;</span><br><span class="line">  <span class="built_in">window</span>.mt.transiton = &#123;</span><br><span class="line">    end: transitionEnd,</span><br><span class="line">    isSupport: isSupport</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><p>抛出了两个方法，<code>mt.transition.end</code> 为判断各浏览器之间<code>transitionend</code>的兼容问题<br><code>mt.transition.isSupport</code> 判断浏览器是否支持CSS3属性，不支持返回false</p><h2 id="index-js-动画逻辑"><a href="#index-js-动画逻辑" class="headerlink" title="index.js 动画逻辑"></a><code>index.js</code> 动画逻辑</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> transition = <span class="built_in">window</span>.mt.transiton</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">$elem, hiddenCallback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ($elem.is(<span class="string">':hidden'</span>)) &#123;</span><br><span class="line">    $elem.data(<span class="string">'start'</span>, <span class="string">'hidden'</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> hiddenCallback === <span class="string">'function'</span>) &#123;</span><br><span class="line">      hiddenCallback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $elem.data(<span class="string">'start'</span>, <span class="string">'shown'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">$elem, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ($elem.data(<span class="string">'start'</span>) === <span class="string">'show'</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> ($elem.data(<span class="string">'start'</span>) === <span class="string">'shown'</span>) <span class="keyword">return</span>;</span><br><span class="line">  $elem.data(<span class="string">'start'</span>, <span class="string">'show'</span>).trigger(<span class="string">'show'</span>)</span><br><span class="line">  callback()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide</span>(<span class="params">$elem, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ($elem.data(<span class="string">'start'</span>) === <span class="string">'hide'</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> ($elem.data(<span class="string">'start'</span>) === <span class="string">'hidden'</span>) <span class="keyword">return</span>;</span><br><span class="line">  $elem.data(<span class="string">'start'</span>, <span class="string">'hide'</span>).trigger(<span class="string">'hide'</span>)</span><br><span class="line">  callback()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> slide = &#123;</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($elem.is(<span class="string">':hidden'</span>)) &#123;</span><br><span class="line">      $elem.data(<span class="string">'start'</span>, <span class="string">'hide'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $elem.data(<span class="string">'start'</span>, <span class="string">'show'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  show: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">    show($elem, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $elem.show()</span><br><span class="line">      $elem.trigger(<span class="string">'shown'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  hide: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">    hide($elem, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $elem.hide()</span><br><span class="line">      $elem.trigger(<span class="string">'hidden'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> css3 = &#123;</span><br><span class="line">  _init: <span class="function"><span class="keyword">function</span>(<span class="params">$elem, className</span>) </span>&#123;</span><br><span class="line">    $elem.addClass(<span class="string">'transition'</span>)</span><br><span class="line">    init($elem, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $elem.addClass(className)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  _show: <span class="function"><span class="keyword">function</span>(<span class="params">$elem, className</span>) </span>&#123;</span><br><span class="line">    show($elem, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $elem.show()</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $elem.removeClass(className)</span><br><span class="line">      &#125;, <span class="number">20</span>)</span><br><span class="line">      $elem.off(transition.end).one(transition.end, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $elem.data(<span class="string">'start'</span>, <span class="string">'shown'</span>).trigger(<span class="string">'shown'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  _hide: <span class="function"><span class="keyword">function</span>(<span class="params">$elem, className</span>) </span>&#123;</span><br><span class="line">    hide($elem, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $elem.addClass(className)</span><br><span class="line">      $elem.off(transition.end).one(transition.end, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $elem.hide()</span><br><span class="line">        $elem.data(<span class="string">'start'</span>, <span class="string">'hidden'</span>).trigger(<span class="string">'hidden'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  fade: &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">      css3._init($elem, <span class="string">'fadeOut'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">      css3._show($elem, <span class="string">'fadeOut'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">      css3._hide($elem, <span class="string">'fadeOut'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  slideUpDown: &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">      $elem.height($elem.height())</span><br><span class="line">      css3._init($elem, <span class="string">'slideUpDown'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">      css3._show($elem, <span class="string">'slideUpDown'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">      css3._hide($elem, <span class="string">'slideUpDown'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> js = &#123;</span><br><span class="line">  _hide: <span class="function"><span class="keyword">function</span>(<span class="params">$elem, mode</span>) </span>&#123;</span><br><span class="line">    hide($elem, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $elem.stop()[mode](<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $elem.data(<span class="string">'start'</span>, <span class="string">'hidden'</span>).trigger(<span class="string">'hidden'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  _show: <span class="function"><span class="keyword">function</span>(<span class="params">$elem, mode</span>) </span>&#123;</span><br><span class="line">    show($elem, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $elem.stop()[mode](<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $elem.data(<span class="string">'start'</span>, <span class="string">'shown'</span>).trigger(<span class="string">'shown'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  _customInit: <span class="function"><span class="keyword">function</span>(<span class="params">$elem, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> style = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> ops <span class="keyword">in</span> options) &#123;</span><br><span class="line">      style[ops] = $elem.css(ops);</span><br><span class="line">    &#125;</span><br><span class="line">    $elem.data(<span class="string">'style'</span>, style)</span><br><span class="line">    init($elem, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $elem.css(options)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  fade: &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">      init($elem)</span><br><span class="line">    &#125;,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">      js._show($elem, <span class="string">'fadeIn'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">      js._hide($elem, <span class="string">'fadeOut'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  slideUpDown: &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">      init($elem)</span><br><span class="line">    &#125;,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">      js._show($elem, <span class="string">'slideDown'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">      js._hide($elem, <span class="string">'slideUp'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  slideRight: &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">      js._customInit($elem, &#123;</span><br><span class="line">        <span class="string">'width'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'padding-left'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'padding-right'</span>: <span class="number">0</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">      $elem.show()</span><br><span class="line">      show($elem, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $elem.stop().animate($elem.data(<span class="string">'style'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          $elem.data(<span class="string">'start'</span>, <span class="string">'shown'</span>).trigger(<span class="string">'shown'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>) </span>&#123;</span><br><span class="line">      hide($elem, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $elem.stop().animate(&#123;</span><br><span class="line">          <span class="string">'width'</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="string">'padding-left'</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="string">'padding-right'</span>: <span class="number">0</span></span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          $elem.hide()</span><br><span class="line">          $elem.data(<span class="string">'start'</span>, <span class="string">'hidden'</span>).trigger(<span class="string">'hidden'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> defaults = &#123;</span><br><span class="line">  css3: <span class="literal">true</span>,</span><br><span class="line">  js: <span class="literal">true</span>,</span><br><span class="line">  animate: <span class="string">'slideUpDown'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我日了狗了，_这东西还得转译，不然后面语法全错<br>这里没什么好讲的，都很简单，通俗易懂。_约定俗成内部使用</p><p>上面是js和css3动画，这里就是判断浏览器使用哪种动画<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showhide</span>(<span class="params">$elem, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mode = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">//合并传进来的配置，和我们默认配置</span></span><br><span class="line">  options = $.extend(&#123;&#125;, defaults, options)</span><br><span class="line">  <span class="comment">//判断配置中是否开启css3, 如果开启判断浏览器是否兼容css3</span></span><br><span class="line">  <span class="keyword">if</span> (options.css3 &amp;&amp; transition.isSupport) &#123;</span><br><span class="line">    mode = css3[options.animate]</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.js) &#123; <span class="comment">//如果不兼容则查看配置是否开启js，如果开启则使用</span></span><br><span class="line">    mode = js[options.animate]</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">//最后的情况就是使用最简单的方式，没有动画</span></span><br><span class="line">    mode = slide</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//每个定义的属性都有一个自己的init初始化方法</span></span><br><span class="line">  mode.init($elem)</span><br><span class="line">  <span class="comment">//返回两个show，和hide方法，便于调用</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    show: $.proxy(mode.show, <span class="keyword">this</span>, $elem),</span><br><span class="line">    hide: $.proxy(mode.hide, <span class="keyword">this</span>, $elem)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接下来就是把该方法暴露出去，供外部使用，因为上面的所有方法都是定义在自制行函数里面<br>jQuery方式暴露<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$.fn.extend(&#123;</span><br><span class="line">  showHide: <span class="function"><span class="keyword">function</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//因为有可能返回的是一个集合，所以这里使用each便利，很nice</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</span><br><span class="line">        mode = $(<span class="keyword">this</span>).data(<span class="string">'showHide'</span>);</span><br><span class="line">      <span class="comment">//单例化，上面有讲</span></span><br><span class="line">      <span class="keyword">if</span> (!mode) &#123;</span><br><span class="line">        $<span class="keyword">this</span>.data(<span class="string">'showHide'</span>, mode = showhide($<span class="keyword">this</span>, <span class="keyword">typeof</span> option === <span class="string">'object'</span> &amp;&amp; option))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//抛出方法调用方式$('.dropdown').showHide(&#123;options&#125;)</span></span><br><span class="line">      <span class="comment">//抛出方法调用方式$('.dropdown').showHide('show')</span></span><br><span class="line">      <span class="comment">//抛出方法调用方式$('.dropdown').showHide('hide')</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> mode[option] === <span class="string">'function'</span>) &#123;</span><br><span class="line">        mode[option]();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>其他抛出方式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.mt = <span class="built_in">window</span>.mt || &#123;&#125;,</span><br><span class="line"><span class="built_in">window</span>.mt.showhide = showhide</span><br><span class="line"><span class="comment">// 调用方式 有几个就要调用几次，还是jQuery的方式方便</span></span><br><span class="line"><span class="keyword">var</span> showHide = <span class="built_in">window</span>.mt.showhide($box, &#123;</span><br><span class="line">animate: <span class="string">'slideUpDown'</span></span><br><span class="line">&#125;)</span><br><span class="line">showHide.show($box)</span><br><span class="line">showHide.hide($box)</span><br></pre></td></tr></table></figure></p><h1 id="anim-js-重写dropdown动画"><a href="#anim-js-重写dropdown动画" class="headerlink" title="anim.js 重写dropdown动画"></a><code>anim.js</code> 重写dropdown动画</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Dropdown</span>(<span class="params">elem, option</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$elem = $(elem)</span><br><span class="line">    <span class="comment">//这里我本来写的$('.dropdown-layer') 直接获取所有了，自己还没找到。。</span></span><br><span class="line">    <span class="keyword">this</span>.$layer = <span class="keyword">this</span>.$elem.find(<span class="string">'.dropdown-layer'</span>)</span><br><span class="line">    <span class="comment">//这里的class我们自己写了，这里样式变通用了，而且也可以控制动画</span></span><br><span class="line">    <span class="keyword">this</span>.activeClass = option.active + <span class="string">'-active'</span></span><br><span class="line">    <span class="comment">//全局绑定option</span></span><br><span class="line">    <span class="keyword">this</span>.option = option</span><br><span class="line">    <span class="comment">//把很多代码放到初始化代码里面，我们称之为初始化，其实就是进来加载的代码，这下终于懂了</span></span><br><span class="line">    <span class="keyword">this</span>.init()</span><br><span class="line">  &#125;</span><br><span class="line">  Dropdown.prototype = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//因为是ES5的方式写代码，外面最好获取一下this，很方便</span></span><br><span class="line">      <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">      <span class="comment">//这里就调用了`index.js` 初始化操作，顺带传参</span></span><br><span class="line">      <span class="keyword">this</span>.$layer.showHide(<span class="keyword">this</span>.option)</span><br><span class="line">      <span class="comment">//老师还配置了多个事件触发的方式</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.option.event === <span class="string">'click'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$elem.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">          <span class="comment">//这里是我自己拓展的，就是展开一个标签后，关闭另一个标签</span></span><br><span class="line">          <span class="comment">//以前是查错了，就说怎么老是不对，查父元素肯定是显示的呀。。</span></span><br><span class="line">          <span class="comment">//_this.$elem.siblings().is(':visible') 。。错误的写法</span></span><br><span class="line">          _this.$allelem = _this.$elem.siblings().find(<span class="string">'.dropdown-layer:visible'</span>)</span><br><span class="line">          <span class="keyword">if</span> (_this.$allelem) &#123;</span><br><span class="line">            <span class="comment">//哈哈哈，很不错，这个呢就是根据打开元素关闭标签</span></span><br><span class="line">            _this.Allhide()</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//这里click，的点击判断，如果显示了再点击就是隐藏，老师没写，我加的，还行把</span></span><br><span class="line">          <span class="keyword">if</span> (_this.$layer.is(<span class="string">':hidden'</span>)) &#123;</span><br><span class="line">            <span class="comment">//吓我一跳，这里是调用的自己的show，我就说吗</span></span><br><span class="line">            _this.show();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _this.hide();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//阻止冒泡，不然会触发document的click事件</span></span><br><span class="line">          e.stopPropagation();</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//别的地方点击隐藏元素</span></span><br><span class="line">        $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          _this.hide()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//hover 方式的动画</span></span><br><span class="line">        <span class="comment">//这里的$.proxy() 这给东西不但可以改变this指向，还可以传参(第三个参数)</span></span><br><span class="line">        <span class="keyword">this</span>.$elem.hover($.proxy(<span class="keyword">this</span>.show, <span class="keyword">this</span>), $.proxy(<span class="keyword">this</span>.hide, <span class="keyword">this</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">      <span class="comment">//老师加了给延迟，duowan用的就是这个方法，还要17173， 不知道谁炒谁的</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.option.delay) &#123;</span><br><span class="line">        <span class="keyword">this</span>.time = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          _this.$elem.addClass(_this.activeClass);</span><br><span class="line">          _this.$layer.showHide(<span class="string">'show'</span>)</span><br><span class="line">        &#125;, <span class="keyword">this</span>.option.delay)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//添加class</span></span><br><span class="line">        <span class="keyword">this</span>.$elem.addClass(<span class="keyword">this</span>.activeClass);</span><br><span class="line">        <span class="comment">//这里也是调用的`index.js`抛出的方法</span></span><br><span class="line">        <span class="keyword">this</span>.$layer.showHide(<span class="string">'show'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.option.delay) &#123;</span><br><span class="line">        clearTimeout(<span class="keyword">this</span>.time)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//和show一个原理</span></span><br><span class="line">      <span class="keyword">this</span>.$elem.removeClass(<span class="keyword">this</span>.activeClass);</span><br><span class="line">      <span class="keyword">this</span>.$layer.showHide(<span class="string">'hide'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    Allhide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//写click事件多出来的方法</span></span><br><span class="line">      <span class="keyword">this</span>.$elem.siblings().removeClass(<span class="keyword">this</span>.activeClass);</span><br><span class="line">      <span class="keyword">this</span>.$allelem.showHide(<span class="string">'hide'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//function 就是对象，所以可以这么写</span></span><br><span class="line">  Dropdown.DEFAULTS = &#123;</span><br><span class="line">    event: <span class="string">'hover'</span>,</span><br><span class="line">    css3: <span class="literal">true</span>,</span><br><span class="line">    js: <span class="literal">true</span>,</span><br><span class="line">    animate: <span class="string">'slideUpDown'</span>,</span><br><span class="line">    active: <span class="string">'menu'</span>,</span><br><span class="line">    delay: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// window.mt.Dropdown = Dropdown</span></span><br><span class="line">  $.fn.extend(&#123;</span><br><span class="line">    dropdown: <span class="function"><span class="keyword">function</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> dropdown = $(<span class="keyword">this</span>).data(<span class="string">'dropdown'</span>),</span><br><span class="line">          options = $.extend(&#123;&#125;, Dropdown.DEFAULTS, <span class="keyword">typeof</span> option === <span class="string">'object'</span> &amp;&amp; option);</span><br><span class="line">        <span class="comment">//单例化</span></span><br><span class="line">        <span class="keyword">if</span> (!dropdown) &#123;</span><br><span class="line">          <span class="comment">//这里不但给dropdown重置值，还给data-dropdown设置值，巧妙。</span></span><br><span class="line">          $(<span class="keyword">this</span>).data(<span class="string">'dropdown'</span>, dropdown = <span class="keyword">new</span> Dropdown(<span class="keyword">this</span>, options))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//传入字符串这里处理，如果是暴露的方法就执行相应逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> dropdown[option] === <span class="string">'function'</span>) &#123;</span><br><span class="line">          dropdown[option]()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)(jQuery)</span><br></pre></td></tr></table></figure><h2 id="接下来就是调用了"><a href="#接下来就是调用了" class="headerlink" title="接下来就是调用了"></a>接下来就是调用了</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.dropdown'</span>).dropdown(&#123;  <span class="comment">//anim.js暴露出来的方法没有使用，这里就仅仅只是传参</span></span><br><span class="line">  animate: <span class="string">'fade'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里通过我们index.js中抛出的事件，达到我们执行回调的方法，老师还在`anim.js`中接收，</span></span><br><span class="line"><span class="comment">//然后抛给`.dropdown`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//简单写一下，如果遇到问题，可以加到`anim.js`的init初始化方法中</span></span><br><span class="line"><span class="comment">//this.$layer.on('show shown hide hidden', function(e) &#123;</span></span><br><span class="line"><span class="comment">//  _this.$elem.trigger(e.type)</span></span><br><span class="line"><span class="comment">//&#125;)</span></span><br><span class="line"><span class="comment">//我觉得吧，可以写，但没必要，让代码更复杂了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//按需加载</span></span><br><span class="line">$(<span class="string">'.dropdown-layer'</span>).on(<span class="string">'show'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> html =<span class="string">''</span>,</span><br><span class="line">      $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</span><br><span class="line">      load = $(<span class="keyword">this</span>).data(<span class="string">'load'</span>)</span><br><span class="line">  <span class="comment">//判断`data-load`是否有值，没有则直接返回，不是我们按需加载的对象</span></span><br><span class="line">  <span class="keyword">if</span> (!load) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">//判断是否有`data-loader` 有就表示获取过值了，不执行该方法</span></span><br><span class="line">  <span class="keyword">if</span> (!$(<span class="keyword">this</span>).data(<span class="string">'loader'</span>)) &#123;</span><br><span class="line">    <span class="comment">//异步操作，但是天猫不是用的异步。直接加载了给js文件，不清楚</span></span><br><span class="line">    $.getJSON(<span class="string">'test/'</span>+load, <span class="function"><span class="keyword">function</span>(<span class="params">json, textStatus</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//通过json结构便利赋值</span></span><br><span class="line">      $.each(json, <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//html模板</span></span><br><span class="line">        html += <span class="string">`&lt;li&gt;&lt;a href="###" target="_blank" class="menu-item"&gt;<span class="subst">$&#123;json[index].title&#125;</span>&lt;/a&gt;&lt;/li&gt;`</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">//赋值</span></span><br><span class="line">      $<span class="keyword">this</span>.html(html)</span><br><span class="line">      <span class="comment">// 添加`data-loader`状态，防止多次获取</span></span><br><span class="line">      $<span class="keyword">this</span>.data(<span class="string">'loader'</span>, <span class="literal">true</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>html 结构<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"menu nav-site-service dropdown fl"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle link transition"</span>&gt;</span>联系客服<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"dropdown-arrow iconfont transition"</span>&gt;</span>&amp;#xe798;<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-layer dropdown-right"</span> <span class="attr">data-load</span>=<span class="string">"dropdown.json"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;li&gt;&lt;a href="###" target="_blank" class="menu-item"&gt;买家客服&lt;/a&gt;&lt;/li&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;li&gt;&lt;a href="###" target="_blank" class="menu-item"&gt;卖家客服&lt;/a&gt;&lt;/li&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="搜索功能组件化"><a href="#搜索功能组件化" class="headerlink" title="搜索功能组件化"></a>搜索功能组件化</h1><p><code>trim()</code> 这是js原生的，去除字符串两边的空白</p><h1 id="搜索框自动完成"><a href="#搜索框自动完成" class="headerlink" title="搜索框自动完成"></a>搜索框自动完成</h1><p><code>onkeyup</code>事件 keyup 兼容好，但是必须做一些约束，比如鼠标粘贴复制不会触发，键盘的一些上下键还可以触发</p><p><code>oninput</code>事件 不兼容IE6,7,8,但是好用。。。</p><p>异步的方式就是为了避免回调<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回调</span></span><br><span class="line">$inputbox.on(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    <span class="comment">//这里的接口是请求，淘宝的数据，因为我们没数据</span></span><br><span class="line">    url: <span class="string">"https://suggest.taobao.com/sug?code=utf-8&amp;q="</span>+$inputbox.val()+<span class="string">"&amp;_ksTS=1553601277970_353&amp;callback=jsonp354&amp;k=1&amp;area=c2c&amp;bucketid=12"</span>,</span><br><span class="line">    dataType: <span class="string">"jsonp"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//异步</span></span><br><span class="line">$inputbox.on(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">"https://suggest.taobao.com/sug?code=utf-8&amp;q="</span>+$inputbox.val()+<span class="string">"&amp;_ksTS=1553601277970_353&amp;callback=jsonp354&amp;k=1&amp;area=c2c&amp;bucketid=12"</span>;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    <span class="comment">//这里的接口是请求，淘宝的数据，因为我们没数据</span></span><br><span class="line">    url: url,</span><br><span class="line">    timeout: <span class="number">1</span>, <span class="comment">//超时</span></span><br><span class="line">    dataType: <span class="string">"jsonp"</span>, <span class="comment">//跨域</span></span><br><span class="line">  &#125;).done(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;).fail(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;).always(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Why'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>如果页面不是UTF8,是别的，输入内容提交就会出错乱码<br><code>encodeURIComponent()</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">"https://suggest.taobao.com/sug?code=utf-8&amp;_ksTS=1553601277970_353&amp;callback=jsonp354&amp;k=1&amp;area=c2c&amp;bucketid=12&amp;q="</span> + <span class="built_in">encodeURIComponent</span>($inputbox.val());</span><br></pre></td></tr></table></figure></p><p>正则去除文本中的<code>&lt;b&gt;</code>标签:<code>过&lt;b&gt;生日&lt;/b&gt;的&lt;b&gt;礼物&lt;/b&gt;</code>变成纯文本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeHtmlTags</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/&lt;(?:[^&gt;'"]|"[^"]*"|'[^']*')*&gt;/g</span>, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="search-js-代码都写了注释，逻辑通了都很简单，EZ，接下来是改写下面的操作，应该是封装把"><a href="#search-js-代码都写了注释，逻辑通了都很简单，EZ，接下来是改写下面的操作，应该是封装把" class="headerlink" title="search.js 代码都写了注释，逻辑通了都很简单，EZ，接下来是改写下面的操作，应该是封装把"></a><code>search.js</code> 代码都写了注释，逻辑通了都很简单，EZ，接下来是改写下面的操作，应该是封装把</h2><p>搜索框完成，没有键盘上下键盘的绑定，其他功能齐全<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> $search = $(<span class="string">'.search'</span>),</span><br><span class="line">      $form = $search.find(<span class="string">'.search-form'</span>),</span><br><span class="line">      $inputbox = $search.find(<span class="string">'.search-inputbox'</span>),</span><br><span class="line">      $btn = $search.find(<span class="string">'.search-btn'</span>),</span><br><span class="line">      $layer = $search.find(<span class="string">'.search-layer'</span>);</span><br><span class="line">  <span class="comment">//验证操作</span></span><br><span class="line">  <span class="comment">// $btn.on('click', function () &#123;</span></span><br><span class="line">  <span class="comment">//   //判断是否输入为空，空则不提交</span></span><br><span class="line">  <span class="comment">//   if ($inputbox.val().trim() === '') &#123;</span></span><br><span class="line">  <span class="comment">//     return false</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//新的验证操作</span></span><br><span class="line">  <span class="comment">//比click好的地方就是可以监听layer下拉框，如果点击提交是空也不行</span></span><br><span class="line">  $form.on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($inputbox.val().trim() === <span class="string">''</span>) &#123;</span><br><span class="line">      <span class="comment">//这是我自己拓展的，仿天猫的，酷</span></span><br><span class="line">      $inputbox.addClass(<span class="string">'background-glint'</span>)</span><br><span class="line">      $inputbox.off(<span class="string">'animationend'</span>).one(<span class="string">'animationend'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $inputbox.removeClass(<span class="string">'background-glint'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//获取焦点，显示下拉</span></span><br><span class="line">  $inputbox.on(<span class="string">'focus'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $layer.show()</span><br><span class="line">  &#125;).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//阻止冒泡，还可以这样？</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//document绑定click事件，点击全局就隐藏菜单，用blur 加延迟也可以实现</span></span><br><span class="line">  $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $layer.hide()</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//绑定input事件，内容改变就获取值，不兼容IE9 以下</span></span><br><span class="line">  $inputbox.on(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">"https://suggest.taobao.com/sug?code=utf-8&amp;_ksTS=1553601277970_353&amp;callback=jsonp354&amp;k=1&amp;area=c2c&amp;bucketid=12&amp;q="</span>+ <span class="built_in">encodeURIComponent</span>($inputbox.val());</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      <span class="comment">//这里的接口是请求，淘宝的数据，因为我们没数据</span></span><br><span class="line">      url: url,</span><br><span class="line">      <span class="comment">// timeout: 1, //超时</span></span><br><span class="line">      dataType: <span class="string">"jsonp"</span>, <span class="comment">//跨域</span></span><br><span class="line">    &#125;).done(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//成功回调</span></span><br><span class="line">      <span class="keyword">var</span> html = <span class="string">''</span>,</span><br><span class="line">          dataNum = data.result.length,</span><br><span class="line">          numMax = <span class="number">9</span>; <span class="comment">//自定义显示条目</span></span><br><span class="line">      <span class="keyword">if</span> (dataNum === <span class="number">0</span>) &#123; <span class="comment">//没有数据就直接退出</span></span><br><span class="line">        $layer.hide().html(<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dataNum; i++) &#123; <span class="comment">//循环遍历数据</span></span><br><span class="line">        <span class="keyword">if</span> (numMax &lt;= i) &#123; <span class="comment">//自定义显示条目</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        html += <span class="string">'&lt;li class="search-layer-item text-ellipsis"&gt;'</span>+data.result[i][<span class="number">0</span>]+<span class="string">'&lt;/li&gt;'</span></span><br><span class="line">      &#125;</span><br><span class="line">      $layer.html(html).show() <span class="comment">//拼接的字符串显示到DOM元素上</span></span><br><span class="line">    &#125;).fail(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      $layer.hide().html(<span class="string">''</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;).always(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Why'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//因为用的是事件委托，可以不用写到会到里面</span></span><br><span class="line">  $layer.on(<span class="string">'click'</span>, <span class="string">'li'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $inputbox.val(removeHtmlTags($(<span class="keyword">this</span>).html()));</span><br><span class="line">    $inputbox.parent().submit()</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 这个呢就是清除字符串中的`&lt;b&gt;`标签</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">removeHtmlTags</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&lt;(?:[^&gt;'"]|"[^"]*"|'[^']*')*&gt;/g</span>, <span class="string">''</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(jQuery)</span><br></pre></td></tr></table></figure></p><h2 id="search-fun-js-不封装还顺的很，封装了感觉好麻烦"><a href="#search-fun-js-不封装还顺的很，封装了感觉好麻烦" class="headerlink" title="search-fun.js 不封装还顺的很，封装了感觉好麻烦"></a><code>search-fun.js</code> 不封装还顺的很，封装了感觉好麻烦</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//数据缓存</span></span><br><span class="line">  <span class="keyword">var</span> cache = &#123;</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">    addData: <span class="function"><span class="keyword">function</span> (<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.data[key]) &#123;</span><br><span class="line">        <span class="keyword">this</span>.data[key] = data;</span><br><span class="line">        <span class="keyword">this</span>.count++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    readData: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.data[key]</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteDataByKye: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123; <span class="comment">//通过键删</span></span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.data[key];</span><br><span class="line">      <span class="keyword">this</span>.count--;</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteDataByOrder: <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123; <span class="comment">//通过顺序删除</span></span><br><span class="line">      <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= num) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">this</span>.deleteDataByKye(p)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Search</span>(<span class="params">$elem, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.options = options;</span><br><span class="line">    <span class="keyword">this</span>.$elem = $elem;</span><br><span class="line">    <span class="keyword">this</span>.$form = <span class="keyword">this</span>.$elem.find(<span class="string">'.search-form'</span>);</span><br><span class="line">    <span class="keyword">this</span>.$input = <span class="keyword">this</span>.$elem.find(<span class="string">'.search-inputbox'</span>);</span><br><span class="line">    <span class="comment">// this.btn = $elem.find('.search-btn')</span></span><br><span class="line">    <span class="keyword">this</span>.$layer = <span class="keyword">this</span>.$elem.find(<span class="string">'.search-layer'</span>);</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">//submit 也可以，click也可以</span></span><br><span class="line">    <span class="comment">// this.$form.on('submit', $.proxy(this.submit, this))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交验证</span></span><br><span class="line">    <span class="keyword">this</span>.$elem.on(<span class="string">'click'</span>, <span class="string">'.search-btn'</span>,$.proxy(<span class="keyword">this</span>.submit, <span class="keyword">this</span>))</span><br><span class="line">    <span class="comment">//用户配置是否开启自动完成，我的天啊，这下面都是这个自动完成的代码，不要这功能为什么不单独写一个提交验证。。。</span></span><br><span class="line">    <span class="keyword">if</span>(options.autocomplete) &#123;</span><br><span class="line">      <span class="keyword">this</span>.autocomplete()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Search.DEFAULTS = &#123;</span><br><span class="line">    autocomplete: <span class="literal">false</span>,</span><br><span class="line">    url: <span class="string">'https://suggest.taobao.com/sug?code=utf-8&amp;_ksTS=1553601277970_353&amp;callback=jsonp354&amp;k=1&amp;area=c2c&amp;bucketid=12&amp;q='</span>,</span><br><span class="line">    css3: <span class="literal">true</span>,</span><br><span class="line">    js: <span class="literal">true</span>,</span><br><span class="line">    animate: <span class="string">'fade'</span></span><br><span class="line">  &#125;</span><br><span class="line">  Search.prototype = &#123;</span><br><span class="line">    autocomplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> time = <span class="literal">null</span>,</span><br><span class="line">          _this = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">this</span>.$input</span><br><span class="line">        .on(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">//减少服务器压力，vue那个老师很常用这个，不过自动完成就会有延迟，个人感觉</span></span><br><span class="line">          clearTimeout(time);</span><br><span class="line">          <span class="comment">//获取延迟</span></span><br><span class="line">          time = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            _this.getData();</span><br><span class="line">          &#125;, <span class="number">200</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .on(<span class="string">'focus'</span>, $.proxy(<span class="keyword">this</span>.showLayer, <span class="keyword">this</span>)) <span class="comment">//获取焦点显示</span></span><br><span class="line">        .on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//阻止事件冒泡</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//点击全局隐藏自动完成下拉菜单</span></span><br><span class="line">      $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, $.proxy(<span class="keyword">this</span>.hideLayer, <span class="keyword">this</span>))</span><br><span class="line">      <span class="comment">//初始化动画方法`index.js` case/js目录下的文件</span></span><br><span class="line">      <span class="keyword">this</span>.$layer.showHide(<span class="keyword">this</span>.options)</span><br><span class="line">    &#125;,</span><br><span class="line">    submit: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">      <span class="comment">//getInputVal() 这个方法是处理字符串的，去除前后空白，因为两处用到，所以封装</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.gitInputVal() === <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="comment">//这是我自己拓展的，仿天猫的，酷</span></span><br><span class="line">        <span class="keyword">this</span>.$input.addClass(<span class="string">'background-glint'</span>)</span><br><span class="line">        <span class="keyword">this</span>.$input.off(<span class="string">'animationend'</span>).one(<span class="string">'animationend'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          _this.$input.removeClass(<span class="string">'background-glint'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//click事件才要手动提交，submit事件如果还是手动提交，会重复执行很多次</span></span><br><span class="line">      <span class="keyword">this</span>.$form.submit()</span><br><span class="line">    &#125;,</span><br><span class="line">    getData: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">      <span class="comment">//转码，页面不是utf8，输入东西提交会乱码</span></span><br><span class="line">      <span class="keyword">var</span> url = <span class="built_in">encodeURIComponent</span>(<span class="keyword">this</span>.gitInputVal());</span><br><span class="line">      <span class="comment">//如果没有输入内容，则直接，不能这么写，不然我的默认样式就没了,解决了。</span></span><br><span class="line">      <span class="comment">// if (url === '') &#123;</span></span><br><span class="line">      <span class="comment">//   return _this.$elem.trigger('errEvent');</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//解决上面的问题</span></span><br><span class="line">      <span class="keyword">if</span> (url === <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _this.$elem.trigger(<span class="string">'errEvent'</span>, [_this.$layer]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//如果读到缓存数据，直接返回不执行后面的了</span></span><br><span class="line">      <span class="keyword">if</span> (cache.readData(url)) &#123;</span><br><span class="line">        <span class="comment">//读取缓存，并返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$elem.trigger(<span class="string">'successEvent'</span>, [cache.readData(url), _this.$layer]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//如果有新的请求，就会停止以前的请求，来直接完成新的。这个ajax的abort()以前好像都没听过。我服了</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.jqXHR) <span class="keyword">this</span>.jqXHR.abort()</span><br><span class="line">      <span class="keyword">this</span>.jqXHR = $.ajax(&#123;</span><br><span class="line">        <span class="comment">//这里的接口是请求，淘宝的数据，因为我们没数据</span></span><br><span class="line">        url: <span class="keyword">this</span>.options.url + url,</span><br><span class="line">        <span class="comment">// timeout: 1, //超时</span></span><br><span class="line">        dataType: <span class="string">"jsonp"</span>, <span class="comment">//跨域</span></span><br><span class="line">      &#125;).done(<span class="function"><span class="keyword">function</span> (<span class="params">data, $layer</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//数据缓存，添加缓存</span></span><br><span class="line">        cache.addData(url, data)</span><br><span class="line">        <span class="comment">//抛出成功事件，向外传输数据要用数组的形式</span></span><br><span class="line">        _this.$elem.trigger(<span class="string">'successEvent'</span>, [data, _this.$layer]);</span><br><span class="line">      &#125;).fail(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        _this.$elem.trigger(<span class="string">'errEvent'</span>, [_this.$layer]);</span><br><span class="line">      &#125;).always(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//这个回调时不管是成功还是失败都会执行，所以这时候清空这个方法，这里清空了，上面的判断呢？这个还有待研究</span></span><br><span class="line">        _this.jqXHR = <span class="literal">null</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    showLayer: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// if(this.$layer.children().length === 0) &#123; return</span></span><br><span class="line">      <span class="comment">//   console.log('s');</span></span><br><span class="line">      <span class="comment">// &#125;;</span></span><br><span class="line">      <span class="comment">// `index.js` 的显示动画</span></span><br><span class="line">      <span class="keyword">this</span>.$layer.showHide(<span class="string">'show'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hideLayer: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// `index.js` 的隐藏动画</span></span><br><span class="line">      <span class="keyword">this</span>.$layer.showHide(<span class="string">'hide'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    gitInputVal: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 处理input输入的字符串的方法</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$input.val().trim()</span><br><span class="line">    &#125;,</span><br><span class="line">    setInput: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//处理下拉框点击后字符串转换的问题，有些字符串自带html标签，这里要通过正则删除</span></span><br><span class="line">      <span class="keyword">this</span>.$input.val(removeHtmlTags(val))</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">removeHtmlTags</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.replace(<span class="regexp">/&lt;(?:[^&gt;'"]|"[^"]*"|'[^']*')*&gt;/g</span>, <span class="string">''</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  $.fn.extend(&#123;</span><br><span class="line">    <span class="comment">//这里就多了个接收参数</span></span><br><span class="line">    search: <span class="function"><span class="keyword">function</span>(<span class="params">option, $layer</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> search = $(<span class="keyword">this</span>).data(<span class="string">'search'</span>),</span><br><span class="line">          $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</span><br><span class="line">          options = $.extend(&#123;&#125;, Search.DEFAULTS, <span class="keyword">typeof</span> option === <span class="string">'object'</span> &amp;&amp; option);</span><br><span class="line">        <span class="keyword">if</span> (!search) &#123;</span><br><span class="line">          $($<span class="keyword">this</span>).data(<span class="string">'search'</span>, search = <span class="keyword">new</span> Search($<span class="keyword">this</span>, options))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// var mode = new Dropdown(this, option)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> search[option] === <span class="string">'function'</span>) &#123;</span><br><span class="line">          search[option]($layer)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)(jQuery)</span><br></pre></td></tr></table></figure><p>调用代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="string">''</span>,</span><br><span class="line">    htmlload = $(<span class="string">'.search-layer'</span>).html();</span><br><span class="line">$(<span class="string">'.search'</span>).search(&#123; <span class="comment">//初始化</span></span><br><span class="line">  autocomplete: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .on(<span class="string">'successEvent'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e, data, $layer</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//这个方法是处理获取的数据，便利后返回html元素标签结构</span></span><br><span class="line">    html = createHeaderLyaer(data, $layer)</span><br><span class="line">    <span class="comment">//如果有值则显示html，</span></span><br><span class="line">    <span class="keyword">if</span> (html) &#123;</span><br><span class="line">      $layer.html(html)</span><br><span class="line">      $(<span class="keyword">this</span>).search(<span class="string">'showLayer'</span>, $layer)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $layer.html(<span class="string">''</span>)</span><br><span class="line">      $(<span class="keyword">this</span>).search(<span class="string">'hideLayer'</span>, $layer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">'click'</span>, <span class="string">'li'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//每个li绑定点击事件，点击的时候就会提交数据，不用a标签，我一直以为用的是a标签。。</span></span><br><span class="line">    <span class="comment">//这个方法主要做的是把点击后的元素内容放到input的val值上面，还用这用正则处理了内容</span></span><br><span class="line">    $(<span class="string">'.search'</span>).search(<span class="string">'setInput'</span>, $(<span class="keyword">this</span>).html())</span><br><span class="line">    <span class="comment">// $('.search-form').submit()</span></span><br><span class="line">    <span class="comment">//提交验证，这里是可以通过验证的，所以是一个提交操作</span></span><br><span class="line">    $(<span class="string">'.search'</span>).search(<span class="string">'submit'</span>)</span><br><span class="line">  &#125;).on(<span class="string">'errEvent'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e, $layer</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//这个是手动抛出一个事件，主要是错误的时候抛出，确实，如果是错误抛出，我这里逻辑还有问题，我没有把他用作错误处理，应该再写一个事件来处理这个事情，以为他再ajax出错的时候也调用了，和我的逻辑想错，这个问题这里暂不做处理</span></span><br><span class="line">    $layer.html(htmlload)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createHeaderLyaer</span>(<span class="params">data, $layer</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//成功回调</span></span><br><span class="line">    <span class="keyword">var</span> html = <span class="string">''</span>,</span><br><span class="line">        dataNum = data.result.length,</span><br><span class="line">        numMax = <span class="number">9</span>; <span class="comment">//自定义显示条目</span></span><br><span class="line">    <span class="keyword">if</span> (dataNum === <span class="number">0</span>) &#123; <span class="comment">//没有数据就直接退出</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dataNum; i++) &#123; <span class="comment">//循环遍历数据</span></span><br><span class="line">      <span class="keyword">if</span> (numMax &lt;= i) &#123; <span class="comment">//自定义显示条目</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      html += <span class="string">'&lt;li class="search-layer-item text-ellipsis"&gt;'</span>+data.result[i][<span class="number">0</span>]+<span class="string">'&lt;/li&gt;'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h1 id="手动完成购物车，我服了。。"><a href="#手动完成购物车，我服了。。" class="headerlink" title="手动完成购物车，我服了。。"></a>手动完成购物车，我服了。。</h1><p>完成了，用的是前面下拉的动画组件</p><h1 id="focus区域结构"><a href="#focus区域结构" class="headerlink" title="focus区域结构"></a>focus区域结构</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">category   左侧</span><br><span class="line">  a.category-title</span><br><span class="line">    i</span><br><span class="line">  ul.category-list</span><br><span class="line">    li.doropdown</span><br><span class="line">      div.dropdown-toggle</span><br><span class="line">        a.dropdown-link</span><br><span class="line">          i</span><br><span class="line">    div.dropdown-layer</span><br><span class="line">      dl.category-details.clearfix</span><br><span class="line">        dt.category-details-title</span><br><span class="line">          a.category-details-title-link</span><br><span class="line">        dd.category-details-item</span><br><span class="line">          a.link</span><br><span class="line">carousel   幻灯片</span><br><span class="line">focus-sidebar</span><br></pre></td></tr></table></figure><h2 id="focus-html结构"><a href="#focus-html结构" class="headerlink" title="focus html结构"></a>focus html结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">div.focus-sidebar.fr</span><br><span class="line">  div.focus-news</span><br><span class="line">    div.focus-news-head</span><br><span class="line">      h2.focus-news-title.fl</span><br><span class="line">      a.link.fr</span><br><span class="line">    div.focus-news-body</span><br><span class="line">      p.text-ellipsis</span><br><span class="line">        a.link</span><br><span class="line">          strong</span><br><span class="line">  div.focus-service</span><br><span class="line">  div.focus-ad</span><br></pre></td></tr></table></figure><h2 id="便捷服务"><a href="#便捷服务" class="headerlink" title="便捷服务"></a>便捷服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div.focus-service</span><br><span class="line">  a.fl.focus-service-item</span><br><span class="line">    i.iconfont.focus-service-icon</span><br><span class="line">    span.focus-service-text</span><br></pre></td></tr></table></figure><h2 id="幻灯片页面结构"><a href="#幻灯片页面结构" class="headerlink" title="幻灯片页面结构"></a>幻灯片页面结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">div.slider</span><br><span class="line">  div.slider-container</span><br><span class="line">    div.slide-item</span><br><span class="line">      a</span><br><span class="line">        img</span><br><span class="line">  ol.slider-indicator-wrap</span><br><span class="line">    li.fl.slider-indicator</span><br><span class="line">  a.slider-control-left</span><br><span class="line">  a.slider-control-right</span><br></pre></td></tr></table></figure><h1 id="幻灯片这里用了给技巧，左右滑动"><a href="#幻灯片这里用了给技巧，左右滑动" class="headerlink" title="幻灯片这里用了给技巧，左右滑动"></a>幻灯片这里用了给技巧，左右滑动</h1><p>第一种滑动是很简单的：<br>比如向左滑动，切换的时候把下一张图片放置到-100%的位置，因为是瞬间的，人眼是看不到的，然后开始上一个元素向右运动，当前元素进入，造成一个从左边出来的假象，右滑动一个道理，没写的时候脑子还真像不过来。。。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始位置，去除transition是因为这里的动画必须是瞬间的，所以必须清楚</span></span><br><span class="line"><span class="keyword">this</span>.$items.eq(index).removeClass(<span class="keyword">this</span>.transitionClass).css(<span class="string">'left'</span>, <span class="number">-1</span> * direction * <span class="keyword">this</span>.itemWidth)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动画开始，</span></span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  self.$items.eq(self.curIndex).move(<span class="string">'to'</span>, direction * self.itemWidth)</span><br><span class="line">  <span class="comment">//这里添加是因为我们仅清除了 index的动画，curIndex没有清楚动画</span></span><br><span class="line">  self.$items.eq(index).addClass(self.transitionClass).move(<span class="string">'to'</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="comment">//如果写到外面会有bug</span></span><br><span class="line">  self.curIndex = index</span><br><span class="line">&#125;, <span class="number">20</span>)</span><br></pre></td></tr></table></figure></p><h2 id="mongoose"><a href="#mongoose" class="headerlink" title="mongoose"></a>mongoose</h2><p>命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">show dbs // 所有数据库</span><br><span class="line">use imooc // 连接该库，没有则创建</span><br><span class="line">show tables // 查询该库的 表/集合 </span><br><span class="line"></span><br><span class="line">db // 当前所在数据库</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开发网站记录&quot;&gt;&lt;a href=&quot;#开发网站记录&quot; class=&quot;headerlink&quot; title=&quot;开发网站记录&quot;&gt;&lt;/a&gt;开发网站记录&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>重学jQuery API</title>
    <link href="demoorbug.github.io/2019/03/16/%E9%87%8D%E5%AD%A6jQuery/"/>
    <id>demoorbug.github.io/2019/03/16/重学jQuery/</id>
    <published>2019-03-16T14:51:33.000Z</published>
    <updated>2022-03-15T22:58:15.963Z</updated>
    
    <content type="html"><![CDATA[<p>本来看jQuery源码的，发现不是现阶段看的东西，最好还是把jquery api查看一下<br><a id="more"></a></p><h1 id="api开始看起"><a href="#api开始看起" class="headerlink" title="api开始看起"></a>api开始看起</h1><h1 id="add"><a href="#add" class="headerlink" title=".add()"></a>.add()</h1><p>将匹配元素添加到集合中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.j'</span>).add(<span class="string">'.name'</span>).css(&#123;<span class="string">'background'</span>: <span class="string">'red'</span>&#125;) <span class="comment">//会给匹配到的.j .name都添加背景色</span></span><br></pre></td></tr></table></figure></p><h1 id="addBack"><a href="#addBack" class="headerlink" title=".addBack()"></a>.addBack()</h1><p>这个就是将前面匹配的元素组合到一起<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.j'</span>).find(<span class="string">'p'</span>).addBack().addClass(<span class="string">'background'</span>);<span class="comment">//给匹配到的P元素添加class，匹配到的.j class也添加class</span></span><br></pre></td></tr></table></figure></p><h1 id="addClass"><a href="#addClass" class="headerlink" title=".addClass()"></a>.addClass()</h1><p>顾名思义添加class<br>可以接收一个字符串，或者一个回调函数，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.j'</span>).addClass(<span class="function"><span class="keyword">function</span> (<span class="params">index, currentClass</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'item-'</span> + index</span><br><span class="line"><span class="comment">//currentClass就是当前元素的Class，这里面的this代表元素本身，chrome只能看到元素，firefox可以看到元素的属性和方法，如果用ES6的箭头函数则this代表window对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h1 id="after"><a href="#after" class="headerlink" title=".after()"></a>.after()</h1><p>给匹配元素集合中插入参数所指定的内容<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.inner'</span>).after(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;div&gt;'</span> + <span class="keyword">this</span>.className + <span class="string">'&lt;/div&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//可以接收一个函数，或者直接传参，有函数操作起来多样性this和上面一样</span></span><br></pre></td></tr></table></figure></p><h1 id="ajaxComplete"><a href="#ajaxComplete" class="headerlink" title=".ajaxComplete()"></a>.ajaxComplete()</h1><p>请求完成时注册一个回调函数，和start很像<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ajaxComplete(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'s'</span>)</span><br><span class="line">  $( <span class="string">".log"</span> ).text( <span class="string">"Triggered ajaxComplete handler."</span> );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="ajaxError"><a href="#ajaxError" class="headerlink" title=".ajaxError()"></a>.ajaxError()</h2><p>Ajax请求失败，触发该回调函数</p><h2 id="ajaxSend"><a href="#ajaxSend" class="headerlink" title=".ajaxSend()"></a>.ajaxSend()</h2><p>ajax发送请求前执行</p><h2 id="ajaxStart"><a href="#ajaxStart" class="headerlink" title=".ajaxStart()"></a>.ajaxStart()</h2><p>ajax发送刚开始执行</p><h2 id="ajaxStop"><a href="#ajaxStop" class="headerlink" title=".ajaxStop()"></a>.ajaxStop()</h2><p>ajax发送完成后执行</p><h1 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h1><p>和after() 好像啊，一样的？<br>匹配到的元素后添加</p><h2 id="appendTo"><a href="#appendTo" class="headerlink" title="appendTo"></a>appendTo</h2><p>匹配到的元素前</p><h1 id="attr"><a href="#attr" class="headerlink" title=".attr()"></a>.attr()</h1><p>获取匹配元素的属性或设置属性的值</p><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p>模板<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hom"</span> <span class="attr">wot</span>=<span class="string">"cn"</span>&gt;</span></span><br><span class="line">  use name</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hom"</span> <span class="attr">wot</span>=<span class="string">"cn n"</span>&gt;</span></span><br><span class="line">  use name</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hom"</span> <span class="attr">wot</span>=<span class="string">"cnnnbbb-n"</span>&gt;</span></span><br><span class="line">  use name</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hom"</span> <span class="attr">wot</span>=<span class="string">"cn-youcan"</span>&gt;</span></span><br><span class="line">  use name</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="name-value"><a href="#name-value" class="headerlink" title="[name|=value]"></a>[name|=value]</h2><p>可以匹配到上面<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div[wot|=cn]'</span></span><br><span class="line"><span class="comment">//可以匹配到cn-开头的</span></span><br></pre></td></tr></table></figure></p><h2 id="name-value-1"><a href="#name-value-1" class="headerlink" title="[name*=value]"></a>[name*=value]</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只要是包含cn的，都可以匹配到</span></span><br></pre></td></tr></table></figure><h2 id="name-value-2"><a href="#name-value-2" class="headerlink" title="[name$=value]"></a>[name$=value]</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value结尾的</span><br></pre></td></tr></table></figure><h2 id="name-value-3"><a href="#name-value-3" class="headerlink" title="[name~=value]"></a>[name~=value]</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">以空格间隔的</span><br><span class="line">cn n</span><br></pre></td></tr></table></figure><h2 id="name-value-4"><a href="#name-value-4" class="headerlink" title="[name=value]"></a>[name=value]</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">绝对匹配</span><br></pre></td></tr></table></figure><h2 id="name-value-5"><a href="#name-value-5" class="headerlink" title="[name$=value]"></a>[name$=value]</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="tab-开发"><a href="#tab-开发" class="headerlink" title="tab 开发"></a>tab 开发</h1><h2 id="extend"><a href="#extend" class="headerlink" title="$.extend()"></a>$.extend()</h2><p>可以使用深度拷贝，但是本节用法好像就是普通合并？<br>直接=赋值好像也可以？</p><h2 id="parseJSON"><a href="#parseJSON" class="headerlink" title="$.parseJSON()"></a>$.parseJSON()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接收一个json字符串，返回解析后的javascript对象</span><br></pre></td></tr></table></figure><h2 id="siblings"><a href="#siblings" class="headerlink" title=".siblings()"></a>.siblings()</h2><p>匹配元素的其他同级元素</p><h2 id="trigger"><a href="#trigger" class="headerlink" title=".trigger()"></a>.trigger()</h2><p>手动触发事件</p><p>有个事件冒泡bug，是这个解决的<br><a href="https://www.imooc.com/qadetail/213077" target="_blank" rel="noopener">阻止事件冒泡</a></p><h1 id="防抖处理"><a href="#防抖处理" class="headerlink" title="防抖处理"></a>防抖处理</h1><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p><strong>向量： Vab = Pb -Pa</strong><br><strong>二维向量叉乘公式：</strong><br>a(x1, y1) <em> b(x2,y2) = x1</em>y2 - x2*y1</p><p><strong>用叉乘法判断点在三角形内</strong></p><p>学习视频：<a href="https://study.163.com/course/courseMain.htm?courseId=465001" target="_blank" rel="noopener">逐行分析jQuery</a><br>jQuery学习版本：2.0.3</p><h2 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h2><p>匿名函数自执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a  = <span class="number">10</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(a)</span><br><span class="line">  &#125;</span><br><span class="line">  windows.$ = $ <span class="comment">//暴露出去</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><h2 id="js继承机制"><a href="#js继承机制" class="headerlink" title="js继承机制"></a>js继承机制</h2><p>用构造函数生成的实例对象，有一个缺点，那就是无法共享属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.sg = <span class="string">'犬科'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Dog(<span class="string">'大毛'</span>)</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Dog(<span class="string">'二毛'</span>)</span><br><span class="line">s2.sg = <span class="string">'猫科'</span></span><br><span class="line"><span class="built_in">console</span>.log(s) <span class="comment">//犬科</span></span><br><span class="line"><span class="comment">//犬科的方法无法继承</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">  Dog.prototype = &#123;</span><br><span class="line">    sg = <span class="string">'猫科'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Dog(<span class="string">'大毛'</span>)</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Dog(<span class="string">'二毛'</span>)</span><br><span class="line">s2.sg = <span class="string">'猫科'</span></span><br><span class="line"><span class="built_in">console</span>.log(s) <span class="comment">//猫科</span></span><br><span class="line"><span class="comment">//写在原型上的就会被继承</span></span><br><span class="line"><span class="comment">//s2实现了继承</span></span><br></pre></td></tr></table></figure><h2 id="第四节"><a href="#第四节" class="headerlink" title="第四节"></a>第四节</h2><p>匿名函数自执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure></p><p>之所以传入window有两个原因:</p><ol><li>可以提快window的查找速度</li><li>压缩代码后，有利于代码压缩如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(function(e)&#123;&#125;)(window)</span><br></pre></td></tr></table></figure></li></ol><p>接收的window会被替换为e</p><p>接收undefined<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function (window, undefined) &#123;</span><br><span class="line"></span><br><span class="line">&#125;)(window)</span><br></pre></td></tr></table></figure></p><p>接收一个形参，undefined，防止被外部修改<br>因为undefined非关键字，非保留字，所以低版本浏览器bug可以修改，IE8一下浏览器都有这个bug<br>一下是修改undefined例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="literal">undefined</span> = <span class="number">15</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="comment">// 如果a没有值则为a赋值.  但因为undefined被重写了，所以这句根本执行不到。</span></span><br><span class="line">  <span class="built_in">console</span>.log(a, <span class="literal">undefined</span>);</span><br><span class="line">  <span class="keyword">if</span> (a === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      a = <span class="string">'b'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>参考文章: <a href="https://blog.csdn.net/qjx3936888/article/details/83858467" target="_blank" rel="noopener">为什么要传入 undefined</a></p><h2 id="第五节"><a href="#第五节" class="headerlink" title="第五节"></a>第五节</h2><p>jQuery设计原理<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jQuery</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jQuery.prototype.init()</span><br><span class="line">&#125;</span><br><span class="line">  jQuery.prototype = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">    css: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'nice'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">jQuery.prototype.init.prototype = jQuery.prototype</span><br><span class="line">jQuery().css()</span><br></pre></td></tr></table></figure></p><h2 id="第七节"><a href="#第七节" class="headerlink" title="第七节"></a>第七节</h2><ol><li>为什么要把constructor重新指向的原因：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Arr() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Arr.prototype = &#123;</span><br><span class="line">  name = &apos;hhh&apos;</span><br><span class="line">&#125;</span><br><span class="line">var a1 = new Arr()</span><br><span class="line">console.log(a1.constructor) //Object()</span><br></pre></td></tr></table></figure><p>因为这样写会把prototype赋值一个新的对象<br>而这样写就不会<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Arr () &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Arr.prototype.name = &apos;hhh&apos;</span><br><span class="line">var a1 = new Arr()</span><br><span class="line">console.log(a1.constructor) //Arr()</span><br></pre></td></tr></table></figure></p><p>这样写就不会改变constructor<br>不过对象的方式比较方便，常用所以改下成下面的写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Arr() &#123;&#125;</span><br><span class="line">Arr.prototype = &#123;</span><br><span class="line">  constructor: Arr,</span><br><span class="line">  name: &apos;hhh&apos;</span><br><span class="line">&#125;</span><br><span class="line">var a1 = new Arr()</span><br><span class="line">console.log(a1.constructor) //Arr()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来看jQuery源码的，发现不是现阶段看的东西，最好还是把jquery api查看一下&lt;br&gt;
    
    </summary>
    
    
      <category term="jQuery" scheme="demoorbug.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>webpack 4配置</title>
    <link href="demoorbug.github.io/2019/03/08/webpack-4%E9%85%8D%E7%BD%AE/"/>
    <id>demoorbug.github.io/2019/03/08/webpack-4配置/</id>
    <published>2019-03-08T14:45:23.000Z</published>
    <updated>2022-03-15T22:58:15.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack-配置"><a href="#webpack-配置" class="headerlink" title="webpack 配置"></a>webpack 配置</h1><a id="more"></a><h1 id="更新后的配置，目前再用的，以前的废弃了"><a href="#更新后的配置，目前再用的，以前的废弃了" class="headerlink" title="更新后的配置，目前再用的，以前的废弃了"></a>更新后的配置，目前再用的，以前的废弃了</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> devMode = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"><span class="comment">// const devMode = true</span></span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">'./src/pages/index/index.js'</span>,</span><br><span class="line">    <span class="comment">// main: './src/pages/page1/main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/pages/index/index.html'</span>,</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">      inject: <span class="literal">true</span>,</span><br><span class="line">      hash: <span class="literal">true</span>,</span><br><span class="line">      chunks: [<span class="string">'vendor'</span>,<span class="string">'common'</span>,<span class="string">'runtime'</span>,<span class="string">'index'</span>],</span><br><span class="line">      minify: process.env.NODE_ENV !== <span class="string">"production"</span> ? <span class="literal">false</span> : &#123;</span><br><span class="line">          removeComments: <span class="literal">true</span>,</span><br><span class="line">          <span class="comment">// collapseWhitespace: true,</span></span><br><span class="line">          removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line"><span class="comment">/*    new HtmlWebpackPlugin(&#123;</span></span><br><span class="line"><span class="comment">      template: './src/pages/page1/main.html',</span></span><br><span class="line"><span class="comment">      filename: 'main.html',</span></span><br><span class="line"><span class="comment">      inject: true,</span></span><br><span class="line"><span class="comment">      hash: true,</span></span><br><span class="line"><span class="comment">      chunks: ['vendor','common','runtime','main'],</span></span><br><span class="line"><span class="comment">      minify: process.env.NODE_ENV !== "production" ? false : &#123;</span></span><br><span class="line"><span class="comment">          removeComments: true,</span></span><br><span class="line"><span class="comment">          // collapseWhitespace: true,</span></span><br><span class="line"><span class="comment">          removeAttributeQuotes: true,</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125;),*/</span></span><br><span class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: <span class="string">'jquery'</span>,</span><br><span class="line">      jQuery: <span class="string">'jquery'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: devMode ? <span class="string">'js/[name].[hash:8].js'</span>: <span class="string">'js/[name].[chunkhash:8].js'</span>,</span><br><span class="line">    chunkFilename: devMode ? <span class="string">'js/[name].[hash:8].js'</span>: <span class="string">'js/[name].[chunkhash:8].js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'./'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="comment">// '@': resolve('src'),</span></span><br><span class="line">      <span class="string">'@'</span>: path.resolve(__dirname, <span class="string">'../src/'</span>),</span><br><span class="line">      <span class="string">'~node'</span>: path.resolve(__dirname, <span class="string">'../node_modules/'</span>),</span><br><span class="line">      <span class="string">'~css'</span>: path.resolve(__dirname, <span class="string">'../src/css/'</span>),</span><br><span class="line">      <span class="comment">// 'common': resolve('src/common')</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    runtimeChunk: <span class="string">'single'</span>,</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">          vendor: &#123; <span class="comment">// 抽离第三方插件</span></span><br><span class="line">              test: <span class="regexp">/node_modules/</span>, <span class="comment">// 指定是node_modules下的第三方包</span></span><br><span class="line">              chunks: <span class="string">'initial'</span>,</span><br><span class="line">              name: <span class="string">'vendor'</span>, <span class="comment">// 打包后的文件名，任意命名</span></span><br><span class="line">              <span class="comment">// 设置优先级，防止和自定义的公共代码提取时被覆盖，不进行打包</span></span><br><span class="line">              priority: <span class="number">10</span></span><br><span class="line">          &#125;,</span><br><span class="line">          utils: &#123; <span class="comment">// 抽离自己写的公共代码，common这个名字可以随意起</span></span><br><span class="line">              chunks: <span class="string">'initial'</span>,</span><br><span class="line">              name: <span class="string">'common'</span>, <span class="comment">// 任意命名</span></span><br><span class="line">              minSize: <span class="number">0</span>, <span class="comment">// 只要超出0字节就生成一个新包</span></span><br><span class="line">              minChunks: <span class="number">2</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(less|css)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//因为只有style-loader有热更新，所以这么写</span></span><br><span class="line">            loader: devMode ? <span class="string">'style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class="line">            options: devMode ? &#123;</span><br><span class="line">              sourceMap: <span class="literal">true</span>,</span><br><span class="line">            &#125; : &#123;</span><br><span class="line">              publicPath: <span class="string">'../'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              sourceMap: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              ident: <span class="string">'postcss'</span>,</span><br><span class="line">              sourceMap: <span class="literal">true</span>,</span><br><span class="line">              plugins: [</span><br><span class="line">                <span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'less-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              sourceMap: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(gif|png|jpe?g|svg)$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            <span class="comment">// loader: 'file-loader',</span></span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span>,</span><br><span class="line">              name: <span class="string">'[name].img.[hash:5].[ext]'</span>,</span><br><span class="line">              outputPath: <span class="string">'img'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"image-webpack-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              mozjpeg: &#123;</span><br><span class="line">                progressive: <span class="literal">true</span>,</span><br><span class="line">                quality: <span class="number">65</span></span><br><span class="line">              &#125;,</span><br><span class="line">              optipng: &#123;</span><br><span class="line">                enabled: <span class="literal">false</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              pngquant: &#123;</span><br><span class="line">                quality: <span class="string">'65-90'</span>,</span><br><span class="line">                speed: <span class="number">4</span></span><br><span class="line">              &#125;,</span><br><span class="line">              gifsicle: &#123;</span><br><span class="line">                interlaced: <span class="literal">false</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf|svg)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              name: <span class="string">'css/font/[name].font.[hash:6].[ext]'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//raw-loader是修改html更新页面，而且必须这么写，不然两个一起用会出现bug，如果只用raw-loader页面就没办法处理Img了</span></span><br><span class="line">            loader: <span class="string">'html-loader?config=raw-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              attrs: [<span class="string">'img:src'</span>, <span class="string">'img:data-src'</span>],</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">//这里也是踩坑了，必须webpack这么写，然后.babelrc 才会被处理</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'babel-loader'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"@babel/preset-env"</span>],</span><br><span class="line">  <span class="attr">"plugins"</span>: [[<span class="string">"@babel/plugin-transform-runtime"</span>, &#123; <span class="attr">"corejs"</span>: <span class="number">2</span> &#125;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="webpack-dev-js-主要就是更新了路径把，因为目录全部迁移到build了"><a href="#webpack-dev-js-主要就是更新了路径把，因为目录全部迁移到build了" class="headerlink" title="webpack.dev.js 主要就是更新了路径把，因为目录全部迁移到build了"></a>webpack.dev.js 主要就是更新了路径把，因为目录全部迁移到build了</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common.js'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: path.resolve(__dirname, <span class="string">'../src/pages/assets'</span>),</span><br><span class="line">    publicPath: <span class="string">'/'</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// compress: true,</span></span><br><span class="line">    <span class="comment">// overlay: true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="webpack-prod-js"><a href="#webpack-prod-js" class="headerlink" title="webpack.prod.js"></a>webpack.prod.js</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common.js'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">"optimize-css-assets-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="comment">// const UglifyJsPlugin = require("uglifyjs-webpack-plugin");</span></span><br><span class="line"><span class="keyword">const</span> TerserPlugin = <span class="built_in">require</span>(<span class="string">'terser-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="comment">// const Purifycss = require('purifycss-webpack')</span></span><br><span class="line"><span class="keyword">const</span> PurgecssPlugin = <span class="built_in">require</span>(<span class="string">'purgecss-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob-all'</span>)</span><br><span class="line"><span class="keyword">const</span> copyWebpackPlugin = <span class="built_in">require</span>(<span class="string">"copy-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PATHS = &#123;</span><br><span class="line">  src: path.join(__dirname, <span class="string">'../src'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="comment">//这个可以支持es6语法，不过用babel打包后也可以支持？，没测试，当时是babel没设置好，出现了一点bug</span></span><br><span class="line">      <span class="keyword">new</span> TerserPlugin(),</span><br><span class="line">      <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist/*'</span>],&#123;</span><br><span class="line">      root: path.resolve(__dirname, <span class="string">'../'</span>), <span class="comment">//根目录</span></span><br><span class="line">      verbose: <span class="literal">true</span>, <span class="comment">//开启在控制台输出信息</span></span><br><span class="line">      dry: <span class="literal">false</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">"css/[name].[contenthash:8].css"</span>,</span><br><span class="line">      chunkFilename: <span class="string">"css/[name].[contenthash:8].css"</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">//拷贝静态文件，这个其实还要再改的，我没弄，不过这个改起来很方便</span></span><br><span class="line">    <span class="keyword">new</span> copyWebpackPlugin([&#123;</span><br><span class="line">        <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">"../src/assets"</span>),</span><br><span class="line">        to: <span class="string">'./assets'</span>,</span><br><span class="line">        <span class="comment">// ignore: ['.*']</span></span><br><span class="line">    &#125;]),</span><br><span class="line">    <span class="keyword">new</span> copyWebpackPlugin([&#123;</span><br><span class="line">        <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">"../src/pages/assets"</span>),</span><br><span class="line">        to: <span class="string">'./'</span>,</span><br><span class="line">        ignore: [<span class="string">'.*'</span>]</span><br><span class="line">    &#125;]),</span><br><span class="line">    <span class="comment">// new Purifycss(&#123;</span></span><br><span class="line">    <span class="comment">//   paths: glob.sync([</span></span><br><span class="line">    <span class="comment">//     path.join(__dirname, '../src/pages/*/*.html'),</span></span><br><span class="line">    <span class="comment">//     path.join(__dirname, '../src/pages/*/*.js')</span></span><br><span class="line">    <span class="comment">//   ]),</span></span><br><span class="line">    <span class="comment">//   purifyOptions: &#123;</span></span><br><span class="line">    <span class="comment">//     whitelist: ['slick.less','slick-theme.less']</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;),</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//css的去重，以前用的purifycss，好像不更新了，这个是新版，后面有个白名单，正则匹配，就是不管里面的class命名的代码</span></span><br><span class="line">    <span class="keyword">new</span> PurgecssPlugin(&#123;</span><br><span class="line">      paths: glob.sync(<span class="string">`<span class="subst">$&#123;PATHS.src&#125;</span>/pages/*/*`</span>,  &#123; <span class="attr">nodir</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">      <span class="comment">//白名单css，正则匹配css</span></span><br><span class="line">      whitelistPatterns: [<span class="regexp">/^(slick)/</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"shop"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"webpack.common.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"cross-env NODE_ENV=development webpack-dev-server --host 0.0.0.0 --config build/webpack.dev.js"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack --config build/webpack.prod.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"git+https://github.com/DemoorBug/shop.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/DemoorBug/shop/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"https://github.com/DemoorBug/shop#readme"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@babel/core"</span>: <span class="string">"^7.3.4"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-runtime"</span>: <span class="string">"^7.3.4"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-env"</span>: <span class="string">"^7.3.4"</span>,</span><br><span class="line">    <span class="attr">"@babel/runtime"</span>: <span class="string">"^7.3.4"</span>,</span><br><span class="line">    <span class="attr">"@babel/runtime-corejs2"</span>: <span class="string">"^7.3.4"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^8.0.5"</span>,</span><br><span class="line">    <span class="attr">"clean-webpack-plugin"</span>: <span class="string">"^1.0.1"</span>,</span><br><span class="line">    <span class="attr">"copy-webpack-plugin"</span>: <span class="string">"^5.0.0"</span>,</span><br><span class="line">    <span class="attr">"cross-env"</span>: <span class="string">"^5.2.0"</span>,</span><br><span class="line">    <span class="attr">"css-loader"</span>: <span class="string">"^2.1.0"</span>,</span><br><span class="line">    <span class="attr">"eslint"</span>: <span class="string">"^5.15.1"</span>,</span><br><span class="line">    <span class="attr">"file-loader"</span>: <span class="string">"^3.0.1"</span>,</span><br><span class="line">    <span class="attr">"glob-all"</span>: <span class="string">"^3.1.0"</span>,</span><br><span class="line">    <span class="attr">"html-loader"</span>: <span class="string">"^0.5.5"</span>,</span><br><span class="line">    <span class="attr">"html-webpack-plugin"</span>: <span class="string">"^3.2.0"</span>,</span><br><span class="line">    <span class="attr">"image-webpack-loader"</span>: <span class="string">"^4.6.0"</span>,</span><br><span class="line">    <span class="attr">"imagemin"</span>: <span class="string">"^6.1.0"</span>,</span><br><span class="line">    <span class="attr">"imagemin-gifsicle"</span>: <span class="string">"^6.0.1"</span>,</span><br><span class="line">    <span class="attr">"imagemin-mozjpeg"</span>: <span class="string">"^8.0.0"</span>,</span><br><span class="line">    <span class="attr">"imagemin-optipng"</span>: <span class="string">"^6.0.0"</span>,</span><br><span class="line">    <span class="attr">"imagemin-pngquant"</span>: <span class="string">"^7.0.0"</span>,</span><br><span class="line">    <span class="attr">"imagemin-svgo"</span>: <span class="string">"^7.0.0"</span>,</span><br><span class="line">    <span class="attr">"imagemin-webp"</span>: <span class="string">"^5.0.0"</span>,</span><br><span class="line">    <span class="attr">"img-loader"</span>: <span class="string">"^3.0.1"</span>,</span><br><span class="line">    <span class="attr">"less"</span>: <span class="string">"^3.9.0"</span>,</span><br><span class="line">    <span class="attr">"less-loader"</span>: <span class="string">"^4.1.0"</span>,</span><br><span class="line">    <span class="attr">"mini-css-extract-plugin"</span>: <span class="string">"^0.5.0"</span>,</span><br><span class="line">    <span class="attr">"optimize-css-assets-webpack-plugin"</span>: <span class="string">"^5.0.1"</span>,</span><br><span class="line">    <span class="attr">"postcss-cssnext"</span>: <span class="string">"^3.1.0"</span>,</span><br><span class="line">    <span class="attr">"postcss-loader"</span>: <span class="string">"^3.0.0"</span>,</span><br><span class="line">    <span class="attr">"postcss-preset-env"</span>: <span class="string">"^6.6.0"</span>,</span><br><span class="line">    <span class="attr">"purgecss-webpack-plugin"</span>: <span class="string">"^1.4.0"</span>,</span><br><span class="line">    <span class="attr">"purify-css"</span>: <span class="string">"^1.2.5"</span>,</span><br><span class="line">    <span class="attr">"purifycss-webpack"</span>: <span class="string">"^0.7.0"</span>,</span><br><span class="line">    <span class="attr">"raw-loader"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"style-loader"</span>: <span class="string">"^0.23.1"</span>,</span><br><span class="line">    <span class="attr">"terser-webpack-plugin"</span>: <span class="string">"^1.2.3"</span>,</span><br><span class="line">    <span class="attr">"uglifyjs-webpack-plugin"</span>: <span class="string">"^2.1.2"</span>,</span><br><span class="line">    <span class="attr">"url-loader"</span>: <span class="string">"^1.1.2"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.29.6"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.2.3"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^3.2.1"</span>,</span><br><span class="line">    <span class="attr">"webpack-merge"</span>: <span class="string">"^4.2.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"bootstrap"</span>: <span class="string">"^3.4.1"</span>,</span><br><span class="line">    <span class="attr">"jquery"</span>: <span class="string">"^3.3.1"</span>,</span><br><span class="line">    <span class="attr">"lodash"</span>: <span class="string">"^4.17.11"</span>,</span><br><span class="line">    <span class="attr">"minireset.css"</span>: <span class="string">"0.0.4"</span>,</span><br><span class="line">    <span class="attr">"normalize.css"</span>: <span class="string">"^8.0.1"</span>,</span><br><span class="line">    <span class="attr">"slick-carousel"</span>: <span class="string">"^1.8.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"browserslist"</span>: [</span><br><span class="line">    <span class="string">"&gt; 1%"</span>,</span><br><span class="line">    <span class="string">"last 2 versions"</span>,</span><br><span class="line">    <span class="string">"not ie &lt;= 8"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="webpack-common-js-后面的都弃用"><a href="#webpack-common-js-后面的都弃用" class="headerlink" title="webpack.common.js 后面的都弃用"></a>webpack.common.js 后面的都弃用</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> devMode = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"><span class="comment">// const devMode = true</span></span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//入口文件依据目录随时添加</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">'./src/pages/index/index.js'</span>,</span><br><span class="line">    main: <span class="string">'./src/pages/page1/main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">//HtmlWebpackPlugin这个也是依据入口文件随时添加，我这样写很麻烦，要弄个自动化的</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/pages/index/index.html'</span>,</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">      inject: <span class="literal">true</span>,</span><br><span class="line">      hash: <span class="literal">true</span>,</span><br><span class="line">      chunks: [<span class="string">'vendor'</span>,<span class="string">'common'</span>,<span class="string">'runtime'</span>,<span class="string">'index'</span>],</span><br><span class="line">      minify: process.env.NODE_ENV !== <span class="string">"production"</span> ? <span class="literal">false</span> : &#123;</span><br><span class="line">          removeComments: <span class="literal">true</span>,</span><br><span class="line">          <span class="comment">// collapseWhitespace: true,</span></span><br><span class="line">          removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/pages/page1/main.html'</span>,</span><br><span class="line">      filename: <span class="string">'main.html'</span>,</span><br><span class="line">      inject: <span class="literal">true</span>,</span><br><span class="line">      hash: <span class="literal">true</span>,</span><br><span class="line">      chunks: [<span class="string">'vendor'</span>,<span class="string">'common'</span>,<span class="string">'runtime'</span>,<span class="string">'main'</span>],</span><br><span class="line">      minify: process.env.NODE_ENV !== <span class="string">"production"</span> ? <span class="literal">false</span> : &#123;</span><br><span class="line">          removeComments: <span class="literal">true</span>,</span><br><span class="line">          <span class="comment">// collapseWhitespace: true,</span></span><br><span class="line">          removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: devMode ? <span class="string">'js/[name].[hash:8].js'</span>: <span class="string">'js/[name].[chunkhash:8].js'</span>,</span><br><span class="line">    chunkFilename: devMode ? <span class="string">'js/[name].[hash:8].js'</span>: <span class="string">'js/[name].[chunkhash:8].js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'./'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    runtimeChunk: <span class="string">'single'</span>,</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">          vendor: &#123; <span class="comment">// 抽离第三方插件</span></span><br><span class="line">              test: <span class="regexp">/node_modules/</span>, <span class="comment">// 指定是node_modules下的第三方包</span></span><br><span class="line">              chunks: <span class="string">'initial'</span>,</span><br><span class="line">              name: <span class="string">'vendor'</span>, <span class="comment">// 打包后的文件名，任意命名    </span></span><br><span class="line">              <span class="comment">// 设置优先级，防止和自定义的公共代码提取时被覆盖，不进行打包</span></span><br><span class="line">              priority: <span class="number">10</span></span><br><span class="line">          &#125;,</span><br><span class="line">          utils: &#123; <span class="comment">// 抽离自己写的公共代码，common这个名字可以随意起</span></span><br><span class="line">              chunks: <span class="string">'initial'</span>,</span><br><span class="line">              name: <span class="string">'common'</span>, <span class="comment">// 任意命名</span></span><br><span class="line">              minSize: <span class="number">0</span>, <span class="comment">// 只要超出0字节就生成一个新包</span></span><br><span class="line">              minChunks: <span class="number">2</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: devMode ? <span class="string">'style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class="line">            options: &#123;</span><br><span class="line">              sourceMap: <span class="literal">true</span>,</span><br><span class="line">              <span class="comment">//单独给css里面的路径设置规则，防止和html里面的img路径冲突</span></span><br><span class="line">              publicPath: <span class="string">'../'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              sourceMap: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              ident: <span class="string">'postcss'</span>,</span><br><span class="line">              sourceMap: <span class="literal">true</span>,</span><br><span class="line">              plugins: [</span><br><span class="line">                <span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(gif|png|jpe?g|svg)$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span>,</span><br><span class="line">              name: <span class="string">'[name].img.[hash:5].[ext]'</span>,</span><br><span class="line">              outputPath: <span class="string">'img'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"image-webpack-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              mozjpeg: &#123;</span><br><span class="line">                progressive: <span class="literal">true</span>,</span><br><span class="line">                quality: <span class="number">65</span></span><br><span class="line">              &#125;,</span><br><span class="line">              optipng: &#123;</span><br><span class="line">                enabled: <span class="literal">false</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              pngquant: &#123;</span><br><span class="line">                quality: <span class="string">'65-90'</span>,</span><br><span class="line">                speed: <span class="number">4</span></span><br><span class="line">              &#125;,</span><br><span class="line">              gifsicle: &#123;</span><br><span class="line">                interlaced: <span class="literal">false</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf|svg)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              name: <span class="string">'css/font/[name].font.[hash:6].[ext]'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'html-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              attrs: [<span class="string">'img:src'</span>, <span class="string">'img:data-src'</span>],</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,  </span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="webpack-dev-js"><a href="#webpack-dev-js" class="headerlink" title="webpack.dev.js"></a>webpack.dev.js</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common.js'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="webpack-prod-js-1"><a href="#webpack-prod-js-1" class="headerlink" title="webpack.prod.js"></a>webpack.prod.js</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">const merge = require(&apos;webpack-merge&apos;);</span><br><span class="line">const common = require(&apos;./webpack.common.js&apos;);</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">const CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;);</span><br><span class="line">const OptimizeCSSAssetsPlugin = require(&quot;optimize-css-assets-webpack-plugin&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line">const UglifyJsPlugin = require(&quot;uglifyjs-webpack-plugin&quot;);</span><br><span class="line">const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);</span><br><span class="line">const Purifycss = require(&apos;purifycss-webpack&apos;)</span><br><span class="line">const glob = require(&apos;glob-all&apos;)</span><br><span class="line">const copyWebpackPlugin = require(&quot;copy-webpack-plugin&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = merge(common, &#123;</span><br><span class="line">  mode: &apos;production&apos;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">      new UglifyJsPlugin(&#123; //处理js压缩</span><br><span class="line">        cache: true,</span><br><span class="line">        parallel: true,</span><br><span class="line">        sourceMap: true // set to true if you want JS source maps</span><br><span class="line">      &#125;),</span><br><span class="line">      new OptimizeCSSAssetsPlugin(&#123;&#125;) //压缩css</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new CleanWebpackPlugin([&apos;dist/*&apos;]), //去除dist目录</span><br><span class="line">    new MiniCssExtractPlugin(&#123; //提取css</span><br><span class="line">      filename: &quot;css/[name].[contenthash:8].css&quot;,</span><br><span class="line">      chunkFilename: &quot;css/[name].[contenthash:8].css&quot;</span><br><span class="line">    &#125;),</span><br><span class="line">    new copyWebpackPlugin([&#123; //这个可以提取静态文件，以后还会增加</span><br><span class="line">        from: path.resolve(__dirname, &quot;../src/assets&quot;),</span><br><span class="line">        to: &apos;./assets&apos;,</span><br><span class="line">        ignore: [&apos;.*&apos;] //排除目录</span><br><span class="line">    &#125;]),</span><br><span class="line">    new Purifycss(&#123; //tree shaking css</span><br><span class="line">      paths: glob.sync([</span><br><span class="line">        path.join(__dirname, &apos;../src/*.html&apos;),</span><br><span class="line">        path.join(__dirname, &apos;../src/*.js&apos;)</span><br><span class="line">      ])</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;webpack-配置&quot;&gt;&lt;a href=&quot;#webpack-配置&quot; class=&quot;headerlink&quot; title=&quot;webpack 配置&quot;&gt;&lt;/a&gt;webpack 配置&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="demoorbug.github.io/2019/03/03/git/"/>
    <id>demoorbug.github.io/2019/03/03/git/</id>
    <published>2019-03-03T04:39:56.000Z</published>
    <updated>2022-03-15T22:58:15.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新电脑创建后快速使用-git"><a href="#新电脑创建后快速使用-git" class="headerlink" title="新电脑创建后快速使用 git"></a>新电脑创建后快速使用 git</h1><p>博客怎么没了？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~ //切换到根目录</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"demoorbug@gmail.com"</span></span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">cat id_rsa.pub // 将打印出来的复制到 github.com&gt;settings&gt;SSH and GPG Keys&gt;New SSH</span><br><span class="line">key</span><br><span class="line">git config --global user.name <span class="string">"DEBUG"</span></span><br><span class="line">git config --global user.email  <span class="string">"demoorbug@gmail.com"</span></span><br></pre></td></tr></table></figure><h1 id="本地项目替换线上项目"><a href="#本地项目替换线上项目" class="headerlink" title="本地项目替换线上项目"></a>本地项目替换线上项目</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//下载压缩包</span><br><span class="line">解压后进入，更改后</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'New'</span></span><br><span class="line">git remote add origin git@github.com:DemoorBug/shop.git</span><br><span class="line">git pull</span><br><span class="line">git push -u origin master -f // -f force是强制的意思</span><br></pre></td></tr></table></figure><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir shop //创建shop文件夹</span><br><span class="line"><span class="built_in">cd</span> shop</span><br><span class="line">git init //初始化项目</span><br><span class="line">touch README.md //创建初始化项目文件</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"shop"</span> //本次提交信息简介</span><br><span class="line">git remote add origin git@github.com:DemoorBug/shop.git</span><br><span class="line">git push -u origin master //-u代表了关联本地分支和线上分支的master分支，以后就可以直接git push了</span><br></pre></td></tr></table></figure><p>查看 remote 以及删除重新添加方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">git remote remove &lt;name&gt;</span><br></pre></td></tr></table></figure><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b index-redux //创建分支</span><br><span class="line">git push origin index-redux //推送到线上，没有就创建</span><br><span class="line">git checkout master</span><br><span class="line">git merge origin/index-redux // 合并分支</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>查看分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -a // 或</span><br><span class="line">git branch</span><br></pre></td></tr></table></figure><p>删除分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d index-redux // 删除本地分支</span><br><span class="line">git push origin --delect index-redux // 删除远程分支</span><br></pre></td></tr></table></figure><h1 id="撤销-commit"><a href="#撤销-commit" class="headerlink" title="撤销 commit"></a>撤销 commit</h1><p>这样就成功的撤销了你的 commit<br>注意，仅仅是撤回 commit 操作，您写的代码仍然保留。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></figure><p>HEAD^的意思是上一个版本，也可以写成 HEAD~1<br>如果你进行了 2 次 commit，想都撤回，可以使用 HEAD~2</p><p>options<br>–mixed<br>意思是：不删除工作空间改动代码，撤销 commit，并且撤销 git add . 操作<br>这个为默认参数,git reset –mixed HEAD^ 和 git reset HEAD^ 效果是一样的。</p><p>–soft<br>不删除工作空间改动代码，撤销 commit，不撤销 git add .</p><p>–hard<br>删除工作空间改动代码，撤销 commit，撤销 git add .</p><h2 id="如果是注释写错了可以"><a href="#如果是注释写错了可以" class="headerlink" title="如果是注释写错了可以"></a>如果是注释写错了可以</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend // 就会进入编辑模式</span><br></pre></td></tr></table></figure><h1 id="拉取线上代码"><a href="#拉取线上代码" class="headerlink" title="拉取线上代码"></a>拉取线上代码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:DemoorBug/pubg-api.git // 项目地址</span><br></pre></td></tr></table></figure><h1 id="win10-系统激活"><a href="#win10-系统激活" class="headerlink" title="win10 系统激活"></a>win10 系统激活</h1><ol><li>打开“MSDOS”窗口，在此界面中，依次输出以下命令：slmgr.vbs /upk 复制以上命令，并在<br>MSDOW 窗口中右击以粘贴此命令，按回车进行确定，显示:“已成功卸载了产品密钥”；</li><li>接着输入以下命令：slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX 显示:“成功的安装了产品<br>密钥”；</li><li>继续输入以下命令：slmgr /skms zh.us.to，显示:“密钥管理服务计算机名成功的设置为<br>zh.us.to”；</li><li>下来输入以下命令：slmgr /ato，显示:“成功的激活了产品”；</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;新电脑创建后快速使用-git&quot;&gt;&lt;a href=&quot;#新电脑创建后快速使用-git&quot; class=&quot;headerlink&quot; title=&quot;新电脑创建后快速使用 git&quot;&gt;&lt;/a&gt;新电脑创建后快速使用 git&lt;/h1&gt;&lt;p&gt;博客怎么没了？&lt;/p&gt;
&lt;figure cl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>商城网站开发记录</title>
    <link href="demoorbug.github.io/2019/03/03/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>demoorbug.github.io/2019/03/03/商城网站开发记录/</id>
    <published>2019-03-03T04:38:50.000Z</published>
    <updated>2022-03-15T22:58:15.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="依照官方webpack-4配置"><a href="#依照官方webpack-4配置" class="headerlink" title="依照官方webpack 4配置"></a>依照官方webpack 4配置</h1><p><a href="https://webpack.js.org/guides/installation" target="_blank" rel="noopener">webpack官方</a></p><p>官方的文档很详细，看起来轻松多了<br>今天看到Production （生产）明天继续</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;依照官方webpack-4配置&quot;&gt;&lt;a href=&quot;#依照官方webpack-4配置&quot; class=&quot;headerlink&quot; title=&quot;依照官方webpack 4配置&quot;&gt;&lt;/a&gt;依照官方webpack 4配置&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://w
      
    
    </summary>
    
    
  </entry>
  
</feed>
